expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
fn <- paste0(test_path(), "/goodValues/DfSaveDataFile.xlsx")
if (!file.exists(fn)) {
DfSaveDataFile(dataset05, fileName = fn, format = "JAFROC")
}
fn1 <- paste0(test_path(), "/goodValues/DfSaveDataFile1.xlsx")
DfSaveDataFile(dataset05, fileName = fn1, format = "JAFROC")
for (i in 1:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook(fn, i) # check each sheet individually
dfCurrent <- readWorkbook(fn1, i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
devtools::test()
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
ret <- FitCbmRoc(dataset02)
ret <- ret[1:7]
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
if (!file.exists(fn)) {
ret <- FitCbmRoc(dataset02)[1:7]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(FitCbmRoc(dataset02)[1:7], ret)
fn <- paste0(test_path(), "/goodValues/FitCorCbm")
ret <- FitCorCbm(DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7)))
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
ret <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
if (!file.exists(fn)) {
ret <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret <- ret[1:7]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret1 <- ret1[1:7]
expect_equal(ret1, ret)
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
if (!file.exists(fn)) {
ret <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret <- ret[1:7]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret1 <- ret1[1:7]
expect_equal(ret1, ret)
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
if (!file.exists(fn)) {
ret <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret <- ret[1:7]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret1 <- ret1[1:7]
expect_equal(ret1, ret)
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc05")
if (!file.exists(fn)) {
ret <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret <- ret[1:7]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC"))
ret1 <- ret1[1:7]
expect_equal(ret1, ret)
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc02")
if (!file.exists(fn)) {
ret <- FitBinormalRoc(dataset02)
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(FitBinormalRoc(dataset02), ret)
fn <- paste0(test_path(), "/goodValues/FitBinormalRoc02")
if (!file.exists(fn)) {
ret <- FitBinormalRoc(dataset02)[1:7]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(FitBinormalRoc(dataset02)[1:7], ret)
fn <- paste0(test_path(), "/goodValues/FitRsmRoc")
ret <- FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))
fn <- paste0(test_path(), "/goodValues/FitRsmRoc")
if (!file.exists(fn)) {
ret <- FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))[1:8]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))[1:8], ret)
ret <- FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))
ret1 <- ret[1:8]
ret2 <- FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))[1:8]
fn <- paste0(test_path(), "/goodValues/FitRsmRoc")
if (!file.exists(fn)) {
ret <- FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))[1:8]
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(FitRsmRoc(dataset02, UtilLesionDistribution(dataset02))[1:8], ret)
fn <- paste0(test_path(), "/goodValues/FitRsmRocDegenerate")
ret <- FitRsmRoc(datasetDegenerate, UtilLesionDistribution(datasetDegenerate))
fn <- paste0(test_path(), "/goodValues/CORCBM/DfCreateCorCbmDataset")
fn
ds <- DfCreateCorCbmDataset()
saveRDS(ds, file = fn)
ret <- StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
crossedFileName <- system.file(
"extdata", "includedCrossedModalitiesData.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues/SigTest/Crossed")
if (!file.exists(fn)) {
ret <- StSignificanceTestingCrossedModalities(datasetCrossedModality, 1)
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(StSignificanceTestingCrossedModalities(datasetCrossedModality, 1), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/SigTest/SingleFixedFactor_02_1_14")
if (!file.exists(fn)) {
ret <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset02, 1, 1:4), FOM = "Wilcoxon")
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset02, 1, 1:4), FOM = "Wilcoxon"), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/SigTest/SingleFixedFactor_05_1_14")
if (!file.exists(fn)) {
ret <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1, 1:4), FOM = "Wilcoxon")
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1, 1:4), FOM = "Wilcoxon"), ret)
# end of test
str(dataset05)
fn <- paste0(test_path(), "/goodValues/SigTest/SingleFixedFactor_05_1_14")
if (!file.exists(fn)) {
ret <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1, 1:4))
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1, 1:4)), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/SigTest/SingleFixedFactor_05_12_4")
if (!file.exists(fn)) {
ret <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1:2, 4))
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1:2, 4)), ret)
# end of test
library(RJafroc)
expect_error(UtilMeanSquares(dataset05, FOM = "Wilcoxon", method = "ORH"))
expect_error(UtilMeanSquares(dataset01))
a <- 2;b <- 0.7
UtilAucBinormal(a,b)
fom_arr <- c("Wilcoxon", "PCL", "ALROC")
i <- 1
fom_arr[i] in c("PCL", "ALROC"))
fom_arr[i] %in% c("PCL", "ALROC"))
fom_arr[i] %in% c("PCL", "ALROC")
i <- 2
fom_arr[i] %in% c("PCL", "ALROC")
fom_arr <- c("Wilcoxon", "PCL", "ALROC")
method_arr <- c("singleModality", "dualModality")
dataset_arr <- c(dataset09, datasetCadLroc)
dataset_arr_str <- c("dataset09", "datasetCadLroc")
d <- 1;dataset <- dataset_arr[[d]]
i <- 1;j <- 1
((dataset_arr_str[d]$dataType != "ROC") && (fom_arr[i] == "Wilcoxon"))
((dataset_arr[d]$dataType != "ROC") && (fom_arr[i] == "Wilcoxon"))
dataset <- dataset_arr[d
]
dataset_arr[1]
ds <- dataset_arr[1]
dataset <- dataset_arr[[d]]
dataset_arr <- list(dataset09, datasetCadLroc)
dataset_arr_str <- c("dataset09", "datasetCadLroc")
fom_arr <- c("Wilcoxon", "PCL", "ALROC")
method_arr <- c("singleModality", "dualModality")
dataset <- dataset_arr[[d]]
((dataset_arr[d]$dataType != "ROC") && (fom_arr[i] == "Wilcoxon"))
((dataset$dataType != "ROC") && (fom_arr[i] == "Wilcoxon"))
((dataset$dataType == "ROC") && (fom_arr[i] %in% c("PCL", "ALROC")))
fn <- paste0(test_path(), "/goodValues/SigTestCad/", dataset, method_arr[j], fom_arr[i])
ret <- StSignificanceTestingCadVsRadiologists (dataset, FOM = fom_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
fn
fn <- paste0(test_path(), "/goodValues/SigTestCad/", dataset_arr_str[d], method_arr[j], fom_arr[i])
ret <- StSignificanceTestingCadVsRadiologists (dataset, FOM = fom_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
ret <- readRDS(fn)
expect_equal(StSignificanceTestingCadVsRadiologists (dataset, FOM = fom_arr[i], method = method_arr[j]), ret)
dataset_arr <- list(dataset09, datasetCadLroc, dataset01, dataset02)
dataset_arr_str <- c("dataset09", "datasetCadLroc", "dataset01", "dataset02")
fom_arr <- c("Wilcoxon", "PCL", "ALROC")
method_arr <- c("singleModality", "dualModality")
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(fom_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (fom_arr[i] != "Wilcoxon")){
cat("1st if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j]))
} else if ((dataset$dataType == "ROC") && (fom_arr[i] %in% c("PCL", "ALROC"))) {
cat("2nd if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j]))
} else if (((dataset$dataType == "LROC") && (fom_arr[i] %in% c("Wilcoxon", "ALROC", "PCL")))) {
cat("3rd if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j]))
} else {
cat("4th if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j]))
# end of test
}
dataset_arr <- list(dataset09, datasetCadLroc, dataset01, dataset02)
dataset_arr_str <- c("dataset09", "datasetCadLroc", "dataset01", "dataset02")
fom_arr <- c("Wilcoxon", "PCL", "ALROC")
method_arr <- c("singleModality", "dualModality")
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(fom_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (fom_arr[i] != "Wilcoxon")){
cat("1st if\n")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
} else if ((dataset$dataType == "ROC") && (fom_arr[i] %in% c("PCL", "ALROC"))) {
cat("2nd if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
} else if (((dataset$dataType == "LROC") && (fom_arr[i] %in% c("Wilcoxon", "ALROC", "PCL")))) {
cat("3rd if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
} else {
cat("4th if")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
# end of test
}
dataset_arr <- list(dataset09, datasetCadLroc, dataset01, dataset02)
dataset_arr_str <- c("dataset09", "datasetCadLroc", "dataset01", "dataset02")
fom_arr <- c("Wilcoxon", "PCL", "ALROC")
method_arr <- c("singleModality", "dualModality")
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(fom_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (fom_arr[i] != "Wilcoxon")){
cat("1st if\n")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
} else if ((dataset$dataType == "ROC") && (fom_arr[i] %in% c("PCL", "ALROC"))) {
cat("2nd if\n")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
} else if (((dataset$dataType == "LROC") && (fom_arr[i] %in% c("Wilcoxon", "ALROC", "PCL")))) {
cat("3rd if\n")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
} else {
cat("4th if\n")
cat(dataset_arr_str[d], fom_arr[i], method_arr[j], "\n")
# end of test
}
d <- 3;i <- 3;j <- 1
dataset <- dataset_arr[[d]]
fom_arr[i]
expect_error(StSignificanceTestingCadVsRadiologists (dataset, FOM = fom_arr[i], method = method_arr[j]))
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
I <- 2; J <- 5
fn <- paste0(test_path(), "/goodValues/SimulateDs/SimulateCorCbmDataset")
if (!file.exists(fn)) {
ret <- SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum)
saveRDS(ret, file = fn)
}
fn <- paste0(test_path(), "/goodValues/SimulateDs/SimulateCorCbmDataset")
if (!file.exists(fn)) {
ret <- SimulateCorCbmDataset()
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(SimulateCorCbmDataset(), ret)
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
I <- 2; J <- 5
set.seed(1)
fn <- paste0(test_path(), "/goodValues/SimulateDs/SimulateFrocDataset")
if (!file.exists(fn)) {
ret <- SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum)
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum), ret)
# end of test
dataset <- dataset_arr[[1]]
test_that("UtilOutputReport Error", {
fn <- system.file("extdata", "includedRocData.lrc",
package = "RJafroc", mustWork = TRUE)
expect_error(
UtilOutputReport(DataFileName = fn, overwrite = TRUE)) # If DataFileName is specified, then DataFileFormat must be specified
expect_error(
UtilOutputReport(dataset02, DataFileName = "MyData")) # If DataFileName is specified, then DataFileFormat must be specified
expect_error(
UtilOutputReport(dataset02, DataFileName = "MyData", DataFileFormat = "txt")) # data file format has to be JAFROC or MRMC,  or iMRMC
expect_error(
UtilOutputReport(dataset02, DataFileName = "MyData.tx1", DataFileFormat = "MRMC")) # data file must be *.lrc or excel
ret <- UtilOutputReport(dataset03, ReportFileFormat = "xlsx", overwrite = TRUE)
)
ret <- UtilOutputReport(dataset03, ReportFileFormat = "xlsx", overwrite = TRUE)
fn <- paste0(test_path(), "/goodValues/OutputReport/", "03", "Excel")
fn
ret <- UtilOutputReport(dataset03, ReportFileFormat = "xlsx", overwrite = TRUE)
fn <- paste0(test_path(), "/goodValues/Plots/BinormalRoc02")
if (!file.exists(fn)) {
ret <- PlotBinormalFit(c(1, 2), c(0.5, 0.5))
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotBinormalFit(c(1, 2), c(0.5, 0.5)), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/Plots/CbmFit")
if (!file.exists(fn)) {
ret <- PlotCbmFit(c(1, 2), c(0.5, 0.5))
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotCbmFit(c(1, 2), c(0.5, 0.5)), ret)
# end of test
lesDistr <- rbind(c(1, 0.2), c(2, 0.4), c(3, 0.1), c(4, 0.3))
lesionWeights <- rbind(c(1.0, -Inf, -Inf, -Inf),
c(0.4,  0.6, -Inf, -Inf),
c(0.2,  0.3,  0.5, -Inf),
c(0.3,  0.4, 0.2,  0.1))
fn <- paste0(test_path(), "/goodValues/Plots/Rsm")
if (!file.exists(fn)) {
ret <- PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1))
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1)), ret)
plotT <- list(1, 2, c(1:2), c(1:2))
plotR <- list(2, c(2:3), c(1:3), 1)
fn <- paste0(test_path(), "/goodValues/Plots/Rsm")
if (!file.exists(fn)) {
ret <- PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR) # ROC
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR), ret)
# end of test
plotT <- list(1, 2, c(1:2), c(1:2))
plotR <- list(2, c(2:3), c(1:3), 1)
fn <- paste0(test_path(), "/goodValues/Plots/ds04")
if (!file.exists(fn)) {
ret <- PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR) # ROC
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/Plots/ds04-FROC")
if (!file.exists(fn)) {
ret <- PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "FROC") # FROC
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "FROC"), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/Plots/ds04-AFROC")
if (!file.exists(fn)) {
ret <- PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "AFROC") # AFROC
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "AFROC"), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/Plots/ds04-wAFROC")
if (!file.exists(fn)) {
ret <- PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "wAFROC") # AFROC
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "wAFROC"), ret)
# end of test
fn <- paste0(test_path(), "/goodValues/Plots/ds04-wAFROC1")
if (!file.exists(fn)) {
ret <- PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "wAFROC1") # wAFROC1
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(PlotEmpiricalOperatingCharacteristics(dataset04, trts = plotT, rdrs = plotR, opChType = "wAFROC1"), ret)
# end of test
devtools::test()
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
I <- 2; J <- 5
fn <- paste0(test_path(), "/goodValues/SimulateDs/SimulateFrocDataset")
if (!file.exists(fn)) {
ret <- SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum)
saveRDS(ret, file = fn)
}
set.seed(1)
ret <- readRDS(fn)
expect_equal(SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum), ret)
# end of test
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
I <- 2; J <- 5
fn <- paste0(test_path(), "/goodValues/SimulateDs/SimulateFrocDataset")
if (!file.exists(fn)) {
ret <- SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum)
saveRDS(ret, file = fn)
}
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
ret <- readRDS(fn)
expect_equal(SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum), ret)
# end of test
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- list("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
d <- 1;i <- i;j <- 1;ret <- StSignificanceTesting(dataset_arr[[d]], FOM = FOM_arr[1], method = method_arr[j])
library(RJafroc)
devtools::test()
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- list("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
# options_arr <- c("RRRC", "FRRC", "RRFC")
## cycle through all representative datasets, FOMs, methods and options
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(FOM_arr)) {
for (j in 1:length(method_arr)) {
# for (k in 1:length(options_arr)) {
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilMeanSquares(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilMeanSquares(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/MeanSquares/",
dataset_arr_str[d], FOM_arr[i],"-", method_arr[j])
if (!file.exists(fn)) {
ret <- UtilMeanSquares(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(UtilMeanSquares(dataset, FOM = FOM_arr[i], method = method_arr[j]), ret)
# end of test
#  }
}
d <- 2
i <- 5;j <- 1
fn <- paste0(test_path(), "/goodValues/MeanSquares/", dataset_arr_str[d], FOM_arr[i],"-", method_arr[j])
fn
!file.exists(fn)
ret <- UtilMeanSquares(dataset, FOM = FOM_arr[i], method = method_arr[j])
FOM_arr[i]
library(RJafroc)
method_arr[j]
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = DBMH"")
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH"")
)
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
FOM
str(pseudoValues)
I
K
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
str(pseudoValues)
K
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
FOM
str(fomArray)
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
FOM
K2
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
str(pseudoValues)
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
str(pseudoValues)
library(RJafroc)
ret <- UtilMeanSquares(dataset, FOM = "MaxLLF", method = "DBMH")
