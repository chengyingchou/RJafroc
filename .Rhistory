test_that("SsSampleSizeKGivenJ:DBMH: expected values are obtained for dataset02",
expect_equal(SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC")$KRRRC,
251))
test_that("SsSampleSizeKGivenJ:ORH: expected values are obtained for dataset02",
expect_equal(SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC", method = "ORH")$KRRRC,
251))
SsPowerTable(dataset02)
option
nCases
randomSampleSize
j
randomSampleSize
randomSampleSize$numReaders[1]
SsPowerTable(dataset02)
randomSampleSize
SsPowerTable(dataset02)
x <- c(3, ">2000", NA)
x
x <- SsPowerTable(dataset02)
as.numeric(x$powerTableRRRC$numReaders[1])
as.numeric(x$powerTableRRRC$numCases[1])
as.numeric(x$powerTableRRRC$power[1])
x$powerTableRRRC
as.numeric(x$powerTableRRRC$numReaders[3])
as.numeric(x$powerTableRRRC$numCases[3])
as.numeric(x$powerTableRRRC$numReaders[[3]])
as.numeric(x$powerTableRRRC$numReaders[98])
as.numeric(x$powerTableRRRC$numReaders[99])
as.numeric(x$powerTableRRRC$numReaders[100])
as.numeric(x$powerTableRRRC$numReaders[3])
x["powerTableRRRC"]
x["powerTableRRRC",2]
x[1,"powerTableRRRC"]
x["powerTableRRRC",6]
x[3,6]
y <- x$powerTableFRRC
y$numReaders
y$numReaders[1]
y$numReaders[2]
y$numReaders[98]
y$numCases[2]
y$numCases
y$power
y$power[2]
SsPowerTable(dataset02)$powerTableRRRC$numReaders[1]
x <- SsPowerTable(dataset02)
y <- x$powerTableRRRC
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(y$numReaders[1],
3))
y$numReaders[1]
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numReaders[1]),
3))
x <- data.frame()
library(RJafroc)
x <- SsPowerTable(dataset02)
randomSampleSize
library(RJafroc)
x <- SsPowerTable(dataset02)
randomSampleSize[1,2]
randomSampleSize[1,1]
randomSampleSize[1,3]
randomSampleSize[3,3]
randomSampleSize[3,2]
library(RJafroc)
x <- SsPowerTable(dataset02)
library(RJafroc)
x <- SsPowerTable(dataset02)
library(RJafroc)
x <- SsPowerTable(dataset02)
y <- data.frame(randomSampleSize)
y <- data.frame(randomSampleSize, stringsAsFactors = FALSE)
library(RJafroc)
x <- SsPowerTable(dataset02)
x$powerTableRRRC$numReaders[3]
x <- SsPowerTable(dataset02)
y <- x$powerTableRRRC
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numReaders[1]),3))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numReaders[4]),6))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(y$numReaders[4],6))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numCases[4]),252))
y$power[4]
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(y$power[4],0.801))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(y$numCases[4],251))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(y$numReaders[4],6))
y$numReaders[4]
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(y$numReaders[4],6))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numReaders[4]),6))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numCases[4]),251))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$power[4]),0.801))
SsPowerTable(dataset02, option = "RRRC")
context("Sample Size ROC")
test_that("SsPowerGivenJK:DBMH: expected values are obtained for dataset02",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC,
0.5526116, tolerance = 5e-8))
test_that("SsPowerGivenJK:ORH: expected values are obtained for dataset02",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC", method = "ORH")$powerRRRC,
0.5526116, tolerance = 5e-8))
test_that("SsSampleSizeKGivenJ:DBMH: expected values are obtained for dataset02",
expect_equal(SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC")$KRRRC,
251))
test_that("SsSampleSizeKGivenJ:ORH: expected values are obtained for dataset02",
expect_equal(SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC", method = "ORH")$KRRRC,
251))
x <- SsPowerTable(dataset02)
y <- x$powerTableRRRC
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numReaders[4]),6))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numCases[4]),251))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$power[4]),0.801))
x <- SsPowerTable(dataset02, method = "ORH")
y <- x$powerTableRRRC
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numReaders[4]),6))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$numCases[4]),251))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(as.numeric(y$power[4]),0.801))
library(RJafroc)
source('~/rjafroc-master/tests/testthat.R')
test_package("testthat")
source('~/rjafroc-master/tests/testthat/test_sample_size_roc.R')
dataset <- dataset02
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
pkgdown::build_site()
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
fCrit <- qf(0.95, 2,10)
qf(0.95, 2,10)
qf(0.95, 1,10)
qf(0.95, 2,100)
qf(0.95, 1,100)
retDbm <- StSignificanceTesting(dataset02, FOM = "Wilcoxon", method = "DBMH")
library(RJafroc)
retDbm <- StSignificanceTesting(dataset02, FOM = "Wilcoxon", method = "DBMH")
retDbm$varComp
MS <- UtilMeanSquares(dataset02, FOM = "Wilcoxon", method = "DBMH")
MS
MS[1:6]
MS[[1:6]]
MS[[1]]
MS[[2]]
MS[[1:7]]
MS[[3]]
MS[[4]]
MS[[]]
MS
str(MS)
?SsSampleSizeKGivenJ
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::test()
tmp <- tempfile()
expect_known_output(
binned <- DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC");FitBinormalRoc(binned),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
FitBinormalRoc(DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC")),
tmp, print = TRUE, update = TRUE)
devtools::test()
plotT <- list(1, 2, c(1:2))
plotR <- list(2, c(2:3), c(1:3))
tmp <- tempfile()
expect_known_output(
PlotEmpiricalOperatingCharacteristics(dataset = dataset04, trts = plotT, rdrs = plotR),
tmp, print = TRUE, update = TRUE)
library(RJafroc)
plotT <- list(1, 2, c(1:2))
plotR <- list(2, c(2:3), c(1:3))
tmp <- tempfile()
expect_known_output(
PlotEmpiricalOperatingCharacteristics(dataset = dataset04, trts = plotT, rdrs = plotR),
tmp, print = TRUE, update = TRUE)
library(RJafroc)
tmp <- tempfile()
expect_known_output(
PlotEmpiricalOperatingCharacteristics(dataset = dataset04, trts = plotT, rdrs = plotR),
tmp, print = TRUE, update = TRUE)
devtools::test()
devtools::test("test-plotting-routines.R")
devtools::test()
tmp <- tempfile()
fileName <- system.file("extdata", "includedRocData.xlsx",
package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE, update = TRUE)
fileName <- system.file("extdata", "includedRocData.xlsx",
package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE, update = TRUE)
fileName
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
tmp <- tempfile()
expect_known_output(
skip_on_travis(),
FitCorCbm(DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
skip_on_cran(),
skip_on_travis(),
skip_on_os("mac"),
FitCorCbm(DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))),
tmp, print = TRUE, update = TRUE)
devtools::test()
tmp <- tempfile()
expect_known_output(
skip_on_os("mac"),
FitCorCbm(DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))),
tmp, print = TRUE, update = TRUE)
test_that("skip example", {
skip_on_os("mac")
tmp <- tempfile()
expect_known_output(
skip_on_os("mac"),
FitCorCbm(DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))),
tmp, print = TRUE, update = TRUE)
})
devtools::test()
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::test()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(RJafroc)
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test_that("DfSaveDataFile", {
tmp <- tempfile(fileext = ".xlsx")
expect_known_output(
DfSaveDataFile(dataset = dataset05, fileName = "rocData2.xlsx", format = "JAFROC"),
tmp, print = TRUE, update = TRUE)
})
test_that("DfSaveDataFile", {
tmp <- tempfile(fileext = ".xlsx")
expect_known_output(
DfSaveDataFile(dataset = dataset05, fileName = "rocData2.xlsx", format = "JAFROC"),
tmp, print = TRUE, update = TRUE)
})
devtools::test()
library(RJafroc)
test_that("SimulateFrocDataset", {
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
I <- 2; J <- 5
tmp <- tempfile()
expect_known_output(
SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum),
tmp, print = TRUE, update = TRUE)
})
test_that("SimulateFrocDataset", {
set.seed(1)
K1 <- 5;K2 <- 7;
maxLL <- 2;lesionNum <- floor(runif(K2, 1, maxLL + 1))
mu <- 1;lambda <- 1;nu <- 1 ;zeta1 <- -1
I <- 2; J <- 5
tmp <- tempfile()
expect_known_output(
SimulateFrocDataset(
mu = mu, lambda = lambda, nu = nu, zeta1 = zeta1,
I = I, J = J, K1 = K1, K2 = K2, lesionNum = lesionNum),
tmp, print = TRUE, update = TRUE)
})
test_that("SimulateRocDataset", {
set.seed(1)
K1 <- 5;K2 <- 7;
a <- 1.5;b <- 0.5
tmp <- tempfile()
expect_known_output(
SimulateRocDataset(K1 = K1, K2 = K2,a = a, b = b),
tmp, print = TRUE, update = TRUE)
})
devtools::test()
library(RJafroc)
devtools::test()
test_that("PlotEmpiricalOperatingCharacteristicsAvg", {
plotT <- list(1, 2, c(1:2))
plotR <- list(2, c(2:3), c(1:3))
tmp <- tempfile()
expect_known_output(
PlotEmpiricalOperatingCharacteristics(dataset = dataset04, trts = plotT, rdrs = plotR),
tmp, print = TRUE, update = TRUE)
})
test_that("PlotEmpiricalOperatingCharacteristicsAvg", {
plotT <- list(1, 2, c(1:2))
plotR <- list(2, c(2:3), c(1:3))
tmp <- tempfile()
expect_known_output(
PlotEmpiricalOperatingCharacteristics(dataset = dataset04, trts = plotT, rdrs = plotR),
tmp, print = TRUE, update = TRUE)
})
library(RJafroc)
?`RJafroc-package`
test_that("StSignificanceTestingSingleFixedFactor", {
tmp <- tempfile()
singleFactorData <- DfExtractDataset(dataset02, 1, 1:4)
expect_known_output(
StSignificanceTestingSingleFixedFactor(singleFactorData, FOM = "Wilcoxon"),
tmp, print = TRUE, update = TRUE)
})
library(testthat)
library(devtools)
test_that("StSignificanceTestingSingleFixedFactor", {
tmp <- tempfile()
singleFactorData <- DfExtractDataset(dataset02, 1, 1:4)
expect_known_output(
StSignificanceTestingSingleFixedFactor(singleFactorData, FOM = "Wilcoxon"),
tmp, print = TRUE, update = TRUE)
})
test_that("StSignificanceTestingCrossedModalities", {
tmp <- tempfile()
crossedFileName <- system.file("extdata",
"includedCrossedModalitiesData.xlsx",
package = "RJafroc", mustWork = TRUE)
crossedData <- DfReadCrossedModalities(crossedFileName)  expect_known_output(
StSignificanceTestingCrossedModalities(datasetCrossedModality, 1),
tmp, print = TRUE, update = TRUE)
})
test_that("StSignificanceTestingCrossedModalities", {
tmp <- tempfile()
crossedFileName <- system.file("extdata",
"includedCrossedModalitiesData.xlsx",
package = "RJafroc", mustWork = TRUE)
crossedData <- DfReadCrossedModalities(crossedFileName)
expect_known_output(
StSignificanceTestingCrossedModalities(datasetCrossedModality, 1),
tmp, print = TRUE, update = TRUE)
})
test_that("StSignificanceTestingCadVsRadiologists", {
tmp <- tempfile()
expect_known_output(
StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality"),
tmp, print = TRUE, update = TRUE)
})
test_that("StSignificanceTestingCadVsRadiologists", {
tmp <- tempfile()
expect_known_output(
StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "dualModality"),
tmp, print = TRUE, update = TRUE)
})
test_that("StSignificanceTestingCadVsRadiologists", {
tmp <- tempfile()
expect_known_output(
StSignificanceTestingCadVsRadiologists (
datasetCadLroc, FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05),
tmp, print = TRUE, update = TRUE)
})
test_that("UtilAucBinormal", {
tmp <- tempfile()
a <- 2;b <- 0.7
expect_known_output(
UtilAucBinormal(a,b),
tmp, print = TRUE, update = TRUE)
})
a <- 2;b <- 0.7
UtilAucBinormal(a,b)
test_that("UtilAucBinormal", {
a <- 2;b <- 0.7
expect_equal(UtilAucBinormal(a,b), 0.9493375)
})
mu <- 2;alpha <- 0.8
UtilAucCBM(mu,alpha)
test_that("UtilAucCBM", {
mu <- 2;alpha <- 0.8
expect_equal(UtilAucCBM(mu,alpha), 0.8370803)
})
?expect_equal
test_that("UtilAucCBM", {
mu <- 2;alpha <- 0.8
x <- 0.8370803
expect_equal(UtilAucCBM(mu,alpha), x, tolerance = 1e-6, scale = x)
})
c1 <- .2;da <- 1.5
UtilAucPROPROC(c1,da)
test_that("UtilAucPROPROC", {
c1 <- .2;da <- 1.5
x <- 0.8558655
expect_equal(UtilAucPROPROC(mu,alpha), x, tolerance = 1e-6, scale = x)
})
c1 <- .2;da <- 1.5
UtilAucPROPROC(c1,da)
test_that("UtilAucPROPROC", {
c1 <- .2;da <- 1.5
x <- 0.8558655
expect_equal(UtilAucPROPROC(c1,da), x, tolerance = 1e-6, scale = x)
})
mu <- 1;lambdaP <- 1;nuP <- 1
lesDistr <- rbind(c(1, 0.9), c(2, 0.1))
## i.e., 90% of dis. cases have one lesion, and 10% have two lesions
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucROC
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucAFROC
test_that("UtilAucsRSM", {
mu <- 1;lambdaP <- 1;nuP <- 1
lesDistr <- rbind(c(1, 0.9), c(2, 0.1))
x <- 0.8470065
expect_equal(UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucROC,
x, tolerance = 1e-6, scale = x)
})
test_that("UtilAucsRSM", {
mu <- 1;lambdaP <- 1;nuP <- 1
lesDistr <- rbind(c(1, 0.9), c(2, 0.1))
x <- 0.8470065
expect_equal(UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucROC,
x, tolerance = 1e-6, scale = x)
x <- 0.8071583
expect_equal(UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucAFROC,
x, tolerance = 1e-6, scale = x)
})
UtilFigureOfMerit(dataset = dataset02, FOM = "Wilcoxon")
test_that("UtilFigureOfMerit", {
tmp <- tempfile()
expect_known_output(
UtilFigureOfMerit(dataset = dataset02, FOM = "Wilcoxon"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilFigureOfMerit(DfFroc2Roc(dataset01), FOM = "Wilcoxon"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilFigureOfMerit(dataset = datasetCadLroc, FOM = "ALROC", FPFValue = 0.2),
tmp, print = TRUE, update = TRUE)
})
test_that("UtilPseudoValues", {
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset02, FOM = "Wilcoxon"),
tmp, print = TRUE, update = TRUE)
})
source('~/rjafroc-master/tests/testthat/test-utils.R')
library(RJafroc)
devtools::test()
library(RJafroc)
?`RJafroc-package`
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
library(testthat)
library(devtools)
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
test_that("DfReadDataFileMRMC", {
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.csv", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "MRMC"),
tmp, print = TRUE, update = TRUE)
})
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.csv", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "MRMC"),
tmp, print = TRUE, update = TRUE)
test_that("DfReadDataFile JAFROC", {
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedFrocData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, renumber = TRUE),
tmp, print = TRUE, update = TRUE)
})
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
DfSaveDataFile(dataset = dataset02,
fileName = "rocData2.lrc", format = "MRMC",
dataDescription = "ExampleROCdata1")
DfSaveDataFile(dataset = dataset02, fileName = "rocData2.lrc", format = "MRMC")
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file-routines.R')
library(RJafroc)
devtools::test()
?RJafroc
??RJafroc
??RJafroc
library(RJafroc)
