mine <- as.numeric(mine)
# insufficient decimal places in theirs
expect_equal(theirs, mine, tolerance = 0.005, scale = abs(mine))
theirs <- as.vector(df18[1:2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$FTests[2,1:2]
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
# insufficient decimal places in theirs
expect_equal(theirs, mine, tolerance = 0.001, scale = abs(mine))
theirs <- as.vector(df18[1:2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$FTests[2,1:2]
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
# insufficient decimal places in theirs
expect_equal(theirs, mine, tolerance = 0.0001, scale = abs(mine))
theirs <- as.vector(df18[1:2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$FTests[2,1:2]
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
# insufficient decimal places in theirs
expect_equal(theirs, mine, tolerance = 0.00001, scale = abs(mine))
theirs <- as.vector(df18[1:2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$FTests[2,1:2]
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
expect_equal(theirs, mine, tolerance = 0.000001, scale = abs(mine))
theirs <- as.vector(df18[1:2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$FTests[2,1:2]
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
expect_equal(theirs, mine, tolerance = 0.000001, scale = abs(mine))
FindString <- "    b) 95% confidence intervals and hypothesis tests (H0: difference = 0)"
offSet <- 6
nRows <- 1
nCols <- 7
rowNames <- "1 - 2"
nCols <- 1:7
ret <- ExtractDataFrame(lines, FindString, offSet, nRows, rowNames, CurrentLine, nCols)
CurrentLine <- ret$CurrentLine
df19<- ret$df
df19
OR$RRFC$ciDiffTrt
theirs <- as.vector(df19);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$ciDiffTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
expect_equal(theirs, mine, tolerance = 0.000001, scale = abs(mine))
theirs <- as.vector(df19);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$ciDiffTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.numeric(mine)
expect_equal(theirs, mine, tolerance = 0.001, scale = abs(mine))
FindString <- "    c) Single treatment AUC 95% confidence intervals"
offSet <- 6
nRows <- 2
nCols <- 6
rowNames <- c("1" ,"2")
nCols <- 1:6
ret <- ExtractDataFrame(lines, FindString, offSet, nRows, rowNames, CurrentLine, nCols)
CurrentLine <- ret$CurrentLine
df20<- ret$df
df20
OR$RRFC$ciAvgRdrEachTrt
theirs <- as.matrix(df20[,-2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
theirs
mine
mine
OR$RRFC$ciAvgRdrEachTrt
mine <- OR$RRFC$ciAvgRdrEachTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine
as.numeric(mine)
as.matrix(mine)
theirs <- as.matrix(df20[,-2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$ciAvgRdrEachTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.matrix(mine)
# insufficient precision printout in theirs
expect_equal(theirs, mine, tolerance = 0.001, scale = abs(mine))
theirs <- as.matrix(df20[,-2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$ciAvgRdrEachTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.matrix(mine)
# insufficient precision printout in theirs
expect_equal(theirs, mine, tolerance = 0.0001, scale = abs(mine))
theirs <- as.matrix(df20[,-2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$ciAvgRdrEachTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.matrix(mine)
# insufficient precision printout in theirs
expect_equal(theirs, mine, tolerance = 0.00001, scale = abs(mine))
theirs <- as.matrix(df20[,-2]);colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$RRFC$ciAvgRdrEachTrt
colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.matrix(mine)
# insufficient precision printout in theirs
expect_equal(theirs, mine, tolerance = 0.000001, scale = abs(mine))
source('~/GitHub/RJafroc/inst/Iowa/readIowa.R')
source('~/GitHub/RJafroc/inst/Iowa/readIowa.R')
source('~/GitHub/RJafroc/inst/Iowa/readIowa.R')
debugSource('~/GitHub/RJafroc/inst/Iowa/readIowa.R')
df5
OR$RRRC$FTests
OR$ANOVA$IndividualRdr
OR$ANOVA$IndividualTrt
OR$ANOVA$IndividualTrt[,2]
df5
df5[2:3]
theirs <- df5[2:3];colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$ANOVA$IndividualTrt[,2];colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.matrix(mine)
expect_equal(theirs, mine, tolerance = 0.00001, scale = abs(mine))
theirs
mine <- OR$ANOVA$IndividualTrt[,2];colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.matrix(mine)
mine
as.vector(mine)
mine <- as.vector(mine)
expect_equal(theirs, mine, tolerance = 0.00001, scale = abs(mine))
theirs <- df5[2:3];colnames(theirs) <- NULL;rownames(theirs) <- NULL
mine <- OR$ANOVA$IndividualTrt[,2];colnames(mine) <- NULL;rownames(mine) <- NULL
mine <- as.vector(mine)
expect_equal(theirs, mine, tolerance = 0.00001, scale = abs(mine))
source('~/GitHub/RJafroc/inst/Iowa/readIowa.R')
library(RJafroc)
source('~/GitHub/RJafroc/tests/testthat/test-StCompare2Iowa.R')
source('~/GitHub/RJafroc/tests/testthat/test-StCompare2Iowa.R')
source('~/GitHub/RJafroc/tests/testthat/test-StCompare2Iowa.R')
devtools::test()
library(RJafroc)
?`RJafroc-package`
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
gpfMyFOM(nl_j, ll_j, lV_j, lID_j, lW_j, maxNL, maxLL_j, k1j, k2j, FOM, FPFValue)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
fomArray
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
!tempOrgCode
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
foms
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
k1_j_sub
which(k1_j_sub)
ret$caseTransitions
ret$jkPseudoValues
ret$jkPseudoValues[1,1,1:10]
length(ret$jkFomValues[1,,1])
jkFOMs
str(ret$jkFomValues)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
length(modalityID)
modalityID
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
length(dataset$NL[,1,1,1])
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
x$Var * (kj-1)^2/kj
mean(Var)
mean(Cov1)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
ret
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
ret
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
varEachRdr <- vector(length = J)
cov1EachRdr <- vector(length = J)
for (j in 1:J) {
dsj <- DfExtractDataset(dataset, rdrs = j)
ret <- gpfEstimateVarCov(dsj, FOM, FPFValue, nBoots, covEstMethod, seed)
varEachRdr[j] <- ret$Var
cov1EachRdr[j] <- ret$Cov1
}
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
ret
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
VarCom
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
IndividualTrt
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
ANOVA$IndividualTrt
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
RRRC$ciDiffTrt
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
varEachTrt <- vector(length = I)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
dataset$design
varEachTrt <- vector(length = I)
cov2EachTrt <- vector(length = I)
for (i in 1:I) {
dsi <- DfExtractDataset(dataset, trts = i)
ret <- gpfEstimateVarCov(dsi, FOM, FPFValue, nBoots, covEstMethod, seed)
varEachTrt[i] <- ret$Var
cov2EachTrt[i] <- ret$Cov2
}
library(RJafroc)
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
fom_ijk
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
str(jkPseudoValues)
str(jkFomValues
)
caseTransitions
j
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
ret$jkFomValues[,j,(caseTransitions[j]+1):(caseTransitions[j+1])]
ret$jkFomValues[,j,(caseTransitions[j]+1):(caseTransitions[j+1]) drop = FALSE]
ret$jkFomValues[,j,(caseTransitions[j]+1):(caseTransitions[j+1]), drop = FALSE]
library(RJafroc)
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
str(jkFOMs)
dim(jkFOMs) <- c(I,1,kj)
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
Var
Cov1
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
x$Var
x$Cov1
library(RJafroc)
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
ANOVA$IndividualTrt[i,"cov2EachTrt"]
stdErr
df
msDenSingle
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
library(RJafroc)
StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
rocSpDataSet <- DfFroc2Roc(datasetFROCSp)
devtools::test()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
library(ggplot2)
frocData <- DfExtractDataset(dataset04, trts = c(1,2))
rocData <- DfFroc2Roc(frocData)
lesDistr <- UtilLesionDistr(frocData)
lesWghts <- UtilLesionWeightsDistr(frocData) # this is needed later
print(lesDistr)
print(lesWghts)
I <- dim(frocData$NL)[1]
J <- dim(frocData$NL)[2]
RsmParms <- array(dim = c(I,J,3))
for (i in 1:I) {
for (j in 1:J)  {
x1 <- FitRsmRoc(rocData, trt = i, rdr = j, lesDistr)
RsmParms[i,j,1] <- x1[[1]] # mu
RsmParms[i,j,2] <- x1[[2]] # lambdaP
RsmParms[i,j,3] <- x1[[3]] # nuP
}
}
muMed <- median(RsmParms[,,1])
lambdaPMed <- median(RsmParms[,,2])
nuPMed <- median(RsmParms[,,3])
temp <- UtilPhysical2IntrinsicRSM(muMed, lambdaPMed, nuPMed)
lambdaMed <- temp$lambda
nuMed <- temp$nu
aucRocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = lesDistr,
lesWghtDistr = lesWghts, OpChType = "ROC")$aucROC
aucwAfrocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = lesDistr,
lesWghtDistr = lesWghts, OpChType = "wAFROC")$aucwAFROC
deltaMu <- seq(0.01, 0.2, 0.01) # values of deltaMu to scan below
esRoc <- array(dim = length(deltaMu));eswAfroc <- array(dim = length(deltaMu))
for (i in 1:length(deltaMu)) {
esRoc[i] <- PlotRsmOperatingCharacteristics(
muMed + deltaMu[i], lambdaMed, nuMed, lesDistr = lesDistr,
lesWghtDistr = lesWghts, OpChType = "ROC")$aucROC - aucRocNH
eswAfroc[i] <- PlotRsmOperatingCharacteristics(
muMed+ deltaMu[i], lambdaMed, nuMed, lesDistr = lesDistr,
lesWghtDistr = lesWghts, OpChType = "wAFROC")$aucwAFROC - aucwAfrocNH
cat("ES_ROC = ", esRoc[i], ", ES_wAFROC = ", eswAfroc[i],"\n")
}
df <- data.frame(es_ROC = esRoc, es_wAFROC = eswAfroc)
p <- ggplot(data = df, aes(x = es_ROC, y = es_wAFROC)) +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
geom_point(size = 4) +
scale_color_manual(values = "black") +
theme(axis.title.y = element_text(size = 10,face="bold"),
axis.title.x = element_text(size = 10,face="bold")) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
print(p)
scaleFactor<-lm(eswAfroc~-1+esRoc) # fit values to straight line thru origin
effectSizeROC <- seq(0.01, 0.1, 0.01)
effectSizewAFROC <- effectSizeROC*scaleFactor$coefficients[1] # r2 = summary(scaleFactor)$r.squared
temp1 <- StSignificanceTesting(rocData, FOM = "Wilcoxon", method = "DBMH", analysisOption = "RRRC")
temp2 <- StSignificanceTesting(frocData, FOM = "wAFROC", method = "DBMH", analysisOption = "RRRC")
varCompROC <- temp1$varComp
varCompwAFROC <- temp2$varComp
temp1
temp1$ANOVA$VarCom
effectSizeROC
varCompROC
temp1$ANOVA$VarCom
varCompROC
temp1 <- StSignificanceTesting(rocData, FOM = "Wilcoxon", method = "DBMH", analysisOption = "RRRC")
temp2 <- StSignificanceTesting(frocData, FOM = "wAFROC", method = "DBMH", analysisOption = "RRRC")
varCompROC <- temp1$ANOVA$VarCom
varCompwAFROC <- temp2$ANOVA$VarCom
varCompROC
print(varCompROC)
powerROC <- array(dim = length(effectSizeROC));powerwAFROC <- array(dim = length(effectSizeROC))
JTest <- 5;KTest <- 100
varCompROC["VarErr","Estimates"]
powerROC <- array(dim = length(effectSizeROC));powerwAFROC <- array(dim = length(effectSizeROC))
JTest <- 5;KTest <- 100
for (i in 1:length(effectSizeROC)) {
varYTR <- varCompROC["VarTR","Estimates"] # these are pseudovalue based variance components assuming FOM = "Wilcoxon"
varYTC <- varCompROC["VarTC","Estimates"]
varYEps <- varCompROC["VarErr","Estimates"]
ret <- SsPowerGivenJKDbmVarComp (J = JTest, K = KTest, effectSize = effectSizeROC[i], varYTR, varYTC, varYEps, analysisOption = "RRRC")
powerROC[i] <- ret$powerRRRC
varYTR <- varCompwAFROC["VarTR","Estimates"] # these are pseudovalue based variance components assuming FOM = "wAFROC"
varYTC <- varCompwAFROC["VarTC","Estimates"]
varYEps <- varCompwAFROC["VarErr","Estimates"]
ret <- SsPowerGivenJKDbmVarComp (J = JTest, K = KTest, effectSize = effectSizewAFROC[i], varYTR, varYTC, varYEps, analysisOption = "RRRC")
powerwAFROC[i] <- ret$powerRRRC
cat("ROC-ES = ", effectSizeROC[i], ", wAFROC-ES = ", effectSizewAFROC[i],
", Power-ROC = ", powerROC[i], ", Power-wAFROC = ", powerwAFROC[i], "\n")
}
rocData <- dataset02 ##"VanDyke.lrc"
#fileName <- dataset03 ## "Franken1.lrc"
retDbm <- StSignificanceTesting(dataset = rocData, FOM = "Wilcoxon", method = "DBMH")
retDbm$RRRC$ciDiffTrt
retDbm$RRRC$ciDiffTrt[1,"Estimate"]
retDbm$RRRC$ciDiffTrt[1,"StdErr"]
devtools::build_vignettes()
SsPowerGivenJK(dataset02, FOM = "Wilcoxon", J = 6, K = 112, option = "RRRC")
devtools::build_vignettes()
frocNhData <- DfExtractDataset(dataset04, trts = c(1,2))
ret <- SsFrocNhRsmModel(frocNhData, lesionPmf = c(0.7, 0.2, 0.1))
muMed <- ret$muMed
lambdaMed <- ret$lambdaMed
nuMed <- ret$nuMed
lesDistr <- ret$lesDistr
lesWghtDistr <- ret$lesWghtDistr
scaleFactor <- ret$scaleFactor
aucRocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = lesDistr,
lesWghtDistr = lesWghtDistr, OpChType = "ROC")$aucROC
aucwAfrocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = lesDistr,
lesWghtDistr = lesWghtDistr, OpChType = "wAFROC")$aucwAFROC
x <- StSignificanceTesting(frocNhData, FOM = "wAFROC", method = "DBMH", analysisOption = "RRRC")
varCompwAFROC  <- StSignificanceTesting(frocNhData, FOM = "wAFROC", method = "DBMH", analysisOption = "RRRC")$ANOVA$VarCom
varYTR <- varCompwAFROC["VarTR","Estimates"]
varYTC <- varCompwAFROC["VarTC","Estimates"]
varYEps <- varCompwAFROC["VarErr","Estimates"]
ret <- SsPowerGivenJKDbmVarComp (J = J, K = K, effectSize = effectSizewAFROC,
varYTR, varYTC, varYEps, analysisOption = "RRRC")
K
ROC_ES <- 0.05
effectSizewAFROC <- scaleFactor * ROC_ES
J <- 5;K <- 100
varYTR <- varCompwAFROC["VarTR","Estimates"]
varYTC <- varCompwAFROC["VarTC","Estimates"]
varYEps <- varCompwAFROC["VarErr","Estimates"]
ret <- SsPowerGivenJKDbmVarComp (J = J, K = K, effectSize = effectSizewAFROC,
varYTR, varYTC, varYEps, analysisOption = "RRRC")
powerwAFROC <- ret$powerRRRC
varCompwAFROC
devtools::build_vignettes()
pkgdown::build_site()
?Rjafroc
library(RJafroc)
?`RJafroc-package`
DBM <- StSignificanceTesting(dataset02, FOM = "Wilcoxon", method = "DBMH")
str(DBM)
OR <- StSignificanceTesting(dataset02, FOM = "Wilcoxon", method = "ORH")
SP <- StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
str(datasetCrossedModality)
str(dataset01)
rm(list = ls())
library(RJafroc)
load("~/GitHub/RJafroc/data/dataset01.RData")
dataset01$design <- "FACTORIAL"
save("dataset01", file = "~/GitHub/RJafroc/data/dataset01.RData")
load("~/GitHub/RJafroc/data/dataset01.RData")
eval(parse(text="dataset01"))
x <- parse(text="dataset01")
str(x)
x <- eval(parse(text="dataset01"))
dataStr <- c("dataset01", "dataset02", "dataset03", "dataset04", "dataset05", "dataset06",
"dataset07", "dataset08", "dataset09", "dataset10", "dataset11", "dataset12",
"dataset13", "dataset14",
"datasetBinned123", "datasetBinned124", "datasetBinned125",
"datasetCadLroc", "datasetCadSimuFroc", "datasetCrossedModality",
"datasetDegenerate", "datasetFROCSp", "datasetROI")
debugSource('~/GitHub/RJafroc/inst/FixDatasets/ConvertDataset.R')
str(x)
deparse(x)
str(deparse(x))
debugSource('~/GitHub/RJafroc/inst/FixDatasets/ConvertAllDatasets.R')
fn
debugSource('~/GitHub/RJafroc/inst/FixDatasets/ConvertAllDatasets.R')
fn
dataStr[i]
library(RJafroc)
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
length(x)
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
dim(x$NL)
length(dim(x$NL))
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
x$design
is.null(x$design)
if (is.null(x$design)) x$design <- "CROSSED-MODALITY"
str(x)
str(dataset01)
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
I <- length(x$modalityID)
J <- length(x$readerID)
K <- length(x$NL[1,1,1,,1])
K2 <- length(x$LL[1,1,1,,1])
K1 <- K - K2
seq(1:K1)
seq((1+K1):(K1+K2))
seq(1, K1)
seq(1+K1, K1+K2)
I1 <- length(x$NL[,1,1,1,1])
I2 <- length(x$NL[1,,1,1,1])
J <- length(x$NL[1,1,,1,1])
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
x$design %in% c("CROSSED-MODALITY", "FACTORIAL", "SPLIT-PLOT")
!(x$design %in% c("CROSSED-MODALITY", "FACTORIAL", "SPLIT-PLOT"))
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
writeFile
