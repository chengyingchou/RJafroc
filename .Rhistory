install.packages("interp")
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
interp::in(lroc$FPF, lroc$PCL, x0 = 0.1)
interp::interp(lroc$FPF, lroc$PCL, x0 = 0.1)
interp::interp(lroc$FPF, lroc$PCL, xo = 0.1)
interp::interp(lroc$FPF, lroc$PCL, xO = 0.1)
interp::interp(lroc$FPF, lroc$PCL, xO = 0.1, output = "points")
interp::interp(x = lroc$FPF, y = lroc$PCL, xO = 0.1, output = "points")
interp::interp(x = lroc$FPF, y = lroc$PCL, xo = 0.1, output = "points")
install.packages("akima")
akima::interp(x = lroc$FPF, y = lroc$PCL, xo = 0.1, output = "points")
library(akima)
detach("package:base", unload = TRUE)
remove.packages("akima")
library(base)
approx(lroc$FPF, lroc$PCL, xout = FPFValue, ties = max)
approx(lroc$FPF, lroc$PCL, xout = 0.1, ties = max)
approx(lroc$FPF, lroc$PCL, xout = 0.05, ties = max)
interp1(lroc$FPF, lroc$PCL, xout = 0.1)
interp1(lroc$FPF, lroc$PCL, xi = 0.1)
interp1(lroc$FPF, lroc$PCL, xi = 0.0.05)
interp1(lroc$FPF, lroc$PCL, xi = 0.05)
interp1(lroc$FPF, lroc$PCL, xi = 0.05, method = "constant")
interp1(lroc$FPF, lroc$PCL, xi = 0.1, method = "constant")
lroc
interp1(lroc$FPF, lroc$PCL, xi = 0.1, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.2, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.4, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 1, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.8, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.6, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.4, method = "nearest")
approx(lroc$FPF, lroc$PCL, xout = FPFValue, ties = max)
approx(lroc$FPF, lroc$PCL, xout = 0.05, ties = max)
lroc$FPF
lroc$FPF > FPFValue
lroc$FPF[lroc$FPF > FPFValue]
lroc$FPF[lroc$FPF > FPFValue][1]
lroc$FPF[lroc$FPF < FPFValue]
interp1(lroc$FPF, lroc$PCL, xi = 0.1, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.05, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.01, method = "nearest")
interp1(lroc$FPF, lroc$PCL, xi = 0.01, method = "constant")
interp1(lroc$FPF, lroc$PCL, xi = 0.01, method = "linear")
interp1(lroc$FPF, lroc$PCL, xi = 0.01, method = "spline")
interp1(lroc$FPF, lroc$PCL, xi = 0.05, method = "spline")
interp1(lroc$FPF, lroc$PCL, xi = 0.2, method = "spline")
lroc$FPF[lroc$FPF >= FPFValue][1]
FPFValue
library(akima)
install.packages("akima")
library(RJafroc)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
lroc$FPF
library(RJafroc)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
tempFpf
tempPcl
tempPcl <-c(lroc$PCL[lroc$PCL < PCL],PCL)
tempPcl
tempFpf
tempPcl <-c(lroc$PCL[lroc$FPF < FPFValue],PCL)
tempPcl
lroc$FPF[lroc$FPF < FPFValue]
lroc$PCL[lroc$FPF < FPFValue]
FPFValue
lroc$PCL[lroc$FPF < FPFValue]
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
tempFpf
tempPcl
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
library(RJafroc)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
tempFpf
tempPcl
library(RJafroc)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
lowerX
upperX
lroc$FPF > x
lroc$FPF
library(RJafroc)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
tempFpf
tempPcl
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 1)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.5)
library(RJafroc)
set.seed(1)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 1
lesionVector <- rep(1, 5)
nu <- 0.8
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.5)
zk1
zk2Cl
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.5)
FPF
PCL
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 1)
set.seed(2)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 2
lesionVector <- rep(1, 5)
nu <- 0.5
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
zk1
zk2Cl
FPF
PCL
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.6)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 1)
library(RJafroc)
set.seed(2)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 2
lesionVector <- rep(1, 5)
nu <- 0.5
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
zk1
zk2Cl
library(RJafroc)
library(testthat)
set.seed(1)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 1
lesionVector <- rep(1, 5)
nu <- 0.8
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
set.seed(1)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 1
lesionVector <- rep(1, 5)
nu <- 0.8
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
lrocData$NL[1,1,,1]
ret
ret[1,1]
as.vector(ret
)
expect_equal(aas.vector(ret), c(0.8, 1.0, 0.4, 0.8, 0.4, 0.8, 0.6, 0.6, 0.8, 0.4))
expect_equal(as.vector(ret), c(0.8, 1.0, 0.4, 0.8, 0.4, 0.8, 0.6, 0.6, 0.8, 0.4))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 0.05)
as.vector(ret)
expect_equal(as.vector(ret), c(0.04, 0.05, 0.02, 0.04, 0.02, 0.04, 0.03, 0.03, 0.04, 0.02))
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
as.vector(ret)
expect_equal(as.vector(ret), c(0.8, 1.0, 0.4, 0.8, 0.4, 0.8, 0.6, 0.6, 0.8, 0.4))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 0.2)
as.vector(ret)
set.seed(2)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 2
lesionVector <- rep(1, 5)
nu <- 0.5
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
lrocData$NL
lrocData$NL[1,1,,1]
lrocData$LL[1,1,,1]
lrocData$LLCl[1,1,,1]
set.seed(2)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 2
lesionVector <- rep(1, 5)
nu <- 0.5
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.05)
as.vector(ret)
expect_equal(as.vector(ret), c(0.2, 0.4, 0.6, 0.6, 0.2, 0.2, 0.2, 0.4, 0.6, 0.2))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 0.05)
as.vector(ret)
expect_equal(as.vector(ret), c(0.01, 0.02, 0.03, 0.03, 0.01, 0.01, 0.01, 0.02, 0.03, 0.01))
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.1)
as.vector(ret)
expect_equal(as.vector(ret), c(0.2, 0.4, 0.6, 0.6, 0.2, 0.2, 0.2, 0.4, 0.6, 0.2))
expect_equal(as.vector(ret), c(0.2, 0.4, 0.6, 0.6, 0.2, 0.2, 0.2, 0.4, 0.6, 0.1))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 0.1)
as.vector(ret)
expect_equal(as.vector(ret), c(0.02, 0.04, 0.06, 0.06, 0.02, 0.02, 0.02, 0.04, 0.06, 0.02))
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.2)
as.vector(ret)
expect_equal(as.vector(ret), c(0.2, 0.4, 0.6, 0.6, 0.2, 0.2, 0.2, 0.4, 0.6, 0.2))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 0.2)
as.vector(ret)
expect_equal(as.vector(ret), c(0.04, 0.08, 0.12, 0.12, 0.04, 0.04, 0.04, 0.08, 0.12, 0.04))
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.6)
as.vector(ret)
expect_equal(as.vector(ret), c(0.6, 1.0, 1.0, 0.8, 0.4, 0.2, 0.2, 0.6, 0.6, 0.2))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 0.6)
as.vector(ret)
expect_equal(as.vector(ret), c(0.20, 0.48, 0.52, 0.44, 0.20, 0.12, 0.12, 0.32, 0.36, 0.12))
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 0.6)
as.vector(ret)
expect_equal(as.vector(ret), c(0.6, 1.0, 1.0, 0.8, 0.4, 0.2, 0.2, 0.6, 0.6, 0.2))
ret <- UtilFigureOfMerit(lrocData, FOM = "PCL", FPFValue = 1)
as.vector(ret)
expect_equal(as.vector(ret), c(0.6, 1.0, 1.0, 0.8, 0.6, 0.2, 0.2, 0.6, 0.6, 0.2))
ret <- UtilFigureOfMerit(lrocData, FOM = "ALROC", FPFValue = 1)
as.vector(ret)
expect_equal(as.vector(ret), c(0.44, 0.88, 0.92, 0.76, 0.44, 0.20, 0.20, 0.56, 0.60, 0.20))
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
x <- pmax(LLCl[i,,],LLIl[i,,])
View(datasetRoc)
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
datasetRoc$NL
datasetRoc$NL[1,1,,1]
datasetRoc$LL[1,1,,1]
dataset$LLIl[1,1,,1]
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
LL[1,1,,1]
library(RJafroc)
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
pmax(LLCl[i,j,],LLIl[i,j,])
LLCl[i,j,]
LLIl[i,j,]
library(RJafroc)
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
pmax(LLCl[i,j,],LLIl[i,j,])
LLCl[i,j,]
LLIl[i,j,]
set.seed(2)
K1 <- 5
K2 <- 5
mu <- 2
lambda <- 2
lesionVector <- rep(1, 5)
nu <- 0.5
zeta1 <- -3
frocData <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 2, J = 5, K1, K2, lesionVector)
lrocData <- DfFroc2Lroc(frocData)
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
pmax(LLCl[i,j,],LLIl[i,j,])
ret <- UtilFigureOfMerit(lrocData, FOM = "Wilcoxon")
ret
as.vector(ret)
expect_equal(as.vector(ret), c(0.64, 0.88, 0.92, 0.84, 0.62, 0.60, 0.56, 0.84, 0.76, 0.70))
rocData <- DfLroc2Roc(lrocData)
PlotEmpiricalOperatingCharacteristics(rocData)
fp
tp
ret1$fpf
FPF
TPF
devtools::test()
library(RJafroc)
help("RJafroc-package")
library(RJafroc)
detach("package:base", unload = TRUE)
library(base)
rm(akima)
remove.packages("akima")
library(pracma)
remove.packages("pracma")
detach("package:datasets", unload = TRUE)
rm(list = ls())
library(ggplot2)
library(RJafroc)
# included datasets
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
retFit <- FitRsmRoc(dataset02, trt = seq(1, 5), rdr = seq(1, 4), lesDistr)
seq(1, 5)
x <- dataset02$NL
# included datasets
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, trt = seq(1, 2), rdr = seq(1, 5), lesDistr)
library(RJafroc)
retFit <- FitRsmRoc(dataset02, trt = seq(1, 2), rdr = seq(1, 5), lesDistr)
library(RJafroc)
retFit <- FitRsmRoc(dataset02, trt = seq(1, 2), rdr = seq(1, 5), lesDistr)
lambdaPIni
fpf
fpf[length(fpf)]
retFit <- FitRsmRoc(dataset02, trt = seq(1, 2), rdr = seq(1, 5), lesDistr)
bins
fpCounts
tpCounts
# included datasets
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- array(dim = c(2,5))
for (i in 1:2) {
for (j in 1:5)  {
retFit <- FitRsmRoc(dataset02, trt = i, rdr = j, lesDistr)
}
debugSource('~/GitHub/RJafroc/inst/FrocSspower/mainwAFROCPowerDBMH1.R')
FitRsmRoc(dataset02, trt = i, rdr = j, lesDistr)[[1:3]]
x <- FitRsmRoc(dataset02, trt = i, rdr = j, lesDistr)
x[[1]]
x[[2]]
x[[3]]
x[[1:3]]
x[[c(1,2,3)]]
debugSource('~/GitHub/RJafroc/inst/FrocSspower/mainwAFROCPowerDBMH1.R')
retFit
retFit[1,2,]
retFit[1,1,]
library(RJafroc)
x <- dataset02
UtilLesionDistribution(dataset02)
UtilLesionDistribution(datasetCadLroc)
UtilLesionDistribution(datasetCadSimuFroc)
nLesDistr <- UtilLesionDistribution(dataset)
nLesDistr <- UtilLesionDistribution(dataset02)
lesWghts <- dataset$lesionWeight
lesWghts <- dataset02$lesionWeight
UtilLesionDistribution(dataset02)
UtilLesionWeights(dataset02)
nLesDistr <- UtilLesionDistribution(dataset)
nLesDistr <- UtilLesionDistribution(dataset02)
UtilLesionWeights(nLesDistr)
lesWghts <- UtilLesionWeights(nLesDistr)
UtilLesionWeights (UtilLesionDistribution(dataset02))
aucRocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = nLesDistr, lesWghtDistr = lesWghts, type = "ROC")$aucROC
library(RJafroc)
dataset <- dataset04
I <- dim(dataset$NL)[1]
J <- dim(dataset$NL)[2]
rm(list = ls())
library(ggplot2)
library(RJafroc)
dataset <- dataset04
I <- dim(dataset$NL)[1]
J <- dim(dataset$NL)[2]
lesDistr <- UtilLesionDistribution(dataset)
RsmParms <- array(dim = c(I,J,3))
for (i in 1:I) {
for (j in 1:J)  {
x1 <- FitRsmRoc(dataset, trt = i, rdr = j, lesDistr)
RsmParms[i,j,1] <- x1[[1]]
RsmParms[i,j,2] <- x1[[2]]
RsmParms[i,j,3] <- x1[[3]]
}
debugSource('~/GitHub/RJafroc/inst/FrocSspower/mainwAFROCPowerDBMH1.R')
dataset$NL[1,1,1:10,]
dataset$LL[1,1,1:10,]
max(dataset$LL[1,1,1:10,])
max(dataset$LL)
library(RJafroc)
debugSource('~/GitHub/RJafroc/inst/FrocSspower/mainwAFROCPowerDBMH.R')
lesDistr
lesWghtDistr
UtilLesionWeights(dataset04)
UtilLesionDistribution(dataset04)
UtilLesionWeights(UtilLesionDistribution(dataset04))
lesWghtDistr
library(RJafroc)
UtilLesionWeightsDistr (dataset01)
UtilLesionWeightsDistr (dataset02)
UtilLesionWeightsDistr (datasetCadLroc)
UtilLesionWeightsDistr (dataset04)
debugSource('~/GitHub/RJafroc/inst/FrocSspower/mainwAFROCPowerDBMH.R')
lesWghtDistr
lesDistr
UtilLesionDistribution(dataset04)
source('~/GitHub/RJafroc/inst/FrocSspower/mainwAFROCPowerDBMH.R')
library(RJafroc)
debugSource('~/GitHub/RJafroc/inst/FrocSsPower/mainwAFROCPowerDBMH.R')
cat("JTest = ", JTest, "KTest = ", KTest, "\n")
powerROC <- array(dim = length(effectSizeROC));powerwAFROC <- array(dim = length(effectSizeROC))
for (i in 1:length(effectSizeROC)) {
varYTR <- varCompROC$varTR
varYTC <- varCompROC$varTC
varYEps <- varCompROC$varErr
ret <- SsPowerGivenJKDbmVarComp (J = JTest, K = KTest, effectSize = effectSizeROC[i], varYTR, varYTC, varYEps, alpha  = 0.05, option = "RRRC")
powerROC[i] <- ret$powerRRRC
varYTR <- varCompwAFROC$varTR
varYTC <- varCompwAFROC$varTC
varYEps <- varCompwAFROC$varErr
ret <- SsPowerGivenJKDbmVarComp (J = JTest, K = KTest, effectSize = effectSizewAFROC[i], varYTR, varYTC, varYEps, alpha  = 0.05, option = "RRRC")
powerwAFROC[i] <- ret$powerRRRC
cat("ROC effect size = ", effectSizeROC[i], ", wAFROC effect size = ", effectSizewAFROC[i],
", Statistical power ROC, wAFROC: ", powerROC[i], ", ", powerwAFROC[i], "\n")
}
debugSource('~/GitHub/RJafroc/inst/FrocSsPower/mainwAFROCPowerDBMH.R')
source('~/GitHub/RJafroc/inst/FrocSsPower/mainwAFROCPowerDBMH1.R')
365*24*0.001
debugSource('~/GitHub/RJafroc/inst/FrocSsPower/mainwAFROCPowerDBMH1.R')
temp1$ciDiffTrtRRRC$TrtDiff
temp1$ciDiffTrtRRRC$Estimate
temp2$ciDiffTrtRRRC$Estimate
a
a$coefficients
library(RJafroc)
UtilLesionWeightsDistr (dataset01)
c(c(1, -Inf), c(0.5, 0.5))
c([c(1, -Inf)], [c(0.5, 0.5)])
c((c(1, -Inf), c(0.5, 0.5)))
c(c(1, -Inf), c(0.5, 0.5))
dim(c(c(1, -Inf), c(0.5, 0.5))) = c(2,2)
dim(c(1, -Inf), c(0.5, 0.5)) = c(2,2)
array(c(c(1, -Inf), c(0.5, 0.5)), dim = c(2,2))
array(c(c(1, 0.5), c(-Inf, 0.5)), dim = c(2,2))
ret <- array(c(c(1, 0.5), c(-Inf, 0.5)), dim = c(2,2))
expect_equal(UtilLesionWeightsDistr (dataset01), ret)
library(testthat)
ret <- array(c(c(1, 0.5), c(-Inf, 0.5)), dim = c(2,2))
expect_equal(UtilLesionWeightsDistr (dataset01), ret)
UtilLesionDistribution (dataset01)
ret <- array(c(c(1, 2), c(0.93258427, 0.06741573)), dim = c(2,2))
expect_equal(UtilLesionDistribution (dataset01), ret)
UtilLesionWeightsDistr (dataset05)
ret <- array(c(c(1, 0.5, 0.333333), c(-Inf, 0.5, 0.333333), , c(-Inf, -Inf, 0.333333)), dim = c(3,3))
array(c(c(1, 0.5, 0.333333), c(-Inf, 0.5, 0.333333), c(-Inf, -Inf, 0.333333)), dim = c(3,3))
ret <- array(c(c(1, 0.5, 0.333333), c(-Inf, 0.5, 0.333333), c(-Inf, -Inf, 0.333333)), dim = c(3,3))
expect_equal(UtilLesionWeightsDistr (dataset05), ret)
help("testthat)
help("testthat")
ret <- array(c(c(1, 0.5, 0.333333), c(-Inf, 0.5, 0.333333), c(-Inf, -Inf, 0.333333)), dim = c(3,3))
expect_equal(UtilLesionWeightsDistr (dataset05), ret, toleerance = 1e-6)
ret <- array(c(c(1, 0.5, 0.333333), c(-Inf, 0.5, 0.333333), c(-Inf, -Inf, 0.333333)), dim = c(3,3))
expect_equal(UtilLesionWeightsDistr (dataset05), ret, tolerance = 1e-6)
ret <- array(c(c(1, 0.5, 0.333333), c(-Inf, 0.5, 0.333333), c(-Inf, -Inf, 0.333333)), dim = c(3,3))
expect_equal(UtilLesionWeightsDistr (dataset05), ret, tolerance = 1e-6)
UtilLesionDistribution (dataset05)
c(c(1, 2, 3), c(0.78723404, 0.17021277, 0.04255319)), dim = c(3,2))
array(c(c(1, 2, 3), c(0.78723404, 0.17021277, 0.04255319)), dim = c(3,2))
ret <- array(c(c(1, 2, 3), c(0.78723404, 0.17021277, 0.04255319)), dim = c(3,2))
expect_equal(UtilLesionDistribution (dataset05), ret)
UtilLesionWeightsDistr (dataset02)
array(1, dim = c(1,1))
ret <- array(1, dim = c(1,1))
expect_equal(UtilLesionWeightsDistr (dataset02), ret)
UtilLesionDistribution (dataset02)
array(c(1, 1), dim = c(1,2))
ret <- array(c(1, 1), dim = c(1,2))
expect_equal(UtilLesionDistribution (dataset02), ret)
a <- 9
expect_that(a, is_less_than(10))
expect_lt(a, 10)
UtilLesionDistribution (datasetCadLroc)
ret <- array(c(1, 1), dim = c(1,2))
expect_equal(UtilLesionDistribution (datasetCadLroc), ret)
UtilLesionDistribution (datasetROI)
array(c(c(1, 2, 3, 4), c(0.125, 0.375, 0.4, 0.1)), dim = c(4,2))
ret <- array(c(c(1, 2, 3, 4), c(0.125, 0.375, 0.4, 0.1)), dim = c(4,2))
expect_equal(UtilLesionDistribution (datasetROI), ret)
help("RJafroc-package")
library(RJafroc)
str(datasetROI)
datasetROI$lesionVector
datasetROI$lesionID[1,]
datasetROI$lesionID[2,]
datasetROI$lesionID[5,]
datasetROI$lesionID[4,]
datasetROI$lesionWeight[1,]
datasetROI$lesionWeight[2,]
datasetROI$lesionWeight[4,]
datasetROI$lesionWeight[5,]
ret <- StSignificanceTesting(datasetROI, FOM = "Wilcoxon")
method
fomArray
ret <- StSignificanceTesting(datasetROI, FOM = "Wilcoxon")
FOM
ret <- StSignificanceTesting(datasetROI, FOM = "Wilcoxon")
FOM
library(RJafroc)
ret <- StSignificanceTesting(datasetROI, FOM = "Wilcoxon")
FOM
maxLL
library(RJafroc)
ret <- StSignificanceTesting(datasetROI, FOM = "Wilcoxon")
ret$FTestStatsFRRC$ddfFRRC
ret$FTestStatsFRRC$pFRRC
library(RJafroc)
