)
expect_equal(goodValuesBoth, currentValuesBoth, tolerance = 0.002, scale = x)
rm(currentValuesDBM)
rm(currentValuesOR)
expect_equivaalent(goodValuesBoth, currentValuesBoth, tolerance = 0.002, scale = x)
expect_equivalent(goodValuesBoth, currentValuesBoth, tolerance = 0.002, scale = x)
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fn <- paste0(test_path(), "/goodValues361/SigTest/", "FrocData", "HrAuc", "DBM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
goodValues <- StSignificanceTesting(ds, FOM = "HrAuc")
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
varCompDBM <- list(
varR = 0.00182911,
varC = 0.04347403,
varTR = -0.0002401,
varTC = -0.0002401,
varRC = 0.02403484,
varErr = 0.09253638
)
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
varCompOR <- list(
varR = 0.00182911,
varTR = -0.000240099,
Cov1 = 0.000337545,
Cov2 = 0.000221216,
Cov3 = 0.000217371,
varErr = 0.000804072
)
varCompBoth <- list(
varCompDBM = varCompDBM,
varCompOR = varCompOR
)
saveRDS(varCompBoth, file = fn)
}
goodValuesBoth <- readRDS(fn)
ret <- StSignificanceTesting(ds, FOM = "HrAuc")
currentValuesDBM <- ret$varCompDBM
currentValuesOR <- ret$varCompOR
currentValuesBoth <- list(
varCompDBM = currentValuesDBM,
varCompOR = currentValuesOR
)
expect_equivalent(goodValuesBoth, currentValuesBoth, tolerance = 0.002, scale = x)
names(currentValuesDBM)
names(goodValuesDBM)
names(goodValuesBoth)
names(goodValuesBoth$varCompDBM)
names(goodValuesBoth$varCompOR)
names(currentValuesBoth)
names(currentValuesBoth$varCompDBM)
names(currentValuesBoth$varCompOR)
expect_equivalent(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = x)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = x)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = x, check.attributes = FALSE)
expect_equivalent(goodValuesBoth$varCompOR, currentValuesBoth$varCompOR, tolerance = 0.002, scale = x)
FrocDataHrAucDBM <- readRDS("~/GitHub/RJafroc/tests/testthat/goodValues361/SigTest/FrocDataHrAucDBM.rds")
rm(FrocDataHrAucDBM )
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fn <- paste0(test_path(), "/goodValues361/SigTest/", "FrocData", "HrAuc", "DBM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
varCompDBM <- list(
varR = 0.00182911,
varC = 0.04347403,
varTR = -0.0002401,
varTC = -0.0002401,
varRC = 0.02403484,
varErr = 0.09253638
)
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
varCompOR <- list(
varR = 0.00182911,
varTR = -0.000240099,
Cov1 = 0.000337545,
Cov2 = 0.000221216,
Cov3 = 0.000217371,
varErr = 0.000804072
)
varCompBoth <- list(
varCompDBM = varCompDBM,
varCompOR = varCompOR
)
saveRDS(varCompBoth, file = fn)
}
goodValuesBoth <- readRDS(fn)
ret <- StSignificanceTesting(ds, FOM = "HrAuc")
currentValuesDBM <- as.list(ret$varCompDBM)
currentValuesOR <- as.list(ret$varCompOR)
currentValuesBoth <- list(
varCompDBM = currentValuesDBM,
varCompOR = currentValuesOR
)
rm(currentValuesDBM)
rm(currentValuesOR)
expect_equivalent(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = currentValuesDBM)
library(RJafroc)
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fn <- paste0(test_path(), "/goodValues361/SigTest/", "FrocData", "HrAuc", "DBM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
varCompDBM <- list(
varR = 0.00182911,
varC = 0.04347403,
varTR = -0.0002401,
varTC = -0.0002401,
varRC = 0.02403484,
varErr = 0.09253638
)
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
varCompOR <- list(
varR = 0.00182911,
varTR = -0.000240099,
Cov1 = 0.000337545,
Cov2 = 0.000221216,
Cov3 = 0.000217371,
varErr = 0.000804072
)
varCompBoth <- list(
varCompDBM = varCompDBM,
varCompOR = varCompOR
)
saveRDS(varCompBoth, file = fn)
}
goodValuesBoth <- readRDS(fn)
ret <- StSignificanceTesting(ds, FOM = "HrAuc")
currentValuesDBM <- as.list(ret$varCompDBM)
currentValuesOR <- as.list(ret$varCompOR)
currentValuesBoth <- list(
varCompDBM = currentValuesDBM,
varCompOR = currentValuesOR
)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = goodValuesBoth$varCompDBM)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = goodValuesBoth$varCompDBM$varErr)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = 1)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.0002, scale = 1)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.0002, scale = 0.000804)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.002, scale = 0.000804)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.000804)
expect_equivalent(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.000804)
expect_equivalent(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.0804)
expect_equivalent(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.00804)
expect_equivalent(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.0804)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.0804)
expect_equal(goodValuesBoth$varCompDBM, currentValuesBoth$varCompDBM, tolerance = 0.02, scale = 0.00804)
goodValuesBoth$varCompDBM$varTC
(goodValuesBoth$varCompDBM$varTC-currentValuesBoth$varCompDBM$varTC)
abs((goodValuesBoth$varCompDBM$varTC-currentValuesBoth$varCompDBM$varTC)/currentValuesBoth$varCompDBM$varTC)
goodValuesBoth$varCompDBM$varTC
currentValuesBoth$varCompDBM$varTC
library(RJafroc)
ret$varCompDBM$varTC
ret$varCompDBM
goodValuesBoth$varCompDBM$varTC
currentValuesBoth$varCompDBM$varTC
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fn <- paste0(test_path(), "/goodValues361/SigTest/JAFROC/", "FrocData", "HrAuc", "DBM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
# these values were obtained from JAFROC output file: includedFrocData_Inferred_ROC.txt
# in inst/VarCompDiscrepance/
varCompDBM <- list(
varR = 0.00182911,
varC = 0.04347403,
varTR = -0.0002401,
varTC = 0.00076895,
varRC = 0.02403484,
varErr = 0.09253638
)
# do:
varCompOR <- list(
varR = 0.00182911,
varTR = -0.000240099,
Cov1 = 0.000337545,
Cov2 = 0.000221216,
Cov3 = 0.000217371,
varErr = 0.000804072
)
varCompBoth <- list(
varCompDBM = varCompDBM,
varCompOR = varCompOR
)
saveRDS(varCompBoth, file = fn)
}
goodValuesBoth <- readRDS(fn)
ret <- StSignificanceTesting(ds, FOM = "HrAuc")
currentValuesDBM <- as.list(ret$varCompDBM)
currentValuesOR <- as.list(ret$varCompOR)
currentValuesBoth <- list(
varCompDBM = currentValuesDBM,
varCompOR = currentValuesOR
)
x <- ret$varCompDBM$varTC
expect_equal(goodValuesBoth, currentValuesBoth, tolerance = 0.0006, scale = x)
length(goodValuesBoth)
length(goodValuesBoth[[1]])
length(goodValuesBoth[[2]])
length(goodValuesBoth[[2]])[1]
length(goodValuesBoth[[2]])$varR
goodValuesBoth[[2]]$varR
goodValuesBoth[[2]][1]
goodValuesBoth[[2]][2]
length(goodValuesBoth)
length(length(goodValuesBoth[[i1]][i2]))
length(length(goodValuesBoth[[1]][2]))
length(goodValuesBoth[[2]])[1]
i1 <- 1;i2 <- 3;length(goodValuesBoth[[i1]])[i2]
i1 <- 1;i2 <- 3;length(goodValuesBoth[[i1]][i2])
i1 <- 1;i2 <- 1;length(goodValuesBoth[[i1]][i2])
i1 <- 1;i2 <- 1;goodValuesBoth[[i1]][i2]
i1 <- 1;i2 <- 1;goodValuesBoth[[i1]][1]
goodValuesBoth[[i1]][2]
length(goodValuesBoth[[2]])
length(goodValuesBoth[[1]])
length(goodValuesBoth[[3]])
length(goodValuesBoth[1])
length(goodValuesBoth[2])
length(goodValuesBoth[3])
goodValuesBoth[3]
goodValuesBoth[1]
lenngth(goodValuesBoth[1])
length(goodValuesBoth[1])
length(goodValuesBoth)
length(goodValuesBoth[1])
length(goodValuesBoth[[1]])
length(goodValuesBoth[[2]])
length(goodValuesBoth[[6]])
length(goodValuesBoth[[3]])
length(goodValuesBoth[[2]])
as.numeric(goodValuesBoth[[i1]][i2])
as.numeric(goodValuesBoth[[i1]][2])
as.numeric(goodValuesBoth[[i1]][3])
as.numeric(goodValuesBoth[[i1]][4])
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fn <- paste0(test_path(), "/goodValues361/SigTest/JAFROC/", "FrocData", "HrAuc", "DBM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
# these values were obtained from JAFROC output file:
# inst/VarCompDiscrepancy/includedFrocData_Inferred_ROC.txt
varCompDBM <- list(
varR = 0.00182911,
varC = 0.04347403,
varTR = -0.0002401,
varTC = 0.00076895,
varRC = 0.02403484,
varErr = 0.09253638
)
# do:
varCompOR <- list(
varR = 0.00182911,
varTR = -0.000240099,
Cov1 = 0.000337545,
Cov2 = 0.000221216,
Cov3 = 0.000217371,
varErr = 0.000804072
)
varCompBoth <- list(
varCompDBM = varCompDBM,
varCompOR = varCompOR
)
saveRDS(varCompBoth, file = fn)
}
goodValuesBoth <- readRDS(fn)
# following tests the DBM branch of StSignificanceTesting
ret <- StSignificanceTesting(ds, FOM = "HrAuc")
currentValuesDBM <- as.list(ret$varCompDBM)
currentValuesOR <- as.list(ret$varCompOR)
currentValuesBoth <- list(
varCompDBM = currentValuesDBM,
varCompOR = currentValuesOR
)
for (i1 in 1: length(goodValuesBoth)){
for (i2 in 1: length(length(goodValuesBoth[[i1]]))){
x <- as.numeric(goodValuesBoth[[i1]][i2])
y <- as.numeric(currentValuesBoth[[i1]][i2])
expect_equal(x, y, tolerance = 0.00001, scale = x)
}
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fn <- paste0(test_path(), "/goodValues361/SigTest/JAFROC/", "FrocData", "HrAuc", "DBM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
# these values were obtained from JAFROC output file:
# inst/VarCompDiscrepancy/includedFrocData_Inferred_ROC.txt
varCompDBM <- list(
varR = 0.00182911,
varC = 0.04347403,
varTR = -0.0002401,
varTC = 0.00076895,
varRC = 0.02403484,
varErr = 0.09253638
)
# do:
varCompOR <- list(
varR = 0.00182911,
varTR = -0.000240099,
Cov1 = 0.000337545,
Cov2 = 0.000221216,
Cov3 = 0.000217371,
varErr = 0.000804072
)
varCompBoth <- list(
varCompDBM = varCompDBM,
varCompOR = varCompOR
)
saveRDS(varCompBoth, file = fn)
}
goodValuesBoth <- readRDS(fn)
# following tests the DBM branch of StSignificanceTesting
ret <- StSignificanceTesting(ds, FOM = "HrAuc")
currentValuesDBM <- as.list(ret$varCompDBM)
currentValuesOR <- as.list(ret$varCompOR)
currentValuesBoth <- list(
varCompDBM = currentValuesDBM,
varCompOR = currentValuesOR
)
for (i1 in 1: length(goodValuesBoth)){
for (i2 in 1: length(goodValuesBoth[[i1]])){
x <- as.numeric(goodValuesBoth[[i1]][i2])
y <- as.numeric(currentValuesBoth[[i1]][i2])
expect_equal(x, y, tolerance = 0.00001, scale = x)
}
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
varCovArray
varR
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
covEstMethod
nBoots
var
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
msTR
msT
varTR
msTR
varCompOR <- ret1$varCompOR
cov1 <- varCompOR$Cov1
cov2 <- varCompOR$Cov2
cov3 <- varCompOR$Cov3
varCompOR
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
var
varCompOR
str(varCompOR)
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
varCompDBM
varCompOR
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
fomSingle
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
rm(list = ls())
fileName <- system.file("extdata", "FrocData.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
fomSingle
varEachTrt
varCompBoth$varCompOR
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
varCompOR
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
rm(fileName)
resORH <- ORHAnalysis(ds, FOM = "HrAuc", method = "ORH")
resORH <- ORHAnalysis(ds)
lesionNum
library(RJafroc)
resORH <- ORHAnalysis(ds)
fomArray <- UtilFigureOfMerit(dataset, fom)
library(RJafroc)
resORH <- ORHAnalysis(ds)
library(RJafroc)
resORH <- ORHAnalysis(ds)
library(RJafroc)
resORH <- ORHAnalysis(ds)
library(RJafroc)
resORH <- ORHAnalysis(ds)
MyFOM(nl, ll, lesionNum, lesionID, lesionWeight, maxNL, fom)
resORH <- ORHAnalysis(ds)
ret
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
varCompOR
retMS
resORH <- ORHAnalysis(ds)
FOM
resORH <- ORHAnalysis(ds, fom = "HrAuc")
fomArray
fomArray1 <- MyFOM(dataset, fom)
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
fom
str(nl)
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
fomArray1
MyFOM(nl, ll, lesionVector, lesionID, lesionWeight, maxNL, fom)
fomArray1
fomArray
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
ret
resORH <- ORHAnalysis(ds, fom = "HrAuc")
ret
resORH <- ORHAnalysis(ds, fom = "HrAuc")
varComp
cov2Single
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
varComp
varSingle
cov2Single
ret
resORH <- ORHAnalysis(ds, fom = "HrAuc")
list(var = var, cov1 = cov1, cov2 = cov2, cov3 = cov3)
cov1
cov2
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
ret
resORH <- ORHAnalysis(ds, fom = "HrAuc")
cov1
count
cov1/count
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
fomArray
varComp
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
ret
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
ret$var
ret$cov2
varEachTrt
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
ret$cov2
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
source('~/GitHub/RJafroc/inst/VarCompDiscrepancy/FixVarCompDiscrepancy.R')
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
varEachTrt
cov2EachTrt
library(RJafroc)
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
varCompOR
resORH <- StSignificanceTesting(ds, FOM = "HrAuc", method = "ORH")
jkFOMArray[1,1,1:10]
msPseudovalues
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
Cov
resORH <- ORHAnalysis(ds, fom = "HrAuc")
Cov
I
Cov
resORH <- ORHAnalysis(ds, fom = "HrAuc")
Cov
var
list(var = var, cov1 = cov1, cov2 = cov2, cov3 = cov3)
ret
resORH <- ORHAnalysis(ds, fom = "HrAuc")
varSingle
cov1EchRder
cov2Single
resORH <- ORHAnalysis(ds, fom = "HrAuc")
var
cov1
cov2
jkFOMArray[1, 1, 1:10]
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
ResamplingEstimateVarCovs(jkFOMArray)
library(RJafroc)
resORH <- ORHAnalysis(ds, fom = "HrAuc")
cov3 <- Cov$cov3
list(var = var, cov1 = cov1, cov2 = cov2, cov3 = cov3)
ret
