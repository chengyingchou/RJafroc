readerID[j]
NLCaseID[casePresent_ij]
table(NLCaseID[casePresent_ij])
as.numeric(unlist(attr(caseNLTable, "dimnames")))
caseIDs_ij[k1]
caseIDs_ij[k1] == allCases
readerID
CaseID
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
modalityID
NLModalityID
NLReaderID
readerID
modalityID
library(RJafroc)
library(devtools)
devtools::test()
library(testthat)
fn <- paste0(test_path(), "/goodValues361/SigTest/SingleFixedFactor_05_12_4", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1:2, 4), FOM = "wAFROC")
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset05, 1:2, 4), FOM = "wAFROC")
CompareLists(x1,x2)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
truthTable$ModalityID
strsplit(truthTable$ModalityID[1],split = ",")
strsplit(truthTable$ModalityID,split = ",")
unlist(strsplit(truthTable$ModalityID[1],split = ","))
unlist(strsplit(truthTable$ModalityID,split = ","))
x <- unlist(strsplit(truthTable$ModalityID,split = ","))
trimws(x)
x <- trimws(x)
sort(x)
x <- sort(trimws(unlist(strsplit(truthTable$ModalityID,split = ","))))
x
x <- sort(trimws(unlist(strsplit(truthTable$ModalityID,split = ","))))
if (length(x)/I != length(caseIDColumn)) stop("Error in Truth Sheet ModalityID column")
# extend the columns
caseIDExtColumn <- rep(caseIDColumn, I)
caseIDExtColumn[1:10]
caseIDExtColumn[31:40]
truthTable[[1]]
weightsColumn <- as.numeric(truthTable[[3]])
J <- length(unique(truthTable$ReaderID))
modalityIDExtColumn <- sort(trimws(unlist(strsplit(truthTable$ModalityID,split = ","))))
modalityIDExtColumn
modalityIDUnique
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
casePresent_ij
lesionIDUnique <- unique(lesionIDExtColumn)
lesionIDUnique
library(RJafroc)
allCases
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
casePresent_ijt
caseIDExtTable
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
which(caseIDColumns_ijt[k1] == caseIDExtColumn)
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
TruthTableStructure
TruthTableStructure[1,1,,]
TruthTableStructure[1,1,]
TruthTableStructure[1,1,1:10]
TruthTableStructure[1,1,c(1:10),(31:40)]
TruthTableStructure[1,1,c((1:10),(31:40))]
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
caseIDColumns_ijt[k1]
caseIDColumns_ijt
which(caseIDColumns_ijt[k1] == caseIDExtColumn)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
retTruth$lesionID
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
lesionIDColumn
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
length(!is.na(TruthTableStructure))
length(!is.na(TruthTableStructure)) != I*J*K
I*J*K
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
truthTable$ReaderID
length(unlist(strsplit(truthTable$ReaderID[1],split = ",")))
J <- length(unlist(strsplit(truthTable$ReaderID[1],split = ",")))
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
is.character(truthTable$ReaderID[1])
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
is.character(truthTable$ReaderID[1])
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
readerIDColumn[1,]
readerIDColumn[2,]
readerIDColumn[5,]
modalityIDColumn[1,]
modalityIDColumn[2,]
modalityIDUnique
unique(modalityIDColumn[1,])
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
modalityIDUnique
modalityIDColumn
modalityIDColumn[1,]
modalityIDColumn[2,]
TruthTableStructure[1,1,]
readerIDColumn
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
casePresent_ijt
length(!is.na(TruthTableStructure))
I*J*K
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
TruthTableStructure
is.na(TruthTableStructure)
sum(is.na(TruthTableStructure))
sum(!is.na(TruthTableStructure))
I*J*K
sum(!is.na(TruthTableStructure)) != I*J*K
declaredDesign
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
sum(!is.na(TruthTableStructure)) != I*J*K
declaredDesign
declaredDesign == "CROSSED" && sum(!is.na(TruthTableStructure)) != I*J*K
declaredDesign == "CROSSED"
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
sum(!is.na(TruthTableStructure))
I*J*K
(declaredDesign == "SPLIT-PLOT") && (sum(!is.na(TruthTableStructure)) != I*K)
I*K
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
dsNew <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
dsOld <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
testthat::expect_equal(dsNew, dsOld)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
dsNew <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
dsOld <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
testthat::expect_equal(dsNew, dsOld)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
dsNew <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
dsOld <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
testthat::expect_equal(dsNew, dsOld)
library(testthat)
fileName <- system.file(
"extdata", "/toyFiles/ROC/OK.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_OK", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = FALSE), ds)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_SplitPlot", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_SplitPlot", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_SplitPlot", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = FALSE))
library(RJafroc)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = FALSE))
sheetNames
fileName
caseID
lesionID
weights
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_SplitPlot", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = FALSE))
ds2 <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(RJafroc)
??`RJafroc-package`
ds2 <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(testthat)
library(devtools)
devtools::load_all()
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_SplitPlot", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
dsx <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
View(ds2)
dsx <- dsx[[-6]]
dsx <- dsx[-6]
ds <- ds[-6]
expect_equal(dsx, ds)
library(RJafroc)
dsx <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
truthTable2 <- read.xlsx(fileName, truthFileIndex, cols = 4:6)
is.na(truthTable2)
sum(!is.na(truthTable2))
sum(!is.na(truthTable2[[1]]))
sum(!is.na(truthTable[[1]]))
library(RJafroc)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = FALSE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/non-numeric-weight.xlsx", package = "RJafroc", mustWork = TRUE)
expect_warning(expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE)))
fileName <- system.file(
"extdata", "/toyFiles/ROC/non-numeric-weight.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/duplicatedRow.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/incorrectSheetName.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/incorrectSheetName.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = FALSE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/incorrectWeights.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/missing2CellsRow5and7.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE))
fileName <- system.file(
"extdata", "/toyFiles/ROC/OK.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_OK", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
fileName <- system.file(
"extdata", "/toyFiles/ROC/OK.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_OK", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
fileName <- system.file(
"extdata", "/toyFiles/ROC/missingEntireRow5.xlsx", package = "RJafroc", mustWork = TRUE)
expect_error(DfReadDataFile(fileName, newExcelFileFormat = TRUE))
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/SplitPlot.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
splitPlot
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
!newExcelFileFormat
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
dsNew <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
dsOld <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
testthat::expect_equal(dsNew, dsOld)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
dsNew <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
dsOld <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
testthat::expect_equal(dsNew, dsOld)
fileName <- system.file("extdata", "toyFiles/FROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1New <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fileName <- system.file("extdata", "toyFiles/FROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1New <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
declaredParadigm
warnings()
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/FROC/OK-OldFormat.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fileName <- system.file("extdata", "toyFiles/FROC/OK-OldFormat.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/FROC/OK-OldFormat.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
naRows
LLTable
is.na(LLTable)
colSums(is.na(LLTable))
max(naRows)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(RJafroc)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(RJafroc)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fileName <- system.file("extdata", "toyFiles/FROC/OK-OldFormat.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
dsNew <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
dsOld <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/ROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fileName <- system.file("extdata", "toyFiles/FROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fileName <- system.file("extdata", "toyFiles/FROC/OK-OldFormat.xlsx",
package = "RJafroc", mustWork = TRUE)
ds1Old <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
fileName <- system.file("extdata", "toyFiles/FROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/FROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
warnings()
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
lesionIDColumn
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
weightsColumn
warnings
warnings()
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
casePresent_ijt
modalityIDArray[i,]
View(readerIDArray)
ds <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
modalityIDArray[i,] == modalityIDUnique[i]
readerIDArray[j,] == readerIDUnique[j]
lesionIDColumn == lesionIDUnique[t]
library(RJafroc)
fileName <- system.file("extdata", "toyFiles/FROC/OK.xlsx",
package = "RJafroc", mustWork = TRUE)
x <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
abnormalCases
caseID
casePresent_ij
all(weights[casePresent_ij] == 0)
as.numeric(c(weights[casePresent_ij][order(lesionID[casePresent_ij])], rep(UNINITIALIZED, max(lesionVector) - length(casePresent_ij))))
lesionID
lesionID[casePresent_ij]
order(lesionID[casePresent_ij])
weights[casePresent_ij]
weights[casePresent_ij][order(lesionID[casePresent_ij])]
lesionVector
caseID[caseID %in% abnormalCases]
caseID
table(caseID[caseID %in% abnormalCases])
as.vector(table(caseID[caseID %in% abnormalCases]))
max(lesionVector) - length(casePresent_ij)
lesionWeight[k2, lesionWeight[k2, ] != UNINITIALIZED]
casePresent_ij
lesionWeight[k2, ]
casePresent_ij
lesionWeight[k2, ]
maxNL
casePresent_ij
caseLLTable
caseIDs_ij
as.vector(caseLLTable)
caseLLTable
caseLLTable[1]
length(caseIDs_ij)
caseLLTable[k1]
caseIDs_ij
x1
caseIDs_ij[k1]
abnormalCases
LLCaseID
LLCaseID[casePresent_ij]
caseIDs_ij[k1]
x2
lesionIDLabels
which(caseIDs_ij[k1] == abnormalCases)
x1
library(RJafroc)
x <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
lesionIDLabels
lesionIDLabels[1,]
LLLesionID
casePresent_ij
LLLesionID[casePresent_ij]
LLLesionID[casePresent_ij][x2]
LL[i, j, x1, x4] <- LLRating[casePresent_ij][x5][el]
LLLesionID[casePresent_ij][x2][el]
x3
which(LLLesionID[casePresent_ij][x2][el] == x3)
LLCaseID[casePresent_ij] == caseIDs_ij[k1]
which(LLCaseID[casePresent_ij] == caseIDs_ij[k1])
x5
x1
x4
casePresent_ij
x5
LLRating[casePresent_ij]
LLRating[casePresent_ij][x5]
LLRating[casePresent_ij][x5][el]
library(RJafroc)
x <- DfReadDataFile(fileName, newExcelFileFormat = FALSE)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/ROC/OK.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfReadDataFile/ROC_OK", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
saveRDS(temp, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName, newExcelFileFormat = TRUE), ds)
x <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
x <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
rm(ds)
rm(x)
rm(fn)
x <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
x <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
TruthCaseID
LLCaseIDColumn
lesionID
