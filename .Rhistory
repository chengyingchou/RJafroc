tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilMeanSquares(dataset05, method = "ORH"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilMeanSquares(dataset02, method = "ORH"),
tmp, print = TRUE, update = TRUE)
})
source('~/rjafroc-master/tests/testthat/test-mean-squares.R')
source('~/rjafroc-master/tests/testthat/test-significance-testing.R')
ret <- StSignificanceTesting(dataset05, FOM = "MaxNLF")
ret <- StSignificanceTesting(dataset05, FOM = "MaxNLF", method = "ORH")
source('~/rjafroc-master/tests/testthat/test-significance-testing.R')
source('~/rjafroc-master/R/StSignificanceTesting.R')
library(RJafroc)
skip_on_cran()
skip_on_travis()
tmp <- tempfile()
expect_known_output(
StSignificanceTesting(dataset05, FOM = "MaxNLF", covEstMethod = "Bootstrap", method = "ORH"),
tmp, print = TRUE, update = TRUE)
library(RJafroc)
ret <- StSignificanceTesting(dataset05, FOM = "MaxNLF", method = "ORH")
StSignificanceTesting(dataset05, FOM = "MaxLLF", covEstMethod = "Bootstrap", method = "ORH")
StSignificanceTesting(dataset05, FOM = "MaxNLF", covEstMethod = "Bootstrap", method = "ORH")
StSignificanceTesting(dataset05, FOM = "MaxNLF", covEstMethod = "Bootstrap", method = "DBMH")
library(RJafroc)
StSignificanceTesting(dataset05, FOM = "MaxNLF", covEstMethod = "Bootstrap", method = "DBMH")
expect_error(StSignificanceTesting(dataset05, FOM = "MaxNLF", covEstMethod = "Bootstrap", method = "DBMH"))
library(devtools)
library(testthat)
expect_error(StSignificanceTesting(dataset05, FOM = "MaxNLF", covEstMethod = "Bootstrap", method = "DBMH"))
tmp <- tempfile()
expect_known_output(
StSignificanceTesting(dataset05, FOM = "MaxLLF", covEstMethod = "Bootstrap", method = "ORH"),
tmp, print = TRUE, update = TRUE)
devtools::test_coverage()
dataset02, DataFileName = "MyData.txt", DataFileFormat = "JAFROC"))
dataset02, DataFileName = "MyData.txt", DataFileFormat = "JAFROC")
UtilOutputReport(dataset02, DataFileName = "MyData", DataFileFormat = "txt")
UtilOutputReport(dataset02, DataFileName = "MyData.tx1", DataFileFormat = "MRMC")
UtilOutputReport(dataset02, DataFileName = "MyData.txt", DataFileFormat = "MRMC")
UtilOutputReport(dataset02, DataFileName = "MyData.txt", DataFileFormat = "JAFROC")
UtilOutputReport(dataset02, DataFileFormat = "JAFROC")
UtilOutputReport(dataset02, DataFileName = "MyData")
fn <- system.file("extdata", "includedRocData.lrc",
package = "RJafroc", mustWork = TRUE)
UtilOutputReport(DataFileName = fn, overwrite = TRUE)
source('~/rjafroc-master/tests/testthat/test-output-report.R')
UtilOutputReport(dataset03, overwrite = TRUE)
UtilOutputReport(dataset05, overwrite = TRUE)
UtilOutputReport(dataset05, overwrite = TRUE, FOM = "MaxL" )
UtilOutputReport(dataset05, overwrite = TRUE, FOM = "MaxLLF" )
UtilOutputReport(dataset05, overwrite = TRUE, FOM = "MaxNLF", method = "ORH" )
source('~/rjafroc-master/tests/testthat/test-output-report.R')
devtools::test_coverage()
StSignificanceTesting(datasetROI)
library(RJafroc)
StSignificanceTesting(datasetROI)
FOM
covEstMethod
StSignificanceTesting(datasetROI)
UtilFigureOfMerit(datasetROI, FOM = "ROI")
UtilFigureOfMerit(datasetROI)
ret <- StSignificanceTesting(datasetROI)
Cov
ret$varComp
ret$fRRFC
ret$ciDiffTrtEachRdr
ret$ciAvgRdrEachTrtRRRC
ret$ciDiffTrtRRRC
ret$ddfFRRC
library(pkgdown)
pkgdown::build_site()
UtilFigureOfMerit(datasetROI)
#> Incorrect FOM supplied, changing to 'ROI'
#>           Rdr - 1   Rdr - 2   Rdr - 3   Rdr - 4   Rdr - 5
#> Trt - 1 0.9057239 0.8842834 0.8579279 0.9350207 0.8352103
#> Trt - 2 0.9297186 0.9546035 0.8937652 0.9531716 0.8770076
fom <- UtilFigureOfMerit(datasetROI, FOM = "ROI")
str(ret)
library(RJafroc)
devtools::test_coverage()
license()
RShowDoc("GPL-3")
library(RJafroc)
package?RJafroc
library(RJafroc)
library(devtools)
library(testthat)
UtilFigureOfMerit(dataset02, FOM = "Wilcoxon") # ROC data
UtilFigureOfMerit(DfFroc2Roc(dataset01), FOM = "Wilcoxon") # FROC dataset, converted to ROC
UtilFigureOfMerit(dataset01) # FROC dataset, default wAFROC FOM
UtilFigureOfMerit(dataset = datasetCadLroc, FOM = "ALROC") #LROC data
UtilFigureOfMerit(datasetROI) #RO
library(RJafroc)
UtilFigureOfMerit(datasetROI, FOM = "Wilcoxon")
UtilFigureOfMerit(datasetROI, FOM = "wAFROC")
library(RJafroc)
UtilFigureOfMerit(dataset02, FOM = "Wilcoxon") # ROC data
UtilFigureOfMerit(DfFroc2Roc(dataset01), FOM = "Wilcoxon") # FROC dataset, converted to ROC
UtilFigureOfMerit(dataset01) # FROC dataset, default wAFROC FOM
UtilFigureOfMerit(datasetCadLroc, FOM = "Wilcoxon") #LROC data
UtilFigureOfMerit(datasetCadLroc, FOM = "PCL") #LROC data
UtilFigureOfMerit(datasetCadLroc, FOM = "ALROC") #LROC data
UtilFigureOfMerit(datasetROI, FOM = "ROI") #ROI data
UtilFigureOfMerit(dataset01, FOM = "Wilcoxon")
UtilFigureOfMerit(dataset02, FOM = "wAFROC")
library(RJafroc)
UtilFigureOfMerit(dataset02, FOM = "wAFROC")
library(RJafroc)
UtilFigureOfMerit(dataset02, FOM = "wAFROC")
UtilFigureOfMerit(dataset02)
UtilFigureOfMerit(dataset02, FOM = "Wilcoxon")
x <- dataset01
library(RJafroc)
UtilFigureOfMerit(dataset02, FOM = "Wilcoxon") # ROC data
UtilFigureOfMerit(DfFroc2Roc(dataset01), FOM = "Wilcoxon") # FROC dataset, converted to ROC
UtilFigureOfMerit(dataset01) # FROC dataset, default wAFROC FOM
UtilFigureOfMerit(datasetCadLroc, FOM = "Wilcoxon") #LROC data
UtilFigureOfMerit(datasetCadLroc, FOM = "PCL") #LROC data
UtilFigureOfMerit(datasetCadLroc, FOM = "ALROC") #LROC data
UtilFigureOfMerit(datasetROI, FOM = "ROI")
UtilMeanSquares(dataset05, method = "ORH")
UtilMeanSquares(dataset02, method = "ORH")
UtilMeanSquares(dataset02, FOM = "Wilcoxon", method = "ORH")
devtools::test()
source('~/rjafroc-master/tests/testthat/test-utils.R')
UtilLesionWeights (UtilLesionDistribution(datasetCadLroc))
source('~/rjafroc-master/tests/testthat/test-utils.R')
source('~/rjafroc-master/R/UtilMeanSquares.R')
source('~/rjafroc-master/R/UtilPseudoValues.R')
devtools::test()
expect_error(UtilFigureOfMerit(dataset01, FOM = "Wilcoxon"))
UtilFigureOfMerit(dataset01, FOM = "HrAuc")
source('~/rjafroc-master/tests/testthat/test-FOM.R')
UtilMeanSquares(dataset02)
UtilMeanSquares(dataset01)
UtilMeanSquares(dataset05, method = "DBMH", FOM = "wAFROC")
UtilPseudoValues(dataset05)[1,1,1:10]
retDbmwJAFROC  <- StSignificanceTesting(dataset05)
UtilOutputReport(dataset05, method = "DBMH", FOM = "HrAuc", ReportFileFormat = "xlsx")}
UtilOutputReport(dataset05, method = "DBMH", FOM = "HrAuc", ReportFileFormat = "xlsx")
UtilMeanSquares(dataset05, method = "ORH", FOM = "wAFROC")
library(RJafroc)
run_examples()
library(RJafroc)
run_examples()
library(RJafroc)
run_examples(start = "Compare3ProperRocFits")
run_examples(start = "Compare3ProperRocFits", run = TRUE)
library(RJafroc)
UtilMeanSquares(dataset01)
UtilMeanSquares(dataset01, FOM = "wAFROC")
library(RJafroc)
UtilMeanSquares(dataset01, FOM = "wAFROC")
run_examples(start = "Compare3ProperRocFits", run = TRUE)
run_examples(start = "Compare3ProperRocFits", run = TRUE, fresh = TRUE, document = TRUE)
run_examples(start = "StSignificanceTesting")
library(RJafroc)
run_examples(start = "StSignificanceTesting")
library(RJafroc)
source('~/rjafroc-master/R/StSignificanceTesting.R')
library(RJafroc)
run_examples(start = "StSignificanceTesting")
library(RJafroc)
run_examples(start = "StSignificanceTesting")
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "ORH")
StSignificanceTesting(dataset05, FOM = "wAFROC")
StSignificanceTesting(dataset05, FOM = "HrAuc", method = "DBMH")
library(RJafroc)
devtools::run_examples(start = "StSignificanceTesting")
devtools::check()
library(RJafroc)
if(interactive()) {
interactive()
)
??`RJafroc-package`
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "ORH")
if(interactive()) {
StSignificanceTesting(dataset05, FOM = "wAFROC")
StSignificanceTesting(dataset05, FOM = "HrAuc", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "SongA1", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "SongA2", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "wJAFROC1", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "JAFROC1", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "JAFROC", method = "DBMH")
}
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "ORH")
library(RJafroc)
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
library(RJafroc)
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
library(RJafroc)
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "DBMH")
StSignificanceTesting(dataset02,FOM = "Wilcoxon", method = "ORH")
## Not run:
StSignificanceTesting(dataset05, FOM = "wAFROC")
StSignificanceTesting(dataset05, FOM = "HrAuc", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "SongA1", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "SongA2", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "wJAFROC1", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "JAFROC1", method = "DBMH")
StSignificanceTesting(dataset05, FOM = "JAFROC", method = "DBMH")
## End(Not run)
24600/2
25600/2
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
ret <- StSignificanceTesting(datasetROI)
ret$ciDiffTrtRRRC$Estimate
library(RJafroc)
library(RJafroc)
df <- DfReadDataFile("JAFROC-patients.xlsx")
df <- DfReadDataFile("JAFROC_Patients.xlsx")
p <- PlotEmpiricalOperatingCharacteristics(ds, trts = 1, rdrs = 1,
opChType = "ROC")
p <- PlotEmpiricalOperatingCharacteristics(df, trts = 1, rdrs = 1,
opChType = "ROC")
p
p$Plot
p <- PlotEmpiricalOperatingCharacteristics(df, trts = 1, rdrs = 1,
opChType = "AFROC");p$Plot
p <- PlotEmpiricalOperatingCharacteristics(df, trts = 1, rdrs = 1,
opChType = "wAFROC");p$Plot
p <- PlotEmpiricalOperatingCharacteristics(df, trts = c(1), rdrs = c(1,2),
opChType = "wAFROC");p$Plot
p <- PlotEmpiricalOperatingCharacteristics(df, trts = c(1,2,3,4), rdrs = c(1,2),
opChType = "wAFROC");p$Plot
install.packages("RJafroc")
install.packages("RJafroc")
install.packages("RJafroc")
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
build_site()
library(RJafroc)
devtools::check()
version()
R.version()
R.Version()
install.packages("stringr")
library(RJafroc)
library(RJafroc)
fn <- "/Users/Dev/Downloads/myProject/frocDataReordered.xlsx"
ds <- DfReadDataFile(fn)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
FOM
fomArray
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
gpfMyFOM(nl, ll, lesionNum, lesionID, lesionWeight, maxNL, maxLL, K1 - 1, K2, FOM)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
k - K1
lesionNum[-(k - K1)
]
lesionID[-(k - K1), ]
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
str(lesionNum)
str(lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
fom
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
wJAFROC(nl, ll, lesionNum, c(K1, K2), maxNL, maxLL, lesionWeight)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
maxNL
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
k - K1
str(nl)
str(ll)
c(K1, K2)
maxNL
maxLL
str(lesionWeight)
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
str(lesionNum)
maxNL
maxLL
str(lesionWeight)
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
str(lesionNum)
maxNL
maxLL
c(K1, K2)
str(lesionWeight)
StSignificanceTestingSingleFixedFactor(ds)
c(K1, K2)
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
str(lesionNum)
str(lesionID)
str(lesionWeight)
maxNL
maxLL
StSignificanceTestingSingleFixedFactor(ds)
str(lesionNum[-(k - K1)])
lesionID[-(k - K1), ]
str(lesionID[-(k - K1), ])
str(lesionWeight[-(k - K1), )
str(lesionWeight[-(k - K1),] )
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
K1
K2
str(lesionWeight)
str(weights)
str(nl)
str(ll)
str(n_lesions_per_image)
str(max_cases)
max_nl
max_ll
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
str(n_lesions_per_image)
str(max_cases)
max_nl
max_ll
str(weights)
library(RJafroc)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
max_cases
str(n_lesions_per_image)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
ret
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(weights)
nles
weights[na, nles]
ll[na, nles]
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(lesionWeight)
lesWght <- lesionWeight[-(k - K1), ]
library(RJafroc)
library(RJafroc)
lesWght <- lesionWeight[-(k - K1), ]
StSignificanceTestingSingleFixedFactor(ds)
str(lesionWeight)
StSignificanceTestingSingleFixedFactor(ds)
str(lesWght)
StSignificanceTestingSingleFixedFactor(ds)
str(lesionID[-(k - K1), ])
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
str(lesID)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
install.packages("roxygen2")
install.packages("bbml")
install.packages("bbmle")
install.packages("binom")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("mvtnorm")
install.packages("numDeriv")
install.packages("openxlsx")
library(RJafroc)
install.packages("knitr")
library(RJafroc)
install.packages("testthat")
install.packages("rmarkdown")
rm -Rf /var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpNDKp90/Rd2pdf1def6d146a51
rm -Rf /var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpNDKp90/Rd2pdf1def6d146a51
install.packages("texi2dvi")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("bbmle", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("binom", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("mvtnorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("numDeriv", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("openxlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(RJafroc)
Sys.which("pdflatex")
Sys.getenv("PATH")
library(RJafroc)
library(RJafroc)
rm -Rf /var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpYO571S/Rd2pdf2e5a3c8976d1
rm -Rf '/var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpYO571S/Rd2pdf2e5a3c8976d1'
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(RJafroc)
library(RJafroc)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::check()
library(RJafroc)
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-compare-3fits.R')
context("Compare3ProperRocFits")
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
})
library("testthat")
library("RJafroc")
test_check("RJafroc")
context("Compare3ProperRocFits")
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
})
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
})
