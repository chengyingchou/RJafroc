ret$allResults[[1]]
str(ret$allResults[[1]])
str(ret$allResults[[10]]$retRsm$mu)
str(ret$allResults[[11]]$retRsm$mu)
allResults <- list()
allResults <- list(list())
allResults <- list(list(),list())
allResults[[1]]
allResults[[2]]
allResults[[3]]
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee")
b = c(TRUE, FALSE, TRUE, FALSE, FALSE)
x = list(n, s, b, 3)
x[2]
x[c(2, 4)]
x[[2]]
x <- list(rep(list(),3))
x <- rep(list(),3)
View(x)
x <- list(rep(list(),3))
str(x)
x <- list(rep(NULL,3))
x
x <- list()
x1 <- rep(x,4)
x1
library(RJafroc)
x <- as.list(array(dim = 4))
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
f-startIndx+1
allResults[f-startIndx+1]
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
x$retRsm$mu
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
x <- array(dim=c(14,10))
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
allResults[1] <- c(1,2,3,4)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
allResults[1] <- as.list(c(1,2,3,4))
allResults[1]
allResults[[1]] <- as.list(c(1,2,3,4))
allResults[[2]] <- as.list(c(3,3,2,3,4))
library(RJafroc)
allResults[[3]] <- as.list(c(3,3,3,3,2,3,4))
#count <- 0
allResults <- list()
allResults[[1]] <- as.list(c(1,2,3,4))
allResults[[2]] <- as.list(c(3,3,2,3,4))
allResults[[3]] <- as.list(c(3,3,3,3,2,3,4))
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
x <- ret$AllBinnedDatasets
library(RJafroc)
ret <- Compare3ProperRocFits(1,3,reAnalyze = TRUE)
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE)
x <- ret$allResults
x[[1]]$retRsm$mu
x[[2]]$retRsm$mu
x[[20]]$retRsm$mu
x[[21]]$retRsm$mu
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE)
str(ret$AllBinnedDatasets)
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE)
ret$allResults[[1]]
str(ret$allResults[[1]])
str(ret$allResults)
str(ret$allResults[1])
str(ret$allResults[[1]]$retRsm)
str(ret$allResults[[1]]$allResults)
str(ret$allResults[1]$allResults)
str(ret$allResults[[1]][[1]])
str(ret$allResults[[1]][[10]])
str(ret$allResults[[1]][[11]])
str(ret$allResults[[2]][[10]])
str(ret$allResults[[3]][[10]])
str(ret$allResults[[2]][[10]])
str(ret$allResults[[2]][[1]])
str(ret$allResults[[2]][[9]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE) # analyze first two datasets
x <- ret$allDatasetsResults
str(x[[1]][[1]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
f-startIndx + 1
ret <- Compare3ProperRocFits(1,1)
allDatasetsResults[f-startIndx + 1] <- list(allResults)
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
x <- ret$allDatasetsResults
str(x[[1]][[1]])
str(x[[1]][[10]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,2)
x <- ret$allDatasetsResults
str(x[[1]][[1]])
str(x[[1]][[10]])
str(x[[1]][[11]])
str(x[[2]][[10]])
str(x[[3]][[10]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,2)
dataset <- DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))
ret <- FitCorCbm(dataset)
print(ret$fitCorCbmRet)
print(ret$stats)
print(ret$fittedPlot)
library(RJafroc)
ret <- Compare3ProperRocFits(1,2) # analyze first two datasets
x <- ret$allDatasetsResults
foo <- list( str='R', vec=c(1,2,3), bool=TRUE )
str(foo)
foo[ 'bool' ]
foo[ 'bool' ]$bool
foo[[ 'bool' ]]
bar <- list( mat=matrix(0,nrow=2,ncol=2), rand=rnorm(1) )
foo[[ 2:3 ]]
foo[ 2:3 ]
bar <- list( mat=matrix(0,nrow=2,ncol=2), rand=rnorm(1) )
bar
foo[ 2:3 ] <- bar
foo
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::use_vignette("my-vignette")
library(RJafroc)
browseVignettes(package = "dplyr")
library(RJafroc)
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
# Add two numbers together
add <- function(a, b) a + b
add(10, 20)
install.packages("pander")
pander::pandoc.table(iris[1:3, 1:4])
library(RJafroc)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
str(dataset03)
ret <- StSignificanceTesting(dataset03, method = "DBMH", FOM = "Wilcoxon")
print(ret)
dataset03$NL[1,1,68:100]
dataset03$NL[1,1,68:100,1]
dataset03$NL[1,1,34:100,1]
dataset03$NL[1,1,1:34,1]
dataset03$NL[2,3,1:34,1]
ret$fomArray
ret$anovaY
ret$anovaYi
ret$ciAvgRdrEachTrtRRRC
ret$ciAvgRdrEachTrtRRFC
library(RJafroc)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
fileName <- paste0(fileName, "includedRocData.xlsx")
fileName <- "includedRocData.xlsx"
sysFileName <- system.file(paste0("extdata/",fileName), fileName, package = "RJafroc", mustWork = TRUE)
fileName <- "includedRocData.xlsx"
sysFileName <- system.file(paste0("extdata/",fileName), fileName, package = "RJafroc", mustWork = TRUE)
paste0("extdata/",fileName)
sysFileName <- system.file(paste0("extdata/",fileName), package = "RJafroc", mustWork = TRUE)
fileName <- "includedRocData.xlsx"
sysFileName <- system.file(paste0("extdata/",fileName), package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(sysFileName)
str(ds)
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "Example.xlsx")
print(ret)
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "..\Example.xlsx")
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "..\\Example.xlsx")
print(ret)
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "../Example.xlsx")
print(ret)
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx")
UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE, ReportFileFormat = "xlsx")
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
revdep("rjafroc")
library(RJafroc)
devtools::build_vignettes()
devtools::check()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("ggplot2", "mvtnorm", "Rcpp", "roxygen2"))
install.packages(c("devtools", "rmarkdown"))
library(RJafroc)
library(RJafroc)
library(RJafroc)
devtools::build_vignettes()
setwd("~/Dropbox/rjafroc")
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
library(RJafroc)
vignette <- readRDS("~/Dropbox/rjafroc/Meta/vignette.rds")
View(vignette)
library(RJafroc)
install.packages("roxygen2")
devtools::build_vignettes()
remove.packages("RJafroc")
library(RJafroc)
devtools::build_vignettes()
library("dichromat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("devtools")
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::check()
library(RJafroc)
devtools::build_vignettes()
install.packages("ggplot2")
install.packages("Rcpp")
gwd()
library(RJafroc)
devtools::release()
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::build_manual()
devtools::release()
install.packages(c("cli", "digest", "glue", "mime", "openssl", "R6", "rstudioapi"))
devtools::release()
devtools::build_vignettes()
library(RJafroc)
library(RJafroc)
devtools::build()
devtools::build() --no-build-vignettes
devtools::build(--no-build-vignettes)
devtools::build(,--no-build-vignettes)
devtools::build(--no-build-vignettes)
library(RJafroc)
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
pkgdown::build_site()
library("RJafroc", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(RJafroc)
library(RJafroc)
pkgdown::build_site()
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
remove.packages("RJafroc")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
effectSize
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH", effectSize = 0.05)
library(RJafroc)
powTab <- SsPowerTable(dataset02, method = "DBMH")
as.list(environment())
library(RJafroc)
powTab <- SsPowerTable(dataset02, method = "DBMH")
dataset
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
list(...)
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6)
powTab <- SsPowerTable(dataset02, method = "DBMH")
list(...)
powTab <- SsPowerTable(dataset02, method = "DBMH")
list(...)
desiredPower
effectSize
library(RJafroc)
powTab <- SsPowerTable(dataset02, method = "DBMH")
library(RJafroc)
powTab <- SsPowerTable(dataset02, method = "DBMH")
library(RJafroc)
powTab <- SsPowerTable(dataset02, method = "DBMH")
!missing(dataset
)
library(RJafroc)
powTab <- SsPowerTable(dataset02, method = "DBMH")
powTab
SsPowerTable(dataset02, method = "DBMH")
SsPowerTable(dataset02, method = "ORH")
library(RJafroc)
SsPowerTable(dataset02, method = "ORH")
option
SsPowerTable(dataset02, method = "ORH")
library(RJafroc)
SsPowerTable(dataset02, method = "ORH")
SsPowerGivenJK(dataset02, 6, 251, method = "DBMH")
SsPowerGivenJK(dataset02, 6, 251, method = "ORH")
SsPowerGivenJK(dataset02, 6, 251, method = "DBMH")
library(RJafroc)
SsPowerGivenJK(dataset02, 6, 251, method = "DBMH")
SsPowerGivenJK(dataset02, 6, 251, method = "ORH")
length(args)
library(RJafroc)
SsPowerGivenJK(dataset02, 6, 251, method = "ORH")
library(RJafroc)
SsPowerGivenJK(dataset02, 6, 251, method = "ORH")
library(RJafroc)
SsPowerGivenJK(dataset02, 6, 251, method = "ORH")
SsPowerGivenJK(dataset02, 6, 251, method = "DBMH")
library(RJafroc)
SsPowerTable(dataset02, method = "DBMH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
library(RJafroc)
SsPowerTable(dataset02, method = "DBMH")
library(RJafroc)
SsPowerTable(dataset02, method = "DBMH")
library(RJafroc)
SsPowerTable(dataset02, method = "DBMH")
is.null(effectSize)
effectSize
x <- c(suppliedParameters,list(K = K), calculatedParameters)
(!missing(dataset) && (length(args) == 0))
SsPowerTable(dataset02, method = "DBMH")
c(suppliedParameters,list(K = K), calculatedParameters)
effectSize
SsPowerTable(dataset02, method = "DBMH")
library(RJafroc)
SsPowerTable(dataset02, method = "DBMH")
library(RJafroc)
SsPowerGivenJK(dataset02, 6, 251, method = "DBMH")
SsPowerGivenJK(dataset02, 6, 251, method = "ORH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "DBMH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
SsPowerTable(dataset02, method = "DBMH")
SsPowerTable(dataset02, method = "ORH")
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
option in c("ALL", "RRRC", "FRRC", "RRFC")
option %in% c("ALL", "RRRC", "FRRC", "RRFC")
library(RJafroc)
SsSampleSizeKGivenJ(dataset02, J = 6, method = "ORH")
SsPowerTable(dataset02, method = "ORH")
SsPowerTable(method = "ORH")
SsPowerTable(dataset02)
SsPowerTable(method = "ORh")
library(RJafroc)
SsPowerTable(method = "ORH")
SsPowerTable(dataset02, method = "ORH")
library(RJafroc)
SsPowerTable(dataset02, method = "ORH")
library(RJafroc)
retFit <- FitCbmRoc(dataset02);print(retFit$fittedPlot)
retFit <- FitCbmRoc(datasetDegenerate);print(retFit$fittedPlot)
fp <- c(rep(1,7), rep(2, 3))
tp <- c(rep(1,5), rep(2, 5))
dataset <- Df2RJafrocDataset(fp, tp)
retFit <- FitCbmRoc(dataset);print(retFit$fittedPlot)
fp <- c(rep(1,7), rep(2, 5), rep(3, 3))
tp <- c(rep(1,3), rep(2, 5), rep(3, 7))
dataset <- Df2RJafrocDataset(fp, tp)
retFit <- FitCbmRoc(dataset);print(retFit$fittedPlot)
retFit <- FitCbmRoc(dataset02, 2, 1);print(retFit$fittedPlot)
ds <- DfFroc2Roc(dataset01)
retFit <- FitCbmRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
RShowDoc("cbmPlots", package = "RJafroc")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
SsPowerGivenJK(dataset02)
library("RJafroc", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
SsPowerGivenJK(dataset02)
SsPowerGivenJK(dataset02, 6 100)
SsPowerGivenJK(dataset02, 6, 100)
roots <- real.roots(1, 7, 12)
source('~/Documents/GitHub/rjafroc-master/tests/testthat/helper_real_roots.R')
source('~/Documents/GitHub/rjafroc-master/tests/testthat/helper_real_roots.R')
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
})
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
})
x <- c(1, 2, 3)
expect_that( length(x), equals(2.7) )
expect_that( x, is_a("data.frame") )
# Test for ANY error
expect_error( real.roots(0, 2, 3))
real.roots(0, 2, 3)
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
roots <- real.roots(1, 6000, 9000000)
real.roots(1, 6000, 9000000)
expect_equal( length(roots), 1)
expect_equal( roots, -3000)
# Test whether ABSOLUTE error is within 0.1
expect_equal( roots, -3100.01, tolerance  = 0.1)
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3901, tolerance  = 0.1, scale=-3000)
ret <- SsPowerGivenJK(dataset02, option = "RRRC")
ret <- SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")
ret$powerRRRC
test_that("incorrect arguments generate errors",
SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC, 0.5526116)
test_that("incorrect arguments generate errors",
(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC"))$powerRRRC, 0.5526116)
test_that("incorrect arguments generate errors",
expect_equal((SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC"))$powerRRRC, 0.5526116))
test_that("incorrect arguments generate errors",
expect_equal(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC, 0.5526116))
test_that("incorrect arguments generate errors",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC, 0.5526116))
test_that("incorrect arguments generate errors",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC,
0.5526116, tolerance = 1e-6))
test_that("incorrect arguments generate errors",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC,
0.5526116, tolerance = 1e-7))
test_that("incorrect arguments generate errors",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC,
0.5526116, tolerance = 1e-8))
test_that("incorrect arguments generate errors",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC,
0.5526116, tolerance = 5e-8))
test_that("expected values are obtained for dataset02",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC")$powerRRRC,
0.5526116, tolerance = 5e-8))
test_that("ORH: expected values are obtained for dataset02",
expect_equivalent(SsPowerGivenJK(dataset02, J = 6, K = 111, option = "RRRC", method = "ORH")$powerRRRC,
0.5526116, tolerance = 5e-8))
ret1 <- SsPowerKGivenJ(dataset02, J = 6, option = "RRRC", method = "ORH")
ret1 <- SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC", method = "ORH")
test_that("SsSampleSizeKGivenJ:DBMH: expected values are obtained for dataset02",
expect_equal(SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC", method = "ORH")$KRRRC,
251))
test_that("SsSampleSizeKGivenJ:ORH: expected values are obtained for dataset02",
expect_equal(SsSampleSizeKGivenJ(dataset02, J = 6, option = "RRRC", method = "ORH")$KRRRC,
251))
ret2 <- SsPowerTable(dataset02)
ret2$powerTableRRRC
ret2$powerTableRRRC[5]
ret2$powerTableRRRC[[5]]
ret2$powerTableRRRC$numReaders
ret2$powerTableRRRC$numReaders[5]
value(ret2$powerTableRRRC$numReaders[5])
as.numeric(ret2$powerTableRRRC$numReaders[5])
as.numeric(ret2$powerTableRRRC$numReaders[1])
as.numeric(ret2$powerTableRRRC$numReaders)
ret2
ret2$powerTableRRRC$numReaders
ret2$powerTableRRRC$numReaders[5]
as.numeric(ret2$powerTableRRRC$numReaders[5])
ret2$powerTableRRRC$numReaders[5] == 7
str(ret2)
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equal(SsPowerTable(dataset02)$powerTableRRRC$NumReaders[5],
7))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equal(SsPowerTable(dataset02)$powerTableRRRC$numReaders[5],
7))
test_that("SsPowerTable:DBMH: expected values are obtained for dataset02",
expect_equivalent(SsPowerTable(dataset02)$powerTableRRRC$numReaders[5],
7))
SsPowerTable(dataset02)$powerTableRRRC$numReaders[5]
str(SsPowerTable(dataset02)$powerTableRRRC$numReaders[5])
as.numeric(SsPowerTable(dataset02)$powerTableRRRC$numReaders[5])
