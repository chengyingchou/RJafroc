#  tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
})
test_that("Compare3ProperRocFits", {
#   tmp <- tempfile()
#   expect_known_output(
#     Compare3ProperRocFits(1,1),
#     tmp, print = TRUE)
#
# #  tmp <- tempfile()
#   expect_known_output(
#     Compare3ProperRocFits(1,1),
#     tmp, print = TRUE)
})
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
})
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
})
library(RJafroc)
library("testthat")
library("RJafroc")
x <- Compare3ProperRocFits(1,1,re)
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
x$allDatasetsResults[[1][1]]
x$allDatasetsResults[[1]][[1]]
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
expect_known_output(
y,
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
y,
tmp, print = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
expect_known_output(
y,
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
y,
tmp, print = TRUE)
})
library(RJafroc)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
expect_known_output(
y,
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
y,
tmp, print = TRUE)
})
y
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
y$retRsm$mu
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_known_output(
y,
tmp, print = TRUE)
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y1 <- y
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
y
y1
# tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y1 <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_equal(y,y1)
test_that("Compare3ProperRocFits", {
# tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
# expect_known_output(
#   y,
#   tmp, print = TRUE)
# x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
# y1 <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_equal(y,1.781369)
#  tmp <- tempfile()
# expect_known_output(
#   y,
#   tmp, print = TRUE)
})
y
test_that("Compare3ProperRocFits", {
# tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
# expect_known_output(
#   y,
#   tmp, print = TRUE)
# x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
# y1 <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_equal(y,1.781369284)
#  tmp <- tempfile()
# expect_known_output(
#   y,
#   tmp, print = TRUE)
})
library(RJafroc)
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-compare-3fits.R')
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
x <- DfCreateCorCbmDataset()
tempfile("abc", "../..")
tempdir()
tempfile("abc", tmpdir = "../..")
tempfile()
file.create(tempfile("abc", "../.."))
/Users/Dev/Documents/GitHub/rjafroc-master/tests
getwd()
paste0(getwd(),"\tests\testthat")
d <- paste0(getwd(),"\tests\testthat")
tempfile("abc", d)
file.create(tempfile(d)
)
file.create(tempfile(d, tmpdir = d)
)
file.create(tempfile(tmpdir = d))
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
pkgdown::build_site()
devtools::check()
pkgdown::build_site()
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(RJafroc)
library(RJafroc)
pkgdown::build_site()
install.packages(c("knitr", "rmarkdown"))
install.packages("Rcpp")
install.packages(c("testthat", "devtools"))
install.packages("roxygen2")
install.packages(c("bbmle", "binom"))
install.packages(c("dplyr", "ggplot2", "mvtnorm", "openxlsx"))
library(RJafroc)
install.packages("knitr")
install.packages("rmarkdown")
library(RJafroc)
x <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)
View(x)
x$allDatasetsResults
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]
x <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$mu
x <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsmmu
x
x <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsmu
x <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]
x$retRsm
x$retRsm$mu
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
library(RJafroc)
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
library(RJafroc)
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
library(RJafroc)
Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
mtcars[1:10, ]
y <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
tmp <- tempfile()
expect_known_output(y, tmp, print = TRUE)
library(testthat)
expect_known_output(y, tmp, print = TRUE)
tempdir()
getwd()
a <- c(getwd(),"\tests")
a <- paste0(getwd(),"\tests")
a <- paste0(getwd(),"/tests")
a <- paste0(getwd(),"/tests/testthat")
library(RJafroc)
tempdir()
paste0(getwd(),"/tests/testthat")
tempfile(tmpdir = paste0(getwd(),"/tests/testthat"))
tmp <- tempfile(tmpdir = paste0(getwd(),"/tests/testthat"))
library(RJafroc)
tmp <- tempfile(tmpdir = paste0(getwd(),"/tests/testthat"))
library(RJafroc)
tmp <- tempfile(tmpdir = paste0(getwd(),"/tests/testthat"))
y <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_known_output(y, tmp, print = TRUE)
library(testthat)
tmp <- tempfile(tmpdir = paste0(getwd(),"/tests/testthat"))
y <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_known_output(y, tmp, print = TRUE)
y <- Compare3ProperRocFits(1,1,reAnalyze = FALSE)$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_known_output(y, tmp, print = TRUE)
tmp
expect_known_hash(Compare3ProperRocFits(1,1,reAnalyze = FALSE))
library(RJafroc)
testthat::test_file("tests/testthat/test-compare-3fits.R")
library(RJafroc)
testthat::test_file("tests/testthat/test-compare-3fits.R")
testthat::tests()
testthat::test_check()
testthat::test_check('RJafroc')
library(RJafroc)
testthat::test_check('RJafroc')
testthat::test_package('RJafroc')
testthat::test_package("RJafroc")
test_check()
test_check("RJafroc")
testthat::test_check("RJafroc")
testthat::test_file("tests/testthat/test-compare-3fits.R")
StSignificanceTestingCadVsRadiologists (dataset09, FOM = "Wilcoxon", method = "dualModality")
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
warnings()
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
str(zjk1)
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
str(zk1)
str(zk2Cl)
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
zk1
zk2Cl
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
str(dataset)
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
zk1[ zk1 > cutoff ]
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
FPFValue
lroc$FPF
lroc$TPF
lroc$PCL
x <- c(2,2:4,4,4,5,5,7,7,7)
y <- c(1:6, 5:4, 3:1)
amy <- approx(x, y, xout = x)$y
amy1 <- amy
amy2  <- approx(x, y, xout = x, ties = "ordered")$y
amy1
amy2
amy3 <- approx(x, y, xout = x, ties = min)$y
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
PCL
ALroc
library(RJafroc)
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
PCL
ALroc
library(RJafroc)
StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", method = "singleModality")
library(RJafroc)
x <- UtilFigureOfMerit(datasetROI, FOM = "ROI")
library(RJafroc)
x <- UtilFigureOfMerit(datasetROI, FOM = "ROI")
x <- UtilFigureOfMerit(datasetROI)
x <- UtilFigureOfMerit(datasetROI, FOM = "wAFROC")
UtilFigureOfMerit(dataset01, FOM = "Wilcoxon")
str(dataset01)
str(dataset02)
pngcrush
library(RJafroc)
pngcrush
ds4 <- DfBinDataset(dataset05, opChType = "ROC")
library(RJafroc)
ds4 <- DfBinDataset(dataset05, opChType = "ROC")
save(ds4, file = "Df2RJafrocDataset.ds4")
setwd("~/Documents/GitHub/RJafroc/tests/testthat")
getwd()
paste0(getwd(), "/tests/testthat")
setwd(paste0(getwd(), "/tests/testthat"))
save(ds4, file = "Df2RJafrocDataset.ds4")
library(RJafroc)
ds5 <- DfBinDataset(dataset05, opChType = "AFROC")
save(ds5, file = "DfBinDataset.ds5")
ds6 <- DfCreateCorCbmDataset()
save(ds6, file = "DfCreateCorCbmDataset.ds6")
ds7 <- DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3))
save(ds7, file = "DfExtractCorCbmDataset.ds7")
library(RJafroc)
setwd(paste0(getwd(), "/tests/testthat"))
ds8 <- DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3))
save(ds8, file = "DfExtractCorCbmDataset.ds8")
setwd(paste0(getwd(), "/tests/testthat"))
ds9 <- DfExtractCorCbmDataset(dataset05, trts = c(1,2), rdrs = c(1,3))
save(ds9, file = "DfExtractCorCbmDataset.ds9")
getwd()
ds9 <- DfExtractCorCbmDataset(dataset05, trts = c(1,2), rdrs = c(1,3))
save(ds9, file = "DfExtractCorCbmDataset.ds9")
ds10 <- DfFroc2Afroc(dataset05)
save(ds10, file = "DfFroc2Afroc.ds10")
ds11 <- DfFroc2Roc(dataset05)
save(ds11, file = "DfFroc2Roc.ds11")
ds12 <- DfReadLrocDataFile(dataset05)
save(ds12, file = "DfReadLrocDataFile.ds12")
ds12 <- DfReadLrocDataFile()
save(ds12, file = "DfReadLrocDataFile.ds12")
ds13 <- DfLroc2Roc(ds12)
save(ds13, file = "DfLroc2Roc.ds13")
ds14 <- DfReadCrossedModalities(crossedFileName)
save(ds14, file = "DfReadCrossedModalities.ds14")
crossedFileName <- system.file("extdata",
"includedCrossedModalitiesData.xlsx",
package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds14 <- DfReadCrossedModalities(crossedFileName)
save(ds14, file = "DfReadCrossedModalities.ds14")
fileName <- system.file("extdata", "includedRocData.csv", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds15 <- DfReadDataFile(fileName, format = "MRMC")
save(ds15, file = "DfReadCrossedModalities.ds15")
fileName <- system.file(
"extdata", "includedRocData.lrc", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds16 <- DfReadDataFile(fileName, format = "lrc")
save(ds16, file = "DfReadDataFileLRC.ds16")
fileName <- system.file(
"extdata", "includedRocData.lrc", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds16 <- DfReadDataFile(fileName, format = "MRMC")
save(ds16, file = "DfReadDataFileLRC.ds16")
load("DfReadDataFileLRC.ds16")
expect_equal(DfReadDataFile(fileName, format = "MRMC"), ds16)
library(testthat)
fileName <- system.file(
"extdata", "includedRocData.lrc", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds16 <- DfReadDataFile(fileName, format = "MRMC")
save(ds16, file = "DfReadDataFileLRC.ds16")
load("DfReadDataFileLRC.ds16")
expect_equal(DfReadDataFile(fileName, format = "MRMC"), ds16)
fileName <- system.file(
"extdata", "includedRocData.imrmc", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds17 <- DfReadDataFile(fileName, format = "iMRMC")
save(ds17, file = "DfReadDataFileLRC.ds17")
fileName <- system.file(
"extdata", "includedRocData.xlsx", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds18 <- DfReadDataFile(fileName)
save(ds18, file = "DfReadDataFileXlsx.ds18")
fileName <- system.file(
"extdata", "includedFrocData.xlsx", package = "RJafroc", mustWork = TRUE)
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds19 <- DfReadDataFile(fileName, renumber = TRUE)
save(ds19, file = "DfReadDataFileFrocXlsx.ds19")
set.seed(1)
z1 <- rnorm(5)
z2 <- rnorm(7)*1.5 + 2
# uncomment next 3 lines to create dataset and then save it
# setwd(paste0(getwd(), "/tests/testthat"))
ds01 <- Df2RJafrocDataset(z1, z2)
save(ds01, file = "goodValues/Df2RJafrocDataset.ds01")
load("goodValues/Df2RJafrocDataset.ds01")
expect_equal(Df2RJafrocDataset(z1, z2), ds01) # an ROC dataset
DfSaveDataFile(dataset, fileName = "rocData2.xlsx", format = "JAFROC")
DfSaveDataFile(dataset05, fileName = "rocData2.xlsx", format = "JAFROC")
library(openxlsx)
DfSaveDataFile(dataset05, fileName = "rocData2.xlsx", format = "JAFROC")
library(RJafroc)
DfSaveDataFile(dataset05, fileName = "rocData2.xlsx", format = "JAFROC")
remove.packages("zip")
install.packages("zip")
library(RJafroc)
wb <- loadWorkbook(file = system.file("loadExample.xlsx", package= "openxlsx"))
library(openxlsx)
wb <- loadWorkbook(file = system.file("loadExample.xlsx", package= "openxlsx"))
str(wb)
dataset <- dataset05
DfSaveDataFile(dataset, fileName = "goodValues/dataset05.xlsx", format = "JAFROC")
DfSaveDataFile(dataset, fileName = "temp/dataset05.xlsx", format = "JAFROC")
wbGood <- loadWorkbook(file = "goodValues/dataset05.xlsx")
wbCurrent <- loadWorkbook(file = "temp/dataset05.xlsx")
expect_equal(wbGood, wbCurrent)
library(testthat)
expect_equal(wbGood, wbCurrent)
all.equal(wbGood, wbCurrent)
all.equal.Workbook(wbGood, wbCurrent)
str(wbCurrent)
expect_equivalent(wbGood, wbCurrent)
dfGood <- readWorkbook("goodValues/dataset05.xlsx")
dfGood <- readWorkbook(xlsxFile = "goodValues/dataset05.xlsx")
dfGood <- readWorkbook("goodValues/dataset05.xlsx")
dfCurrent <- readWorkbook("temp/dataset05.xlsx")
expect_equivalent(dfGood, dfCurrent)
for (i in 1:3) {
dfGood <- readWorkbook("goodValues/dataset05.xlsx", i)
dfCurrent <- readWorkbook("temp/dataset05.xlsx", i)
expect_equivalent(wbGood, wbCurrent)# works!
}
for (i in 1:3) {
dfGood <- readWorkbook("goodValues/dataset05.xlsx", i)
dfCurrent <- readWorkbook("temp/dataset05.xlsx", i)
expect_equivalent(dfGood, dfCurrent)# works!
}
for (i in 1:4) {
dfGood <- readWorkbook("goodValues/dataset05.xlsx", i)
dfCurrent <- readWorkbook("temp/dataset05.xlsx", i)
expect_equivalent(dfGood, dfCurrent)# works!
}
DfSaveDataFile(dataset, fileName = "goodValues/datasetROI.xlsx", format = "JAFROC")
DfSaveDataFile(dataset, fileName = "goodValues/dataset02.imrmc", format = "iMRMC")
dataset <- dataset02
DfSaveDataFile(dataset, fileName = "goodValues/dataset02.imrmc", format = "iMRMC")
DfSaveDataFile(dataset, fileName = "temp/dataset02.imrmc", format = "iMRMC")
for (i in 1:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook("goodValues/dataset02.imrmc", i) # check each sheet individually
dfCurrent <- readWorkbook("temp/dataset02.imrmc", i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
xx <- file("goodValues/dataset02.imrmc", open = "rt")
xx1 <- readLines(xx)
expect_equivalent(xx1, yy1)
yy <- file("tempValues/dataset02.imrmc", open = "rt")
yy1 <- readLines(yy)
close(xx1)
close(yy1)
yy <- file("tempValues/dataset02.imrmc", open = "rt")
yy1 <- readLines(yy)
close(xx)
close(yy)
dataset <- dataset02
DfSaveDataFile(dataset, fileName = "goodValues/dataset02.csv", format = "MRMC")
DfSaveDataFile(dataset, fileName = "tempValues/dataset02.csv", format = "MRMC")
xx <- file("goodValues/dataset02.csv", open = "rt")
xx1 <- readLines(xx)
yy <- file("tempValues/dataset02.csv", open = "rt")
yy1 <- readLines(yy)
close(xx1)
close(yy1)
expect_equivalent(xx1, yy1)# works!
DfSaveDataFile(dataset, fileName = "tempValues/dataset02.csv", format = "MRMC")
xx <- file("goodValues/dataset02.csv", open = "rt")
xx1 <- readLines(xx)
yy <- file("tempValues/dataset02.csv", open = "rt")
yy1 <- readLines(yy)
close(xx)
close(yy)
expect_equivalent(xx1, yy1)# works!
