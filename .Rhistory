expect_equal(ds2, ds1)
# end of test
fn
fileName <- system.file(
"extdata", "RoiData.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfReadDataFile-jafroc-roi", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfReadDataFile(fileName)
saveRDS(ds, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfReadDataFile(fileName), ds)
# end of test
ds <- DfReadDataFile(fileName)
expect_equal(ds$dataType, "ROI")
fileName <- system.file(
"extdata", "RoiData.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfReadDataFile-jafroc-roi", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfReadDataFile(fileName)
saveRDS(ds, file = fn)
}
ds1 <- readRDS(fn)
ds2 <- DfReadDataFile(fileName)
fn
fileName <- system.file(
"extdata", "RoiData.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfReadDataFile-jafroc-roi", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfReadDataFile(fileName)
saveRDS(ds, file = fn)
}
ds1 <- readRDS(fn)
ds2 <- DfReadDataFile(fileName)
expect_equal(ds2, ds1)
# end of test
ds <- DfReadDataFile(fileName)
expect_equal(ds$dataType, "ROI")
``  fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfFroc2Afroc", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfFroc2Afroc(dataset05)
saveRDS(ds, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfFroc2Afroc(dataset05), ds)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfFroc2Afroc", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfFroc2Afroc(dataset05)
saveRDS(ds, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfFroc2Afroc(dataset05), ds)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfExtractDataset", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfExtractDataset(dataset05, rdrs = c(1, 3))
saveRDS(ds, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfExtractDataset(dataset05, rdrs = c(1, 3)), ds)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfSaveDataFile.xlsx")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
DfSaveDataFile(dataset05, fileName = fn, format = "JAFROC")
}
fn1 <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/myTemp.xlsx")
DfSaveDataFile(dataset05, fileName = fn1, format = "JAFROC")
for (i in 1:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook(fn, i) # check each sheet individually
dfCurrent <- readWorkbook(fn1, i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfSaveDataFile-roi.xlsx")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
DfSaveDataFile(datasetROI, fileName = fn, format = "JAFROC")
}
fn1 <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfSaveDataFile-roi1.xlsx")
DfSaveDataFile(datasetROI, fileName = fn1, format = "JAFROC")
for (i in 1:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook(fn, i) # check each sheet individually
dfCurrent <- readWorkbook(fn1, i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfLroc2Roc", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfLroc2Roc(DfReadLrocDataFile())
saveRDS(ds, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfLroc2Roc(DfReadLrocDataFile()), ds)
help(RJafroc)
library(RJafroc)
help(RJafroc)
help("RJafroc-package")
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfLroc2Roc", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfDatasetLroc2Roc(DfReadLrocDataFile())
saveRDS(ds, file = fn)
}
ds <- readRDS(fn)
expect_equal(DfDatasetLroc2Roc(DfReadLrocDataFile()), ds)
fileName <- system.file(
"extdata", "RoiData.xlsx", package = "RJafroc", mustWork = TRUE)
fn <- paste0(test_path(), "/goodValues361/Df2RJafrocDataset/DfReadDataFile-jafroc-roi", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ds <- DfReadDataFile(fileName)
saveRDS(ds, file = fn)
}
ds1 <- readRDS(fn)
ds2 <- DfReadDataFile(fileName)
expect_equal(ds2, ds1)
ds <- DfReadDataFile(fileName)
expect_equal(ds$dataType, "ROI")
ds <- DfReadDataFile(fileName)
library(devtools)
library(testthat)
test()
mu <- 2;lambda <- 20;nu <- 1.1512925
fn <- paste0(test_path(), "/goodValues361/Utils/Intrinsic2PhysicalRSM", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ret <- UtilIntrinsic2PhysicalRSM(mu, lambda, nu)
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(UtilIntrinsic2PhysicalRSM(mu, lambda, nu), ret)
dataset <- dataset05
# "Wilcoxon" will generate error, skipping "SongA1" and "SongA2"
FOM_arr <- c("AFROC", "AFROC1", "wAFROC", "wAFROC1", "MaxNLF", "MaxLLF", "MaxNLFAllCases",
"ExpTrnsfmSp", "HrSp", "HrSe")
for (i in 1:length(FOM_arr)) {
fn <- paste0(test_path(), "/goodValues361/Utils/PseudoValues", "-", FOM_arr[i], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ret <- UtilPseudoValues(dataset, FOM = FOM_arr[i])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(UtilPseudoValues(dataset, FOM = FOM_arr[i]), ret,
info = paste0("FOM = ",FOM_arr[i])
)
dataset <- dataset05
# "Wilcoxon" will generate error, skipping "SongA1" and "SongA2"
FOM_arr <- c("AFROC", "AFROC1", "wAFROC", "wAFROC1", "MaxNLF", "MaxLLF", "MaxNLFAllCases",
"ExpTrnsfmSp", "HrSp", "HrSe")
for (i in 1:length(FOM_arr)) {
fn <- paste0(test_path(), "/goodValues361/Utils/PseudoValues", "-", FOM_arr[i], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ret <- UtilPseudoValues(dataset, FOM = FOM_arr[i])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(UtilPseudoValues(dataset, FOM = FOM_arr[i]), ret,
info = paste0("FOM = ",FOM_arr[i])
)
fn <- paste0(test_path(), "/goodValues361/Utils/PseudoValues", "-", "Wilcoxon", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ret <- UtilPseudoValues(dataset02, FOM = "Wilcoxon")
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(UtilPseudoValues(dataset02, FOM = "Wilcoxon"), ret)
fn <- paste0(test_path(), "/goodValues361/Utils/PseudoValues", "-", "Wilcoxon", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ret <- UtilPseudoValues(dataset02, FOM = "Wilcoxon")
saveRDS(ret, file = fn)
}
ret1 <- readRDS(fn)
ret2 <- UtilPseudoValues(dataset02, FOM = "Wilcoxon")
expect_equal(ret2, ret1)
fn <- paste0(test_path(), "/goodValues361/Utils/PseudoValues", "-", "Wilcoxon", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
ret <- UtilPseudoValues(dataset02, FOM = "Wilcoxon")
saveRDS(ret, file = fn)
}
ret1 <- readRDS(fn)
ret2 <- UtilPseudoValues(dataset02, FOM = "Wilcoxon")
expect_equal(ret2, ret1)
test()
library(devtools)
library(testthat)
help("devtools")
devtools::check()
dataset_arr <- list(dataset02, dataset05) # deparse(substitute(dataset02)) does not work below
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
d <- 1;i <- 1;j <- 1;dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
goodValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(goodValues, file = fn)
}
goodValues <- readRDS(fn)
currentValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
goodValues <- readRDS(fn)
currentValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
View(goodValues)
fn
dataset_arr <- list(dataset02, dataset05) # deparse(substitute(dataset02)) does not work below
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
d <- 1;i <- 1;j <- 1;dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
goodValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(goodValues, file = fn)
}
fn
goodValues <- readRDS(fn)
currentValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
goodValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(goodValues, file = fn)
}
((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")
)
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
goodValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(goodValues, file = fn)
}
fn
goodValues <- readRDS(fn)
currentValues <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
x1 <- goodValues
x2 <- currentValues
rm(goodValues)
rm(currentValues)
x1[[1]]
length(x1[[1]][[1]])
length(x1[[1]][1])
length(x1[[1]])
x1[[1]]
x1[[1]][1]
x1[[1]][2]
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
expect_equal(x1[[t]][q], x2[[t]][q])
}
devtools::test()
devtools::check()
test_check("RJafroc")
devtools::check()
fn
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
expect_equal(x1[[t]][q], x2[[t]][q],
info = paste0("Dataset = ",dataset_arr_str[[d]],", FOM = ",FOM_arr[i],", method = ",method_arr[j]))
}
devtools::check()
t <- 1;q <- 1
x1[[t]][q]
x2[[t]][q]
expect_equal(x1[[t]][q], x2[[t]][q])
x1[[t]][q]
x1[[t]]
x2[[t]]
as.numeric(x1[[t]])
as.numeric(x2[[t]])
as.numeric(x1[[t]][q])
as.numeric(unlist(x2[[t]]))
as.numeric(unlist(x2[[t]][q]))
library(RJafroc)
str(x1)
str(x2)
as.numeric(unlist(x1[[t]][q]))
unlist(x1[[t]][q])
x1[[t]][q]
x2[[t]][q]
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
expect_equal(as.numeric(x1[[t]][q]), as.numeric(x2[[t]][q]),
info = paste0("Dataset = ",dataset_arr_str[[d]],", FOM = ",
FOM_arr[i],", method = ",method_arr[j], ", t = ", t, ", q =", q))
}
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
x1[[t]][q]
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
source('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
devtools::check()
devtools::test()
devtools::check()
str(x1)
str(x1[[1]])
str(x1[[1]][1])
str(x1[[1]][[1]])
library(RJafroc)
dataset_arr <- list(dataset02, dataset05) # deparse(substitute(dataset02)) does not work below
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
i <- 1;j <- 1;d <- 1
dataset <- dataset_arr[[d]]
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
library(devtools)
library(testthat)
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
y <- x1[[1]]
attributes(y)
attributes(y) <- NULL
attributes(y)
y
devtools::test()
help("testthat")
help(RJafroc)
help(RJafroc-package)
library(RJafroc)
help(RJafroc-package)
help(RJafroc)
help("RJafroc")
library(RJafroc)
fn <- paste0(test_path(), "/goodValues361/SigTest/SingleFixedFactor_02_1_14", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset02, 1, 1:4), FOM = "Wilcoxon")
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTestingSingleFixedFactor(DfExtractDataset(dataset02, 1, 1:4), FOM = "Wilcoxon")
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
x11 <- x1[[t]][q]; attributes(x11) <- NULL
x22 <- x2[[t]][q]; attributes(x22) <- NULL
expect_equal(x11, x22)
}
devtools::test()
CompareLists <- function(x1, x2)
{
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
x11 <- x1[[t]][q]; attributes(x11) <- NULL
x22 <- x2[[t]][q]; attributes(x22) <- NULL
expect_equal(x11, x22)
}
dataset_arr <- list(dataset02, dataset05) # deparse(substitute(dataset02)) does not work below
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
i <- 1;d <- 1;j <- 1
dataset <- dataset_arr[[d]]
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
CompareLists <- function(x1, x2)
{
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
x11 <- x1[[t]][q]; attributes(x11) <- NULL
x22 <- x2[[t]][q]; attributes(x22) <- NULL
expect_equal(x11, x22)
}
dataset_arr <- list(dataset02, dataset05) # deparse(substitute(dataset02)) does not work below
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
i <- 1;d <- 1;j <- 1
dataset <- dataset_arr[[d]]
fn <- paste0(test_path(), "/goodValues361/SigTest/", dataset_arr_str[d], FOM_arr[i], method_arr[j], ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
CompareLists <- function(x1, x2)
{
for (t in 1:length(x1)) {
for (q in 1:length(x1[[t]])) {
x11 <- x1[[t]][q]; attributes(x11) <- NULL
x22 <- x2[[t]][q]; attributes(x22) <- NULL
expect_equal(x11, x22)
}
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
attributes(x11)
attributes(x22)
attributes(x11)
str(x11)
as.vector(x11)
unlist(x11)
as.vector(unlist(x11))
source('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
devtools::test()
devtools::check()
source('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
x11()
x11
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
x11
str(x11)
devtools::test()
devtools::check()
devtools::test()
devtools::check()
x1[[2]]
x1[[2]][1]
unlist(x1[[2]])
attributes(unlist(x1[[2]]))
y <- unlist(x1[[2]])
attributes(y) <- NULL
y
is.na(y)
y[!is.na(y)]
source('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
devtools::check()
source('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
y1
y2
devtools::check()
source('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
y1
y2
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
d
debugSource('~/GitHub/RJafroc/inst/testsToInclude/temp1.R')
d
i
j
y1
y2
devtools::test()
devtools::check()
devtools::test()
help("devtools-package")
devtools::check(run_dont_test = TRUE)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
help("RJafroc-package")
