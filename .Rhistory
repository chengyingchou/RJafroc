retDbm$RRRC$ciDiffTrt[1,"StdErr"]
devtools::build_vignettes()
SsPowerGivenJK(dataset02, FOM = "Wilcoxon", J = 6, K = 112, option = "RRRC")
devtools::build_vignettes()
frocNhData <- DfExtractDataset(dataset04, trts = c(1,2))
ret <- SsFrocNhRsmModel(frocNhData, lesionPmf = c(0.7, 0.2, 0.1))
muMed <- ret$muMed
lambdaMed <- ret$lambdaMed
nuMed <- ret$nuMed
lesDistr <- ret$lesDistr
lesWghtDistr <- ret$lesWghtDistr
scaleFactor <- ret$scaleFactor
aucRocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = lesDistr,
lesWghtDistr = lesWghtDistr, OpChType = "ROC")$aucROC
aucwAfrocNH <- PlotRsmOperatingCharacteristics(muMed, lambdaMed, nuMed,
lesDistr = lesDistr,
lesWghtDistr = lesWghtDistr, OpChType = "wAFROC")$aucwAFROC
x <- StSignificanceTesting(frocNhData, FOM = "wAFROC", method = "DBMH", analysisOption = "RRRC")
varCompwAFROC  <- StSignificanceTesting(frocNhData, FOM = "wAFROC", method = "DBMH", analysisOption = "RRRC")$ANOVA$VarCom
varYTR <- varCompwAFROC["VarTR","Estimates"]
varYTC <- varCompwAFROC["VarTC","Estimates"]
varYEps <- varCompwAFROC["VarErr","Estimates"]
ret <- SsPowerGivenJKDbmVarComp (J = J, K = K, effectSize = effectSizewAFROC,
varYTR, varYTC, varYEps, analysisOption = "RRRC")
K
ROC_ES <- 0.05
effectSizewAFROC <- scaleFactor * ROC_ES
J <- 5;K <- 100
varYTR <- varCompwAFROC["VarTR","Estimates"]
varYTC <- varCompwAFROC["VarTC","Estimates"]
varYEps <- varCompwAFROC["VarErr","Estimates"]
ret <- SsPowerGivenJKDbmVarComp (J = J, K = K, effectSize = effectSizewAFROC,
varYTR, varYTC, varYEps, analysisOption = "RRRC")
powerwAFROC <- ret$powerRRRC
varCompwAFROC
devtools::build_vignettes()
pkgdown::build_site()
?Rjafroc
library(RJafroc)
?`RJafroc-package`
DBM <- StSignificanceTesting(dataset02, FOM = "Wilcoxon", method = "DBMH")
str(DBM)
OR <- StSignificanceTesting(dataset02, FOM = "Wilcoxon", method = "ORH")
SP <- StSignificanceTesting(datasetFROCSp, FOM = "wAFROC", method = "ORH")
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
library(RJafroc)
str(datasetCrossedModality)
str(dataset01)
rm(list = ls())
library(RJafroc)
load("~/GitHub/RJafroc/data/dataset01.RData")
dataset01$design <- "FACTORIAL"
save("dataset01", file = "~/GitHub/RJafroc/data/dataset01.RData")
load("~/GitHub/RJafroc/data/dataset01.RData")
eval(parse(text="dataset01"))
x <- parse(text="dataset01")
str(x)
x <- eval(parse(text="dataset01"))
dataStr <- c("dataset01", "dataset02", "dataset03", "dataset04", "dataset05", "dataset06",
"dataset07", "dataset08", "dataset09", "dataset10", "dataset11", "dataset12",
"dataset13", "dataset14",
"datasetBinned123", "datasetBinned124", "datasetBinned125",
"datasetCadLroc", "datasetCadSimuFroc", "datasetCrossedModality",
"datasetDegenerate", "datasetFROCSp", "datasetROI")
debugSource('~/GitHub/RJafroc/inst/FixDatasets/ConvertDataset.R')
str(x)
deparse(x)
str(deparse(x))
debugSource('~/GitHub/RJafroc/inst/FixDatasets/ConvertAllDatasets.R')
fn
debugSource('~/GitHub/RJafroc/inst/FixDatasets/ConvertAllDatasets.R')
fn
dataStr[i]
library(RJafroc)
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
length(x)
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
dim(x$NL)
length(dim(x$NL))
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
x$design
is.null(x$design)
if (is.null(x$design)) x$design <- "CROSSED-MODALITY"
str(x)
str(dataset01)
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
I <- length(x$modalityID)
J <- length(x$readerID)
K <- length(x$NL[1,1,1,,1])
K2 <- length(x$LL[1,1,1,,1])
K1 <- K - K2
seq(1:K1)
seq((1+K1):(K1+K2))
seq(1, K1)
seq(1+K1, K1+K2)
I1 <- length(x$NL[,1,1,1,1])
I2 <- length(x$NL[1,,1,1,1])
J <- length(x$NL[1,1,,1,1])
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
x$design %in% c("CROSSED-MODALITY", "FACTORIAL", "SPLIT-PLOT")
!(x$design %in% c("CROSSED-MODALITY", "FACTORIAL", "SPLIT-PLOT"))
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
source('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
debugSource('~/GitHub/RJafroc/inst/FixDatasets/FixAllDatasets.R')
writeFile
library(RJafroc)
library(testthat)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "wAFROC")
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "wAFROC")
nl_ij
ll_ij
K1_ij
jkFomValues[i, j, kIndxAll]
kIndxAll
nlij_jk
llij_jk
lV_j_jk
lW_j_jk
lID_j_jk
K1
K
K2_ij - 1
K1_ij
MyFom_ij(nlij_jk, llij_jk, lV_j_jk,
lID_j_jk, lW_j_jk, maxNL, maxLL,
K1_ij, K2_ij - 1, FOM, FPFValue)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "wAFROC")
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "wAFROC")
expect_equal(x1, x2)
expect_equal(x1$jkPseudoValues, x2$jkPseudoValues)
x1$jkPseudoValues[1,1,]
x2$jkPseudoValues[1,1,]
x2$jkFomValues[1,1,]
x1$jkFomValues[1,1,]
library(RJafroc)
x2 <- UtilPseudoValues(temp, FOM = "wAFROC")
expect_equal(x1, x2)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpA.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpA", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "wAFROC")
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "wAFROC")
expect_equal(x1, x2)
# examine the jkFomValues
if (all(is.na(x1$jkFomValues[1,1:2,1:5]))) stop("failed this test: NAs present")
if (!all(is.na(x1$jkFomValues[2,1:2,1:5]))) stop("failed this test: not all NAs")
if (!all(is.na(x1$jkFomValues[1,3:5,1:5]))) stop("failed this test: not all NAs present")
if (all(is.na(x1$jkFomValues[2,3:5,1:5]))) stop("failed this test: NAs present")
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocCr.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocCr", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
x1$jkFomValues[1,1,]
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
MyFom_ij(nlij_jk, llij_jk, lV_j_jk,
lID_j_jk, lW_j_jk, maxNL, maxLL,
K1_ij, K2_ij - 1, FOM, FPFValue)
K2_ij
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocCr.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocCr", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocCr.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocCr", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
MyFom_ij(nlij_jk, llij_jk, perCase_ij, lID_ij, lW_ij, maxNL, maxLL,
k1_ij - 1, k2_ij, FOM, FPFValue)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocCr.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocCr", "wAFROC", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "wAFROC", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "wAFROC", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "wAFROC", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "wAFROC", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "wAFROC", FPFValue = 0.2)
expect_equal(x1, x2)
t <- temp$descriptions$truthTableStr
f <- x1$jkFomValues
any(is.na(x1$jkFomValues[,1,1:3]))
!all(is.na(x1$jkFomValues[2,1:2,1:5]))
x1$jkFomValues[,1,1:3]
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocCr.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocCr", "MaxLLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
fn
x1$jkFomValues[1,1,]
x2$jkFomValues[1,1,]
frocSpAMaxNLF <- readRDS("~/GitHub/RJafroc/tests/testthat/goodValues361/UtilPseudoValues/frocSpAMaxNLF.rds")
frocCrMaxLLF <- readRDS("~/GitHub/RJafroc/tests/testthat/goodValues361/UtilPseudoValues/frocCrMaxLLF.rds")
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocCr.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocCr", "MaxLLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "MaxLLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "MaxLLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
expect_equal(x1, x2)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
kIndxAll
k_ij_logi
which(k_ij_logi)[K1+k]
which(k_ij_logi)[K1_ij+k]
library(RJafroc)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
nl_ij
kIndxAll
K_ij
K1_ij
k
K2_ij
k2_ij_logi
kIndxAll
which(k2_ij_logi)
which(k2_ij_logi)[k]
which(k_ij_logi)[K1_ij+k]
nl_ij
nl_ij[-(k + K1_ij),]
k+K1_ij
library(RJafroc)
x2 <- UtilPseudoValues(temp, FOM = "MaxLLF", FPFValue = 0.2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "MaxNLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
nl_ij
kIndxAll
nl_ij[-kIndxAll, ]
K_ij
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
library(RJafroc)
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "MaxNLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "MaxNLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
expect_equal(x1, x2)
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpC.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/UtilPseudoValues/frocSpC", "MaxNLF", ".rds")
if (!file.exists(fn)) {
warning(paste0("File not found - generating new ",fn))
x1 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
saveRDS(x1, file = fn)
}
x1 <- readRDS(fn)
x2 <- UtilPseudoValues(temp, FOM = "MaxNLF", FPFValue = 0.2)
expect_equal(x1, x2)
library(RJafroc)
library(devtools)
devtools::test()
fileName <- system.file(
"extdata", "/toyFiles/FROC/frocSpA.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
fn <- paste0(test_path(), "/goodValues361/DfExtractDataset/frocSpA", ".rds")
x1 <- DfExtractDataset(temp, rdrs = c(1, 2, 3))
saveRDS(x1, file = fn)
x1 <- readRDS(fn)
x2 <- DfExtractDataset(temp, rdrs = c(1, 2, 3))
expect_equal(x1, x2)
t <- x1$descriptions$truthTableStr
for (j in 1:2) expect_equal(which(!is.na(t[1,j,,1])), 1:5)
expect_equal(which(!is.na(t[2,3,,1])), 1:5)
for (j in 1:2) expect_equal(which(!is.na(t[1,j,,2])), 6:10)
expect_equal(which(!is.na(t[2,3,,2])), 6:10)
devtools::test()
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/1T3Rvs4R.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
x2 <- StSignificanceTesting(temp, FOM = "wAFROC", method = "OR")
x2$FOMs
x2$RRRC
mean(c(0.81244705, 0.72682237, 0.56185908, 0.68544641))
fileName <- system.file(
"extdata", "/toyFiles/FROC/1T3Rvs4R.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
library(RJafroc)
fileName <- system.file(
"extdata", "/toyFiles/FROC/1T3Rvs4R.xlsx", package = "RJafroc", mustWork = TRUE)
temp <- DfReadDataFile(fileName, newExcelFileFormat = TRUE)
x2 <- StSignificanceTesting(temp, FOM = "wAFROC", method = "OR")
x2
UtilMeanSquares(dataset05, FOM = "wAFROC", method = "OR")
UtilMeanSquares(dataset05, FOM = "wAFROC", method = "DBM")
Ktemp
dim(pseudoValues)[3]
UtilMeanSquares(dataset05, FOM = "wAFROC", method = "MaxLLF")
UtilMeanSquares(dataset05, FOM = "MaxLLF", method = "DBM")
dim(pseudoValues)[3]
Ktemp
UtilMeanSquares(dataset05, FOM = "MaxNLF", method = "DBM")
Ktemp
dim(pseudoValues)[3]
library(RJafroc)
UtilMeanSquares(dataset05, FOM = "MaxNLFAllCases", method = "DBM")
library(RJafroc)
UtilMeanSquares(dataset05, FOM = "MaxNLFAllCases", method = "DBM")
dataset_arr <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBM", "OR")
d <- 2;f <- 7;m <- 1;dataset <- get(dataset_arr[d])
library(testthat)
fn <- paste0(test_path(), "/goodValues361/MeanSquares/",
dataset_arr[d], FOM_arr[f],"-", method_arr[m], ".rds")
fn
`dataset05MaxNLFAllCases-DBM` <- readRDS("~/GitHub/RJafroc/tests/testthat/goodValues361/MeanSquares/dataset05MaxNLFAllCases-DBM.rds")
x2 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
x1 <- readRDS(fn)
x2 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
str(nl)
str(ll)
perCase
maxNL
maxLL
MaxNLFAllCases(nl, ll, perCase, c(K1, K2), maxNL, maxLL)
library(RJafroc)
x2 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
fom
x2 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
Ktemp
x2 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
library(RJafroc)
x1 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
saveRDS(x1, file = fn)
x1 <- readRDS(fn)
x2 <- UtilMeanSquares(dataset, FOM = FOM_arr[f], method = method_arr[m])
expect_equal(x1, x2,
info = paste0("Dataset = ",dataset_arr[d],", FOM = ",FOM_arr[f],", method = ",method_arr[m])
)
library(RJafroc)
install.packages("knitr")
library(RJafroc)
install.packages("kableExtra")
install.packages("Rcpp")
install.packages("rmarkdown")
library(RJafroc)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
frocCr <- system.file("extdata", "toyFiles/FROC/frocCr.xlsx",
package = "RJafroc", mustWork = TRUE)
x <- DfReadDataFile(frocCr, newExcelFileFormat = TRUE)
str(x)
r x$lesions$perCase
x$lesions$perCase
x$lesions$IDs
x$lesions$weights
str(x$ratings$NL)
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
