z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
dataset <- Df2RJafrocDataset(z1, z2, lesionNum = Lk2)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "ROC")
print(retPlot$Plot)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "FROC")
print(retPlot$Plot)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "AFROC")
print(retPlot$Plot)
library(ggplot2)
dataset <- SimulateRocDataset(K1 = 5000, K2 = 7000, a = 1, b = 0.5, seed = 123)
datasetB <- DfBinDataset(dataset, desiredNumBins = 7, opChType = "ROC")
fomOrg <- as.matrix(UtilFigureOfMerit(dataset, FOM = "Wilcoxon"), nrow = 2, ncol = 9)
print(fomOrg)
fomBinned <- as.matrix(UtilFigureOfMerit(datasetB, FOM = "Wilcoxon"), nrow = 2, ncol = 9)
print(fomOrg)
cat("fomOrg = ", mean(fomOrg), "\n")
cat("fomBinned = ", mean(fomBinned), "\n")
x <- PlotEmpiricalOperatingCharacteristics(dataset)$Plot
y <- PlotEmpiricalOperatingCharacteristics(datasetB)$Points
fpf <- y$genAbscissa[-1];fpf <- fpf[-length(fpf)]
tpf <- y$genOrdinate[-1];tpf <- tpf[-length(tpf)]
plotOpPnts <- rbind(data.frame(fpf = fpf, tpf = tpf))
x <- x + geom_point(data = plotOpPnts, aes(x = fpf, y = tpf), size = 4)
print(x)
xx <- PlotEmpiricalOperatingCharacteristics(datasetB)
print(xx$Points)
binned <- DfBinDataset(dataset05, opChType = "ROC")
PlotEmpiricalOperatingCharacteristics(dataset05,
trts= c(1,2), rdrs = seq(1,9), opChType = "ROC")$Plot
PlotEmpiricalOperatingCharacteristics(binned, trts= c(1,2),
rdrs = seq(1,9), opChType = "ROC")$Plot
binned <- DfBinDataset(dataset05, opChType = "AFROC")
PlotEmpiricalOperatingCharacteristics(dataset05,
trts= c(1,2), rdrs = seq(1,9), opChType = "AFROC")$Plot
PlotEmpiricalOperatingCharacteristics(binned, trts= c(1,2),
rdrs = seq(1,9), opChType = "AFROC")$Plot
devtools::use_testthat()
source('~/rjafroc-master/tests/testthat/test_real_roots.R')
source("real_roots.R")
source("~/rjafroc-master/R/real_roots.R")
gwd()
path.package("RJafroc", quiet = FALSE)
test_dir(".")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test_dir(".")
test_dir("./tests")
result
test_dir("./tests")
roots <- real.roots(1, 7, 12)
roots
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], is_true() )
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], is_true() )
})
source("~/rjafroc-master/R/real_roots.R")
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], expect_true() )
})
test_dir("./tests")
roots <- real.roots(1, 7, 12)
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], is_true() )
source("./R/real_roots.R")
source("../../R/real_roots.R")
source("../../real_roots.R")
"./real_roots.R"
source("./real_roots.R")
source("./R/real_roots.R")
getwd()
wd <- getwd()
source(paste0(wd, "R/real_roots.R"))
wd <- getwd()
source(paste0(wd, "/R/real_roots.R"))
wd, "/R/real_roots.R"
paste0(wd, "/R/real_roots.R")
source("real_roots.R")
library(RJafroc)
f <- function() stop("My error!")
expect_error(f())
expect_error(f(), "My error!")
library("testthat")
library("RJafroc")
f <- function() stop("My error!")
expect_error(f())
expect_error(f(), "My error!")
expect_error(f())
View(f)
function() stop("My error!")
expect_error(f())
str(mtcars)
expect_output(str(mtcars), "32 obs")
expect_output(str(mtcars), "30 obs")
expect_output(str(mtcars), "11 variables")
expect_output(str(mtcars), "10 variables")
expect_output(str(mtcars), "11 VARIABLES", ignore.case = TRUE)
str(mtcars)
expect_output(str(mtcars), "$ mpg", fixed = TRUE)
f <- function(x) {
if (x < 0) message("*x* is already negative")
-x
}
expect_message(f(-1))
expect_message(f(-1), "already negative")
expect_message(f(1), NA)
expect_message(f(1), "positive")
expect_message(f(-1), "*x*", fixed = TRUE)
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "tero" )
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]e1ro" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
})
test_that("Repeated root", {
roots <- real.roots(1, 6000, 9000000)
expect_equal( length(roots), 1)
expect_equal( roots, -3000)
# Test whether ABSOLUTE error is within 0.1
expect_equal( roots, -3100.01, tolerance  = 0.1)
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3901, tolerance  = 0.1, scale=-3000)
})
test_that("Bogus tests", {
x <- c(1, 2, 3)
expect_that( length(x), equals(2.7) )
expect_that( x, is_a("data.frame") )
})
test_that("Polynomial must be quadratic", {
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
})
#source("real_roots.R")
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
})
test_that("Repeated root", {
roots <- real.roots(1, 6000, 9000000)
expect_equal( length(roots), 1)
expect_equal( roots, -3000)
# Test whether ABSOLUTE error is within 0.1
expect_equal( roots, -3100.01, tolerance  = 0.1)
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3901, tolerance  = 0.1, scale=-3000)
})
test_that("Polynomial must be quadratic", {
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
})
# test_that("Bogus tests", {
#
#   x <- c(1, 2, 3)
#
#   expect_that( length(x), equals(2.7) )
#   expect_that( x, is_a("data.frame") )
# })
library(RJafroc)
devtools::test()
library(RJafroc)
devtools::test()
library(RJafroc)
devtools::test()
remove.packages("RJafroc")
library(RJafroc)
ret1M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
ret2M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "dualModality")
retLroc1M <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
retLroc2M <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
ret1M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "singleModality")
ret2M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
datasetCadLroc7 <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret2MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
library(RJafroc)
ret1M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
ret1M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "singleModality")
ret2M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
datasetCadLroc7 <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret2MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
library(RJafroc)
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = TRUE)
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = FALSE)
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = FALSE)
readInput
if (readInput == "n") {
stop("Output file exists.")
} else readInput <- TRUE
readInput
readInput == "n"
if (readInput == "n") {
stop("Output file exists.")
} else readInput <- TRUE
readInput
library(RJafroc)
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = FALSE)
readInput
!overwrite
overwrite
overwrite || readInput
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = FALSE)
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset02, trts = c(1:2), rdrs = c(1:3))
print(ret$Plot)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(1:2), rdrs = c(1:3))
print(ret$Plot)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4))
print(ret$Plot)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), op)
print(ret$Plot)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
print(ret$Plot)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
print(ret$Plot)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret
!is.list(modalities2Plot) && !is.list(readers2Plot)
mr
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
genPoints$type[index]
genPoints$type
genPoints$type[index]
index
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
which(genPoints$Reader == levels(genPoints$Reader)[n])[1]
genPoints$type
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
genPoints$type
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
length(classes)
indices
sum(indices)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
indices
sum(indices)
!is.list(modalities2Plot)
genPoints$type
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
opChType
getPoints$type
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
genPoints <- genPoints(genNL, genLL, modalityID, readerID,
lesionNum, weights, modalities2Plot, readers2Plot, opChType)
genPoints$type
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
genPoints <- genPoints(genNL, genLL, modalityID, readerID,
lesionNum, weights, modalities2Plot, readers2Plot, opChType)
genPoints$type
genPoints$class
unique(genPoints$class)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
genPoints$class
genPoints$class[1]
classes
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
classes
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
classes
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "ROC")
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
rdrs2Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
readers2Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
rdrs2Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
lesionWeights
class
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = c(4:5), rdrs = c(1:4), opChType = "wAFROC")
ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC")
readers2Plot[[i]]
modalities2Plot[[i]]
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "ROC")
modalities2Plot[[i]]
readers2Plot[[i]]
rdrs2Plot
modalities2Plot
i
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "ROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
class
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC1");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "FROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "FROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "ROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC");ret$Plot
length(modalityID)
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "FROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "wAFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "AFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "FROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "wAFROC");ret$Plot
library(RJafroc)
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "ROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(5), rdrs = list(c(1:4)), opChType = "ROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "FROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(5), rdrs = list(c(1:4)), opChType = "FROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "AFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(5), rdrs = list(c(1:4)), opChType = "AFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "AFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(5), rdrs = list(c(1:4)), opChType = "AFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(5), rdrs = list(c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4), rdrs = list(c(1:4)), opChType = "wAFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(5), rdrs = list(c(1:4)), opChType = "wAFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "ROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "FROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "AFROC1");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC");ret$Plot
ret <- PlotEmpiricalOperatingCharacteristics(dataset =
dataset04, trts = list(4,5), rdrs = list(c(1:4),c(1:4)), opChType = "wAFROC1");ret$Plot
library(RJafroc)
search()
library(RJafroc)
