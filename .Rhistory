str(lesionNum)
str(lesionID)
str(lesionWeight)
maxNL
maxLL
StSignificanceTestingSingleFixedFactor(ds)
str(lesionNum[-(k - K1)])
lesionID[-(k - K1), ]
str(lesionID[-(k - K1), ])
str(lesionWeight[-(k - K1), )
str(lesionWeight[-(k - K1),] )
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
K1
K2
str(lesionWeight)
str(weights)
str(nl)
str(ll)
str(n_lesions_per_image)
str(max_cases)
max_nl
max_ll
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(nl)
str(ll)
str(n_lesions_per_image)
str(max_cases)
max_nl
max_ll
str(weights)
library(RJafroc)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
max_cases
str(n_lesions_per_image)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
ret
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(weights)
nles
weights[na, nles]
ll[na, nles]
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
str(lesionWeight)
lesWght <- lesionWeight[-(k - K1), ]
library(RJafroc)
library(RJafroc)
lesWght <- lesionWeight[-(k - K1), ]
StSignificanceTestingSingleFixedFactor(ds)
str(lesionWeight)
StSignificanceTestingSingleFixedFactor(ds)
str(lesWght)
StSignificanceTestingSingleFixedFactor(ds)
str(lesionID[-(k - K1), ])
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
str(lesID)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
library(RJafroc)
StSignificanceTestingSingleFixedFactor(ds)
StSignificanceTestingSingleFixedFactor(ds)
install.packages("roxygen2")
install.packages("bbml")
install.packages("bbmle")
install.packages("binom")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("mvtnorm")
install.packages("numDeriv")
install.packages("openxlsx")
library(RJafroc)
install.packages("knitr")
library(RJafroc)
install.packages("testthat")
install.packages("rmarkdown")
rm -Rf /var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpNDKp90/Rd2pdf1def6d146a51
rm -Rf /var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpNDKp90/Rd2pdf1def6d146a51
install.packages("texi2dvi")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("bbmle", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("binom", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("mvtnorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("numDeriv", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("openxlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(RJafroc)
Sys.which("pdflatex")
Sys.getenv("PATH")
library(RJafroc)
library(RJafroc)
rm -Rf /var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpYO571S/Rd2pdf2e5a3c8976d1
rm -Rf '/var/folders/d1/mx6dcbzx3v39r260458z2b200000gn/T//RtmpYO571S/Rd2pdf2e5a3c8976d1'
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(RJafroc)
library(RJafroc)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::check()
library(RJafroc)
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-compare-3fits.R')
context("Compare3ProperRocFits")
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
})
library("testthat")
library("RJafroc")
test_check("RJafroc")
context("Compare3ProperRocFits")
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
})
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE, update = TRUE)
})
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::check()
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE, update = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(5,5,showPlot = TRUE),
tmp, print = TRUE)
})
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
})
Compare3ProperRocFits(1,1,reAnalyze = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = FALSE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
})
tmp <- tempfile()
# The first run always succeeds
expect_known_output(mtcars[1:10, ], tmp, print = TRUE)
# Subsequent runs will suceed only if the file is unchanged
# This will succeed:
expect_known_output(mtcars[1:10, ], tmp, print = TRUE)
## Not run:
# This will fail
expect_known_output(mtcars[1:9, ], tmp, print = TRUE)
tmp <- tempfile()
# The first run always succeeds
expect_known_output(mtcars[1:10, ], tmp, print = TRUE)
# Subsequent runs will suceed only if the file is unchanged
# This will succeed:
expect_known_output(mtcars[1:10, ], tmp, print = TRUE)
## Not run:
# This will fail
expect_known_output(mtcars[1:9, ], tmp, print = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = FALSE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
})
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = FALSE)
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
context("Data file routines")
test_that("Df2RJafrocDataset", {
set.seed(1)
NL <- rnorm(5)
LL <- rnorm(7)*1.5 + 2
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(NL, LL),
tmp, print = TRUE, update = TRUE)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
z1 <- array(dim = c(I, J, K1))
z2 <- array(dim = c(I, J, K2))
mu <- 2;sigma <- 1.5
for (i in 1:I) {
for (j in 1:J) {
z1[i,j,1:K1] <- rnorm(K1)
z2[i,j,] <- rnorm(K2) * sigma + mu
}
}
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2),
tmp, print = TRUE, update = TRUE)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
z2 <- array(-Inf,dim = c(I,J,K2,40))
dimNL <- array(dim=c(I,J,2))
dimLL <- array(dim=c(I,J,2))
for (i in 1:I) {
for (j in 1:J) {
frocDataRaw <- SimulateFrocDataset(
mu, lambda, nu, zeta1, I = 1, J = 1, K1, K2, lesionNum = Lk2)
dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
tmp, print = TRUE, update = TRUE)
})
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = FALSE)
tmp1 <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp1, print = TRUE)
})
devtools::test()
test_that("UtilAucBinormal", {
a <- 2;b <- 0.7
expect_equal(UtilAucBinormal(a,b), 0.9493375)
})
test_that("UtilAucCBM", {
mu <- 2;alpha <- 0.8
x <- 0.8370803
expect_equal(UtilAucCBM(mu,alpha), x, tolerance = 1e-6, scale = x)
})
test_that("UtilAucPROPROC", {
c1 <- .2;da <- 1.5
x <- 0.8558655
expect_equal(UtilAucPROPROC(c1,da), x, tolerance = 1e-6, scale = x)
})
test_that("UtilAucsRSM", {
mu <- 1;lambdaP <- 1;nuP <- 1
lesDistr <- rbind(c(1, 0.9), c(2, 0.1))
x <- 0.8470065
expect_equal(
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucROC, x, tolerance = 1e-6, scale = x)
x <- 0.8071583
expect_equal(
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucAFROC, x, tolerance = 1e-6, scale = x)
})
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-utils.R')
test_that("UtilPseudoValues", {
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "wAFROC"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset02, FOM = "Wilcoxon"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "MaxNLF"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "ExpTrnsfmSp"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "HrSp"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "MaxLLF"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "HrSe"),
tmp, print = TRUE, update = TRUE)
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "MaxLLF"),
tmp, print = TRUE, update = TRUE)
})
tmp <- tempfile()
expect_known_output(
UtilPseudoValues(dataset05, FOM = "wAFROC"),
tmp, print = TRUE, update = TRUE)
test_package()
test_package("RJafroc")
test_check()
test_check("RJafroc")
devtools::test()
test_that("Df2RJafrocDataset", {
set.seed(1)
NL <- rnorm(5)
LL <- rnorm(7)*1.5 + 2
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(NL, LL),
tmp, print = TRUE, update = TRUE)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
z1 <- array(dim = c(I, J, K1))
z2 <- array(dim = c(I, J, K2))
mu <- 2;sigma <- 1.5
for (i in 1:I) {
for (j in 1:J) {
z1[i,j,1:K1] <- rnorm(K1)
z2[i,j,] <- rnorm(K2) * sigma + mu
}
}
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2),
tmp, print = TRUE, update = TRUE)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
z2 <- array(-Inf,dim = c(I,J,K2,40))
dimNL <- array(dim=c(I,J,2))
dimLL <- array(dim=c(I,J,2))
for (i in 1:I) {
for (j in 1:J) {
frocDataRaw <- SimulateFrocDataset(
mu, lambda, nu, zeta1, I = 1, J = 1, K1, K2, lesionNum = Lk2)
dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
tmp, print = TRUE, update = TRUE)
})
tmp <- tempfile()
# The first run always succeeds
expect_known_output(mtcars[1:10, ], tmp, print = TRUE)
#> Warning: Creating reference output
# Subsequent runs will suceed only if the file is unchanged
# This will succeed:
expect_known_output(mtcars[1:10, ], tmp, print = TRUE)
# NOT RUN {
# This will fail
expect_known_output(mtcars[1:9, ], tmp, print = TRUE)
# }
test_that("Df2RJafrocDataset", {
set.seed(1)
NL <- rnorm(5)
LL <- rnorm(7)*1.5 + 2
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(NL, LL),
tmp, print = TRUE, update = TRUE)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
z1 <- array(dim = c(I, J, K1))
z2 <- array(dim = c(I, J, K2))
mu <- 2;sigma <- 1.5
for (i in 1:I) {
for (j in 1:J) {
z1[i,j,1:K1] <- rnorm(K1)
z2[i,j,] <- rnorm(K2) * sigma + mu
}
}
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2),
tmp, print = TRUE, update = TRUE)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
z2 <- array(-Inf,dim = c(I,J,K2,40))
dimNL <- array(dim=c(I,J,2))
dimLL <- array(dim=c(I,J,2))
for (i in 1:I) {
for (j in 1:J) {
frocDataRaw <- SimulateFrocDataset(
mu, lambda, nu, zeta1, I = 1, J = 1, K1, K2, lesionNum = Lk2)
dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
tmp, print = TRUE, update = TRUE)
})
test_that("DfBinDatasetROC", {
tmp <- tempfile()
expect_known_output(
DfBinDataset(dataset05, opChType = "ROC"),
tmp, print = TRUE, update = TRUE)
})
test_dir(testthat_examples(), reporter = "summary")
