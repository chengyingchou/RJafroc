effectSize =effectSize)
retOR <- StSignificanceTesting(data = dataset02, FOM = "Wilcoxon",
covEstMethod = "Jackknife", method = "ORH")
effectSize <- retOR$ciDiffTrtRRRC$Estimate
varCompOR <- retOR$varComp
varTR <- varCompOR$varCov[2]
cov1 <- varCompOR$varCov[3]
cov2 <- varCompOR$varCov[4]
cov3 <- varCompOR$varCov[5]
varEps <- varCompOR$varCov[6]
KStar <- 114
SsSampleSizeKGivenJ(J = 6, cov1 = cov1, cov2 = cov2, cov3 = cov3, varTR = varTR, varEps= varEps,
KStar = KStar, effectSize =effectSize, method = "ORH")
library(RJafroc)
retDbmRoc  <- StSignificanceTesting(dataset02,
FOM = "Wilcoxon", method = "DBMH")
library(RJafroc)
retOR <- StSignificanceTesting(dataset02,
FOM = "Wilcoxon", method = "ORH")
print(retOR)
library(RJafroc)
retOR <- StSignificanceTesting(dataset02,
FOM = "Wilcoxon", method = "ORH")
print(retOR)
library(RJafroc)
StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
library(RJafroc)
ret1 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret1
ret2 <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
print(ret2$Plots)
library(RJafroc)
crossedFileName <- system.file("extdata", "includedCrossedModalitiesData.xlsx",
package = "RJafroc", mustWork = TRUE)
crossedData <- DfReadCrossedModalities(crossedFileName)
retCrossed <- StSignificanceTestingCrossedModalities(crossedData, 1)
retCrossed
retCrossed2 <- StSignificanceTestingCrossedModalities(datasetCrossedModality, 1)
retCrossed2
library(RJafroc)
singleFactorData <- DfExtractDataset(dataset02, 1, 1:4)
StSignificanceTestingSingleFixedFactor(singleFactorData, FOM = "Wilcoxon")
library(RJafroc)
a <- 2;b <- 0.7
auc <- UtilAucBinormal(a,b)
auc
library(RJafroc)
mu <- 2;alpha <- 0.8
auc <- UtilAucCBM(mu,alpha)
auc
library(RJafroc)
mu <- 2;alpha <- 0.8
UtilAucCBM(mu,alpha)
a <- 2;b <- 0.7
UtilAucBinormal(a,b)
library(RJafroc)
c1 <- .2;da <- 1.5
UtilAucPROPROC(c1,da)
library(RJafroc)
mu <- 1;lambdaP <- 1;nuP <- 1
lesDistr <- rbind(c(1, 0.9), c(2, 0.1))
## i.e., 90% of dis. cases have one lesion, and 10% have two lesions
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucROC
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucAFROC
mu <- c(1,2);lambdaP <- c(1,0.5);nuP <- c(1, 0.8)
lesDistr <- rbind(c(1, 0.9), c(2, 0.1))
## i.e., 90% of dis. cases have one lesion, and 10% have two lesions
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucROC
UtilAucsRSM(mu, lambdaP, nuP, lesDistr)$aucAFROC
library(RJafroc)
UtilFigureOfMerit(dataset = dataset02, FOM = "Wilcoxon")
UtilFigureOfMerit(dataset = dataset01, FOM = "Wilcoxon")
library(RJafroc)
UtilFigureOfMerit(DfFroc2Roc(dataset01), FOM = "Wilcoxon")
UtilFigureOfMerit(dataset = dataset01)
UtilFigureOfMerit(dataset = datasetCadLroc, FOM = "ALROC", FPFValue = 0.2)
library(RJafroc)
UtilMeanSquares(dataset02, FOM = "Wilcoxon")
UtilMeanSquares(dataset05, method = "ORH")
library(RJafroc)
UtilPseudoValues(dataset02, FOM = "Wilcoxon")
UtilPseudoValues(dataset02, FOM = "Wilcoxon")[1,2,1:10]
UtilPseudoValues(dataset02, FOM = "Wilcoxon")[1,1,1:10]
library(RJafroc)
UtilPseudoValues(dataset02, FOM = "Wilcoxon")[1,1,1:10]
UtilPseudoValues(dataset05)[1,1,1:10]
library(RJafroc)
VarianceComponentsY  <- UtilVarianceComponents(dataset02,
FOM = "Wilcoxon", method = "DBMH")
UtilVarianceComponents(dataset02,
FOM = "Wilcoxon", method = "DBMH")
VarianceComponentsY  <- UtilVarianceComponents(dataset02,
FOM = "Wilcoxon", method = "DBMH")
View(VarianceComponentsY)
VarianceComponentsY  <- UtilVarianceComponents(dataset02,
FOM = "Wilcoxon", method = "DBMH")
VarCompFlag
library(RJafroc)
Sys.setenv(TZ = "America/New_York")
devtools::build()
library(RJafroc)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Sweave2knitr("~/RJafroc/vignettes/RJafroc.Rnw")
Sys.setenv(TZ = "America/New_York")
system("R CMD check --as-cran ~/Dropbox/RJafroc100tests/RJafroc_1.0.0.tar.gz")
library(RJafroc)
devtools::install_github("r-hub/rhub")
library(rhub)
validate_email()
platforms()
library("rhub", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
check(platform = "solaris-x86-patched")
library(ggplot2)
library(tools,
ggplot2,
stringr,
utils,
stats,
bbmle,
binom,
caTools,
mvtnorm,
numDeriv,
Rcpp)
library(tools,ggplot2,stringr,utils,stats,bbmle,binom,caTools,mvtnorm,numDeriv,Rcpp)
library(tools)
library(stringr)
library(utils)
library(stats)
library(bbmle)
library(binom)
library(caTools)
library(mvtnorm)
library(numDeriv)
library(Rcpp)
check(platform = "solaris-x86-patched")
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
check(platform = "solaris-x86-patched")
detach("package:devtools", unload=TRUE)
check(platform = "solaris-x86-patched")
install.packages("check_flavors")
library(xlsx)
detach("package:ggplot2", unload=TRUE)
library("RJafroc", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:RJafroc", unload=TRUE)
devtools::release()
library(RJafroc)
ret1 <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
ret1$Plots
ret1 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret1$Plots
library(RJafroc)
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
View(dataset09a)
ret1 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "singleModality")
ret1$Plots
ret2 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
J
library(RJafroc)
ret2 <- StSignificanceTestingCadVsRadiologists (dataset09a, FOM = "Wilcoxon", method = "dualModality")
ret2$Plots
library(RJafroc)
datasetCadLroca <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1 <- StSignificanceTestingCadVsRadiologists (datasetCadLroca, FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret1$Plots
ret1 <- StSignificanceTestingCadVsRadiologists (datasetCadLroca, FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
ret1$Plots
library(RJafroc)
ret1 <- StSignificanceTestingCadVsRadiologists (dataset09, FOM = "Wilcoxon", method = "singleModality")
ret2 <- StSignificanceTestingCadVsRadiologists (dataset09, FOM = "Wilcoxon", method = "dualModality")
ret1$Plots
ret2$Plots
ret2 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc, FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
ret2$Plots
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
ret2 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
ret2$Plots
datasetCadLroc7 <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret1$Plots
ret2 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
ret2$Plots
library(RJafroc)
ret1M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
ret2M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "dualModality")
retLroc1M <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
retLroc2M <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
ret1M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "singleModality")
ret2M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
datasetCadLroc7 <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret2MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
library(RJafroc)
pack <- "RJafroc"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
## Following example is for mu = 2, lambda = 1, nu = 0.6, in one treatment and
## mu = 3, lambda = 1.5, nu = 0.8, in the other treatment. 20% of the diseased
## cases have a single lesion, 40% have two lesions, 10% have 3 lesions,
## and 30% have 4 lesions.
lesDistr <- rbind(c(1, 0.2), c(2, 0.4), c(3, 0.1), c(4, 0.3))
## On cases with one lesion the weights are 1, on cases with 2 lesions the weights
## are 0.4 and 0.6, on cases with three lesions the weights are 0.2, 0.3 and 0.5, and
## on cases with 4 lesions the weights are 0.3, 0.4, 0.2 and 0.1:
lesionWeights <- rbind(c(1.0, -Inf, -Inf, -Inf),
c(0.4,  0.6, -Inf, -Inf),
c(0.2,  0.3,  0.5, -Inf),
c(0.3,  0.4, 0.2,  0.1))
ret <- PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1))
print(ret$ROCPlot)
print(ret$AFROCPlot)
print(ret$wAFROCPlot)
print(ret$FROCPlot)
## the FROC plot ends at NLF = 0.5 because for both treatments the physical lambdas are 0.5.
## Following example is for mu = 2, lambda = 1, nu = 0.6, in one treatment and
## mu = 3, lambda = 1.5, nu = 0.8, in the other treatment. 20% of the diseased
## cases have a single lesion, 40% have two lesions, 10% have 3 lesions,
## and 30% have 4 lesions.
lesDistr <- rbind(c(1, 0.2), c(2, 0.4), c(3, 0.1), c(4, 0.3))
## On cases with one lesion the weights are 1, on cases with 2 lesions the weights
## are 0.4 and 0.6, on cases with three lesions the weights are 0.2, 0.3 and 0.5, and
## on cases with 4 lesions the weights are 0.3, 0.4, 0.2 and 0.1:
lesionWeights <- rbind(c(1.0, -Inf, -Inf, -Inf),
c(0.4,  0.6, -Inf, -Inf),
c(0.2,  0.3,  0.5, -Inf),
c(0.3,  0.4, 0.2,  0.1))
ret <- PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1))
print(ret$ROCPlot)
print(ret$AFROCPlot)
print(ret$wAFROCPlot)
print(ret$FROCPlot)
## the FROC plot ends at NLF = 0.5 because for both treatments the physical lambdas are 0.5.
sum(rowWeight[rowWeight != -Inf])
abs(sum(rowWeight[rowWeight != -Inf]) - 1) < 1e-6
(abs(sum(rowWeight[rowWeight != -Inf]) - 1) > 1e-6)
library(RJafroc)
## Following example is for mu = 2, lambda = 1, nu = 0.6, in one treatment and
## mu = 3, lambda = 1.5, nu = 0.8, in the other treatment. 20% of the diseased
## cases have a single lesion, 40% have two lesions, 10% have 3 lesions,
## and 30% have 4 lesions.
lesDistr <- rbind(c(1, 0.2), c(2, 0.4), c(3, 0.1), c(4, 0.3))
## On cases with one lesion the weights are 1, on cases with 2 lesions the weights
## are 0.4 and 0.6, on cases with three lesions the weights are 0.2, 0.3 and 0.5, and
## on cases with 4 lesions the weights are 0.3, 0.4, 0.2 and 0.1:
lesionWeights <- rbind(c(1.0, -Inf, -Inf, -Inf),
c(0.4,  0.6, -Inf, -Inf),
c(0.2,  0.3,  0.5, -Inf),
c(0.3,  0.4, 0.2,  0.1))
ret <- PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1))
print(ret$ROCPlot)
print(ret$AFROCPlot)
print(ret$wAFROCPlot)
print(ret$FROCPlot)
## the FROC plot ends at NLF = 0.5 because for both treatments the physical lambdas are 0.5.
## Following example is for mu = 2, lambda = 1, nu = 0.6, in one treatment and
## mu = 3, lambda = 1.5, nu = 0.8, in the other treatment. 20% of the diseased
## cases have a single lesion, 40% have two lesions, 10% have 3 lesions,
## and 30% have 4 lesions.
lesDistr <- rbind(c(1, 0.2), c(2, 0.4), c(3, 0.1), c(4, 0.3))
## On cases with one lesion the weights are 1, on cases with 2 lesions the weights
## are 0.4 and 0.6, on cases with three lesions the weights are 0.2, 0.3 and 0.5, and
## on cases with 4 lesions the weights are 0.3, 0.4, 0.2 and 0.1:
lesionWeights <- rbind(c(1.0, -Inf, -Inf, -Inf),
c(0.4,  0.6, -Inf, -Inf),
c(0.2,  0.3,  0.5, -Inf),
c(0.3,  0.4, 0.2,  0.1))
ret <- PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1))
print(ret$ROCPlot)
print(ret$AFROCPlot)
print(ret$wAFROCPlot)
print(ret$FROCPlot)
## the FROC plot ends at NLF = 0.5 because for both treatments the physical lambdas are 0.5.
library(RJafroc)
## Following example is for mu = 2, lambda = 1, nu = 0.6, in one treatment and
## mu = 3, lambda = 1.5, nu = 0.8, in the other treatment. 20% of the diseased
## cases have a single lesion, 40% have two lesions, 10% have 3 lesions,
## and 30% have 4 lesions.
lesDistr <- rbind(c(1, 0.2), c(2, 0.4), c(3, 0.1), c(4, 0.3))
## On cases with one lesion the weights are 1, on cases with 2 lesions the weights
## are 0.4 and 0.6, on cases with three lesions the weights are 0.2, 0.3 and 0.5, and
## on cases with 4 lesions the weights are 0.3, 0.4, 0.2 and 0.1:
lesionWeights <- rbind(c(1.0, -Inf, -Inf, -Inf),
c(0.4,  0.6, -Inf, -Inf),
c(0.2,  0.3,  0.5, -Inf),
c(0.3,  0.4, 0.2,  0.1))
ret <- PlotRsmOperatingCharacteristics(mu = c(2, 3), lambda = c(1, 1.5), nu = c(0.6, 0.8),
lesDistr = lesDistr, lesionWeights = lesionWeights,
legendPosition = "bottom", nlfRange = c(0, 1), llfRange = c(0, 1))
print(ret$ROCPlot)
print(ret$AFROCPlot)
print(ret$wAFROCPlot)
print(ret$FROCPlot)
## the FROC plot ends at NLF = 0.5 because for both treatments the physical lambdas are 0.5.
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
check()
rhub::check()
rhub::check_for_cran()
devtools::release()
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
devtools::release()
git2r::is_head()
devtools::release()
Sys.setenv(TZ = "America/New_York")
devtools::release()
install.packages("MASS")
install.packages("RJafroc")
library("RJafroc", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::release()
library(RJafroc)
devtools::release()
library("hunspell", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::release()
devtools::release(spelling = NULL)
aspell()
Sys.glob(file.path(R.home("share"), "dictionaries", "*.rds"))
Sys.getenv(_R_CHECK_CRAN_INCOMING_USE_ASPELL_)
Sys.getenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_")
Sys.getenv()
Sys.getenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_", FALSE)
Sys.setenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_", FALSE)
Sys.setenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_")
Sys.getenv(_R_CHECK_CRAN_INCOMING_USE_ASPELL_)
Sys.getenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_")
Sys.setenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_", FALSE)
Sys.getenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_")
Sys.glob(file.path(R.home("share"), "dictionaries", "*.rds"))
install.packages(c("Rcpp", "stringr"))
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
options()
devtools::release()
checkCRAN()
library(RJafroc)
devtools::check()
devtools::test()
source('~/rjafroc/tests/testthat.R')
library(testthat)
library(RJafroc)
test_check("RJafroc")
devtools::install_github("r-lib/devtools")
devtools:test
devtools:test()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools:test()
test()
test("RJafroc")
test()
remove.packages("devtools")
install.packages("devtools")
check()
devtools::check()
devtools::release()
remove.packages("git2r")
install.packages("git2r")
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::release()
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
remove.packages("rJava")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rJava")
remove.packages("rJava")
install.packages("rJava", type="source")
install.packages("rJave")
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
require(rJava)
library(RJafroc)
## Extract the data corresponding to the second reader in the
## first modality from an included ROC dataset
dataset1_2 <- DfExtractDataset(dataset05, trts = 1, rdrs = 2)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData", overwrite = TRUE)
remove.packages("xlsx")
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",reportFormat = "xlsx", overwrite = TRUE)
reportFile
summaryInfo
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",reportFormat = "xlsx", overwrite = TRUE)
summaryInfo
write.xlsx(iris, file = "writeXLSX1.xlsx")
library("openxlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
write.xlsx(iris, file = "writeXLSX1.xlsx")
write.xlsx(iris, file = "writeXLSXTable1.xlsx", asTable = TRUE)
l <- list("IRIS" = iris, "MTCARS" = mtcars)
write.xlsx(l, file = "writeXLSX2.xlsx")
options("openxlsx.borderColour" = "#4F80BD")
options("openxlsx.borderStyle" = "thin")
options("openxlsx.dateFormat" = "mm/dd/yyyy")
options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")
options("openxlsx.numFmt" = NULL) ## For default style rounding of numeric columns
df <- data.frame("Date" = Sys.Date()-0:19, "LogicalT" = TRUE,
"Time" = Sys.time()-0:19*60*60,
"Cash" = paste("$",1:20), "Cash2" = 31:50,
"hLink" = "https://CRAN.R-project.org/",
"Percentage" = seq(0, 1, length.out=20),
"TinyNumbers" = runif(20) / 1E9,  stringsAsFactors = FALSE)
class(df$Cash) <- "currency"
class(df$Cash2) <- "accounting"
class(df$hLink) <- "hyperlink"
class(df$Percentage) <- "percentage"
class(df$TinyNumbers) <- "scientific"
write.xlsx(df, "writeXLSX3.xlsx")
options("openxlsx.borderColour" = "#4F80BD")
options("openxlsx.borderStyle" = "thin")
options("openxlsx.dateFormat" = "mm/dd/yyyy")
options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")
options("openxlsx.numFmt" = NULL) ## For default style rounding of numeric columns
df <- data.frame("Date" = Sys.Date()-0:19, "LogicalT" = TRUE,
"Time" = Sys.time()-0:19*60*60,
"Cash" = paste("$",1:20), "Cash2" = 31:50,
"hLink" = "https://CRAN.R-project.org/",
"Percentage" = seq(0, 1, length.out=20),
"TinyNumbers" = runif(20) / 1E9,  stringsAsFactors = FALSE)
class(df$Cash) <- "currency"
class(df$Cash2) <- "accounting"
class(df$hLink) <- "hyperlink"
class(df$Percentage) <- "percentage"
class(df$TinyNumbers) <- "scientific"
write.xlsx(df, "writeXLSX3.xlsx")
detach("package:openxlsx", unload=TRUE)
remove.packages("openxlsx")
packageVersion("openxlsx")
options("openxlsx.borderColour" = "#4F80BD")
options("openxlsx.borderStyle" = "thin")
options("openxlsx.dateFormat" = "mm/dd/yyyy")
options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")
options("openxlsx.numFmt" = NULL) ## For default style rounding of numeric columns
df <- data.frame("Date" = Sys.Date()-0:19, "LogicalT" = TRUE,
"Time" = Sys.time()-0:19*60*60,
"Cash" = paste("$",1:20), "Cash2" = 31:50,
"hLink" = "https://CRAN.R-project.org/",
"Percentage" = seq(0, 1, length.out=20),
"TinyNumbers" = runif(20) / 1E9,  stringsAsFactors = FALSE)
class(df$Cash) <- "currency"
class(df$Cash2) <- "accounting"
class(df$hLink) <- "hyperlink"
class(df$Percentage) <- "percentage"
class(df$TinyNumbers) <- "scientific"
write.xlsx(df, "writeXLSX3.xlsx")
library(openxlsx)
library(RJafroc)
packageVersion("openxlsx")
options("openxlsx.borderColour" = "#4F80BD")
options("openxlsx.borderStyle" = "thin")
options("openxlsx.dateFormat" = "mm/dd/yyyy")
options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")
options("openxlsx.numFmt" = NULL) ## For default style rounding of numeric columns
df <- data.frame("Date" = Sys.Date()-0:19, "LogicalT" = TRUE,
"Time" = Sys.time()-0:19*60*60,
"Cash" = paste("$",1:20), "Cash2" = 31:50,
"hLink" = "https://CRAN.R-project.org/",
"Percentage" = seq(0, 1, length.out=20),
"TinyNumbers" = runif(20) / 1E9,  stringsAsFactors = FALSE)
class(df$Cash) <- "currency"
class(df$Cash2) <- "accounting"
class(df$hLink) <- "hyperlink"
class(df$Percentage) <- "percentage"
class(df$TinyNumbers) <- "scientific"
write.xlsx(df, "writeXLSX3.xlsx")
options("openxlsx.borderColour" = "#4F80BD")
options("openxlsx.borderStyle" = "thin")
options("openxlsx.dateFormat" = "mm/dd/yyyy")
options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")
options("openxlsx.numFmt" = NULL) ## For default style rounding of numeric columns
df <- data.frame("Date" = Sys.Date()-0:19, "LogicalT" = TRUE,
"Time" = Sys.time()-0:19*60*60,
"Cash" = paste("$",1:20), "Cash2" = 31:50,
"hLink" = "https://CRAN.R-project.org/",
"Percentage" = seq(0, 1, length.out=20),
"TinyNumbers" = runif(20) / 1E9,  stringsAsFactors = FALSE)
class(df$Cash) <- "currency"
class(df$Cash2) <- "accounting"
class(df$hLink) <- "hyperlink"
class(df$Percentage) <- "percentage"
class(df$TinyNumbers) <- "scientific"
write.xlsx(df, "writeXLSX3.xlsx")
packageVersion("openxlsx")
