library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
UtilOutputReport(dataset = dataset07, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
load("~/rjafroc-master/data/dataset07.RData")
UtilOutputReport(dataset = dataset08, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
UtilOutputReport(dataset = dataset08, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
fomArray
library(RJafroc)
UtilOutputReport(dataset = dataset08, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset08, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
!missing(DataFileName)
missing(DataFileFormat)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
missing(DateFileFormat)
missing(DateFileName)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
missing(DataFileName)
missing(DataFileFormat)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
fn <- system.file("extdata", "includedRocData.xlsx",
package = "RJafroc", mustWork = TRUE)
UtilOutputReport(DataFileName = fn, DataFileFormat = "MRMC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
fn <- system.file("extdata", "includedRocData.xlsx",
package = "RJafroc", mustWork = TRUE)
fn
UtilOutputReport(DataFileName = fn, DataFileFormat = "MRMC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
DataFileName
UtilOutputReport(DataFileName = fn, DataFileFormat = "MRMC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
UtilOutputReport(DataFileName = fn, DataFileFormat = "MRMC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
delimiter
renumber
DataFileFormat
UtilOutputReport(DataFileName = fn, DataFileFormat = "MRMC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
DataFileName
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
file_ext("temp/123.ext")
DataFileName
(!missing(DataFileName) && !(file_ext(DataFileName) %in% c("xls", "xlsx", "txt")))
library(RJafroc)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
DataFileName
file_ext(DataFileName) %in% c("xls", "xlsx")
file_ext(DataFileFormat) %in% c("txt")
DataFileFormat
file_ext(DataFileName) == "txt"
DataFileFormat
!missing(DataFileName) && (file_ext(DataFileName) == "txt") &&  (DataFileFormat ==  "JAFROC")
library(RJafroc)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE, ReportFileFormat = "xlsx")
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE, ReportFileFormat = "xlsx")
ReportFileName
datasetSpecified
basename(DataFileName)
library(RJafroc)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE, ReportFileFormat = "xlsx")
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon",
dataDescription = "MyROCData", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon",
dataDescription = "MyROCData",ReportFileFormat = "xlsx", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData1", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData2",ReportFileFormat = "xlsx", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon",
dataDescription = "MyROCData3", overwrite = TRUE)
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon",
dataDescription = "MyROCData4",ReportFileFormat = "xlsx", overwrite = TRUE)
fn <- system.file("extdata", "includedRocData.xlsx",
package = "RJafroc", mustWork = TRUE)
UtilOutputReport(DataFileName = fn, DataFileFormat = "JAFROC", method = "DBMH", FOM = "Wilcoxon",
overwrite = TRUE, ReportFileFormat = "xlsx")
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon", overwrite = TRUE)
missing(dataset)
!missing(DataFileName)
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon", overwrite = TRUE)
ReportFileName
datasetSpecified
getwd()
dataDescription
deparse(substitute(dataset))
substitute(dataset)
dataDescription
library(RJafroc)
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon", overwrite = TRUE)
ReportFileName
UtilOutputReport(dataset = dataset02, method = "ORH", FOM = "Wilcoxon", overwrite = TRUE)
UtilOutputReport(dataset = dataset05, method = "DBMH", FOM = "Wilcoxon")
library(RJafroc)
UtilOutputReport(dataset = dataset05, method = "ORH")
UtilOutputReport(dataset = dataset05, method = "DBMH", FOM = "HrAuc")
UtilOutputReport(dataset = dataset05, method = "DBMH", FOM = "HrAuc", ReportFileFormat = "xlsx")
library(RJafroc)
UtilOutputReport(dataset = dataset03, method = "DBMH", FOM = "HrAuc", ReportFileFormat = "xlsx")
library(RJafroc)
UtilOutputReport(dataset = dataset03, method = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData1", overwrite = TRUE)
library(RJafroc)
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = TRUE)
library(RJafroc)
install.packages("openxlsx")
install.packages("devtools")
library(RJafroc)
UtilOutputReport(dataset = dataset03, stMethod = "DBMH", FOM = "Wilcoxon",
dataDescription = "MyROCData0", overwrite = TRUE)
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:xlsx", unload=TRUE)
remove.packages("xlsx")
library("xlsxjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:xlsxjars", unload=TRUE)
remove.packages("xlsxjars")
remove.packages("rJava")
install.packages("assertthat")
library(RJafroc)
remove.packages("assertthat")
install.packages("assertthat")
library(RJafroc)
dataset <- DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))
ret <- FitCorCbm(dataset)
print(ret$fitCorCbmRet)
print(ret$stats)
print(ret$fittedPlot)
load("~/rjafroc-master/inst/extdata/binnedData123")
save(binnedData123, file = "~/rjafroc-master/data/binnedData123.RData")
load("~/rjafroc-master/inst/extdata/binnedData124")
save(binnedData124, file = "~/rjafroc-master/data/binnedData124.RData")
load("~/rjafroc-master/inst/extdata/binnedData125")
save(binnedData125, file = "~/rjafroc-master/data/binnedData125.RData")
load("~/rjafroc-master/data/binnedData123.RData")
load("~/rjafroc-master/inst/extdata/binnedData123")
str(binnedData123)
library(RJafroc)
str(binnedData125)
library(RJafroc)
ret <- FitCorCbm(binnedData123)
print(ret$fitCorCbmRet)
print(ret$stats)
print(ret$fittedPlot)
library(RJafroc)
devtools::use_travis()
library(RJafroc)
covr::package_coverage(type = "tests")
install.packages("covr")
covr::package_coverage(type = "tests")
covr::codecov()
covr::codecov(-t 25640eac-4a62-4823-aade-da6dec06d8e7)
covr::codecov()
covr::codecov(-t :25640eac-4a62-4823-aade-da6dec06d8e7)
covr::codecov(token = 25640eac-4a62-4823-aade-da6dec06d8e7)
covr::codecov(token = "25640eac-4a62-4823-aade-da6dec06d8e7")
covr::codecov()
covr::codecov(token = "25640eac-4a62-4823-aade-da6dec06d8e7")
set.seed(1)
NL <- rnorm(5)
LL <- rnorm(7)*1.5 + 2
dataset <- Df2RJafrocDataset(NL, LL) # an ROC dataset
library(RJafroc)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
z1 <- array(dim = c(I, J, K1))
z2 <- array(dim = c(I, J, K2))
mu <- 2;sigma <- 1.5
for (i in 1:I) {
for (j in 1:J) {
z1[i,j,1:K1] <- rnorm(K1)
z2[i,j,] <- rnorm(K2) * sigma + mu
}
dataset <- Df2RJafrocDataset(z1, z2)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
z2 <- array(-Inf,dim = c(I,J,K2,40))
dimNL <- array(dim=c(I,J,2))
## the last value (2) accommodates case and location indices
dimLL <- array(dim=c(I,J,2))
for (i in 1:I) {
for (j in 1:J) {
frocDataRaw <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 1,
J = 1, K1, K2, lesionNum = Lk2)
dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
dataset <- Df2RJafrocDataset(z1, z2, lesionNum = Lk2)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "ROC")
print(retPlot$Plot)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "FROC")
print(retPlot$Plot)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "AFROC")
print(retPlot$Plot)
library(RJafroc)
set.seed(1)
mu <- 1;lambda <- 1;nu <- 1; zeta1 <- 0
K1 <- 5;K2 <- 7
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
frocDataRaw <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 1, J = 1, K1, K2,
lesionNum = Lk2)
NL <- drop(frocDataRaw$NL)
LL <- drop(frocDataRaw$LL)
dataset <- Df2RJafrocDataset(NL, LL, lesionNum = Lk2)
I <- 2;J <- 3;set.seed(1)
K1 <- 25;K2 <- 35
mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
z2 <- array(-Inf,dim = c(I,J,K2,40))
dimNL <- array(dim=c(I,J,2))
## the last value (2) accommodates case and location indices
dimLL <- array(dim=c(I,J,2))
for (i in 1:I) {
for (j in 1:J) {
frocDataRaw <- SimulateFrocDataset(mu, lambda, nu, zeta1, I = 1,
J = 1, K1, K2, lesionNum = Lk2)
dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
dataset <- Df2RJafrocDataset(z1, z2, lesionNum = Lk2)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "ROC")
print(retPlot$Plot)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "FROC")
print(retPlot$Plot)
retPlot <- PlotEmpiricalOperatingCharacteristics(dataset,
trts = seq(1,I), rdrs = seq(1,J), opChType = "AFROC")
print(retPlot$Plot)
library(ggplot2)
dataset <- SimulateRocDataset(K1 = 5000, K2 = 7000, a = 1, b = 0.5, seed = 123)
datasetB <- DfBinDataset(dataset, desiredNumBins = 7, opChType = "ROC")
fomOrg <- as.matrix(UtilFigureOfMerit(dataset, FOM = "Wilcoxon"), nrow = 2, ncol = 9)
print(fomOrg)
fomBinned <- as.matrix(UtilFigureOfMerit(datasetB, FOM = "Wilcoxon"), nrow = 2, ncol = 9)
print(fomOrg)
cat("fomOrg = ", mean(fomOrg), "\n")
cat("fomBinned = ", mean(fomBinned), "\n")
x <- PlotEmpiricalOperatingCharacteristics(dataset)$Plot
y <- PlotEmpiricalOperatingCharacteristics(datasetB)$Points
fpf <- y$genAbscissa[-1];fpf <- fpf[-length(fpf)]
tpf <- y$genOrdinate[-1];tpf <- tpf[-length(tpf)]
plotOpPnts <- rbind(data.frame(fpf = fpf, tpf = tpf))
x <- x + geom_point(data = plotOpPnts, aes(x = fpf, y = tpf), size = 4)
print(x)
xx <- PlotEmpiricalOperatingCharacteristics(datasetB)
print(xx$Points)
binned <- DfBinDataset(dataset05, opChType = "ROC")
PlotEmpiricalOperatingCharacteristics(dataset05,
trts= c(1,2), rdrs = seq(1,9), opChType = "ROC")$Plot
PlotEmpiricalOperatingCharacteristics(binned, trts= c(1,2),
rdrs = seq(1,9), opChType = "ROC")$Plot
binned <- DfBinDataset(dataset05, opChType = "AFROC")
PlotEmpiricalOperatingCharacteristics(dataset05,
trts= c(1,2), rdrs = seq(1,9), opChType = "AFROC")$Plot
PlotEmpiricalOperatingCharacteristics(binned, trts= c(1,2),
rdrs = seq(1,9), opChType = "AFROC")$Plot
devtools::use_testthat()
source('~/rjafroc-master/tests/testthat/test_real_roots.R')
source("real_roots.R")
source("~/rjafroc-master/R/real_roots.R")
gwd()
path.package("RJafroc", quiet = FALSE)
test_dir(".")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test_dir(".")
test_dir("./tests")
result
test_dir("./tests")
roots <- real.roots(1, 7, 12)
roots
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], is_true() )
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], is_true() )
})
source("~/rjafroc-master/R/real_roots.R")
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], expect_true() )
})
test_dir("./tests")
roots <- real.roots(1, 7, 12)
expect_that( roots, is_a("numeric") )
expect_that( length(roots), equals(2) )
expect_that( roots[1] < roots[2], is_true() )
source("./R/real_roots.R")
source("../../R/real_roots.R")
source("../../real_roots.R")
"./real_roots.R"
source("./real_roots.R")
source("./R/real_roots.R")
getwd()
wd <- getwd()
source(paste0(wd, "R/real_roots.R"))
wd <- getwd()
source(paste0(wd, "/R/real_roots.R"))
wd, "/R/real_roots.R"
paste0(wd, "/R/real_roots.R")
source("real_roots.R")
library(RJafroc)
f <- function() stop("My error!")
expect_error(f())
expect_error(f(), "My error!")
library("testthat")
library("RJafroc")
f <- function() stop("My error!")
expect_error(f())
expect_error(f(), "My error!")
expect_error(f())
View(f)
function() stop("My error!")
expect_error(f())
str(mtcars)
expect_output(str(mtcars), "32 obs")
expect_output(str(mtcars), "30 obs")
expect_output(str(mtcars), "11 variables")
expect_output(str(mtcars), "10 variables")
expect_output(str(mtcars), "11 VARIABLES", ignore.case = TRUE)
str(mtcars)
expect_output(str(mtcars), "$ mpg", fixed = TRUE)
f <- function(x) {
if (x < 0) message("*x* is already negative")
-x
}
expect_message(f(-1))
expect_message(f(-1), "already negative")
expect_message(f(1), NA)
expect_message(f(1), "positive")
expect_message(f(-1), "*x*", fixed = TRUE)
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "tero" )
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]e1ro" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
})
test_that("Repeated root", {
roots <- real.roots(1, 6000, 9000000)
expect_equal( length(roots), 1)
expect_equal( roots, -3000)
# Test whether ABSOLUTE error is within 0.1
expect_equal( roots, -3100.01, tolerance  = 0.1)
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3901, tolerance  = 0.1, scale=-3000)
})
test_that("Bogus tests", {
x <- c(1, 2, 3)
expect_that( length(x), equals(2.7) )
expect_that( x, is_a("data.frame") )
})
test_that("Polynomial must be quadratic", {
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
})
#source("real_roots.R")
test_that("Distinct roots", {
roots <- real.roots(1, 7, 12)
expect_true( is.numeric(roots) )
expect_length( roots, 2 )
expect_lt( roots[1] , roots[2])
})
test_that("Repeated root", {
roots <- real.roots(1, 6000, 9000000)
expect_equal( length(roots), 1)
expect_equal( roots, -3000)
# Test whether ABSOLUTE error is within 0.1
expect_equal( roots, -3100.01, tolerance  = 0.1)
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3901, tolerance  = 0.1, scale=-3000)
})
test_that("Polynomial must be quadratic", {
# Test for ANY error
expect_error( real.roots(0, 2, 3))
# Test specifically for an error string containing "zero"
expect_error( real.roots(0, 2, 3), "zero" )
# Test specifically for an error string containing "zero" or "Zero" using regular expression
expect_error( real.roots(0, 2, 3), "[zZ]ero" )
})
# test_that("Bogus tests", {
#
#   x <- c(1, 2, 3)
#
#   expect_that( length(x), equals(2.7) )
#   expect_that( x, is_a("data.frame") )
# })
library(RJafroc)
devtools::test()
library(RJafroc)
devtools::test()
library(RJafroc)
devtools::test()
remove.packages("RJafroc")
library(RJafroc)
ret1M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
ret2M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "dualModality")
retLroc1M <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
retLroc2M <- StSignificanceTestingCadVsRadiologists (datasetCadLroc,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
ret1M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "singleModality")
ret2M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
datasetCadLroc7 <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret2MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
library(RJafroc)
ret1M <- StSignificanceTestingCadVsRadiologists (dataset09,
FOM = "Wilcoxon", method = "singleModality")
dataset09a <- DfExtractDataset(dataset09, rdrs = seq(1:7))
ret1M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "singleModality")
ret2M7 <- StSignificanceTestingCadVsRadiologists (dataset09a,
FOM = "Wilcoxon", method = "dualModality")
datasetCadLroc7 <- DfExtractDataset(datasetCadLroc, rdrs = seq(1:7))
ret1MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "singleModality", FPFValue = 0.05)
ret2MLroc7 <- StSignificanceTestingCadVsRadiologists (datasetCadLroc7,
FOM = "PCL", option = "RRRC", method = "dualModality", FPFValue = 0.05)
