Df2RJafrocDataset(z1, z2),
tmp, print = TRUE)
# I <- 2;J <- 3;set.seed(1)
# K1 <- 25;K2 <- 35
# mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
# lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
# nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
# Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
# z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
# z2 <- array(-Inf,dim = c(I,J,K2,40))
# dimNL <- array(dim=c(I,J,2))
# dimLL <- array(dim=c(I,J,2))
# for (i in 1:I) {
#   for (j in 1:J) {
#     frocDataRaw <- SimulateFrocDataset(
#       mu, lambda, nu, zeta1, I = 1, J = 1, K1, K2, lesionNum = Lk2)
#     dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
#     dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
#     z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
#     z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
#   }
# }
# z1 <- z1[,,,1:max(dimNL[,,2])]
# z2 <- z2[,,,1:max(dimLL[,,2])]
# tmp <- tempfile()
# expect_known_output(
#   Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
#   tmp, print = TRUE)
#
# set.seed(1)
# expect_known_output(
#   Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
#   tmp, print = TRUE)
#
})
test_that("Df2RJafrocDataset", {
set.seed(1)
NL <- rnorm(5)
LL <- rnorm(7)*1.5 + 2
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(NL, LL),
tmp, print = TRUE)
expect_known_output(
Df2RJafrocDataset(NL, LL),
tmp, print = TRUE)
tmp <- tempfile()
set.seed(1)
I <- 2;J <- 3
K1 <- 25;K2 <- 35
z1 <- array(dim = c(I, J, K1))
z2 <- array(dim = c(I, J, K2))
mu <- 2;sigma <- 1.5
for (i in 1:I) {
for (j in 1:J) {
z1[i,j,1:K1] <- rnorm(K1)
z2[i,j,] <- rnorm(K2) * sigma + mu
}
}
expect_known_output(
Df2RJafrocDataset(z1, z2),
tmp, print = TRUE)
expect_known_output(
Df2RJafrocDataset(z1, z2),
tmp, print = TRUE)
set.seed(1)
I <- 2;J <- 3
K1 <- 25;K2 <- 35
mu <- 1;nuP <- 0.8;lambdaP <- 1;zeta1 <- 0
lambda <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$lambda
nu <- UtilPhysical2IntrinsicRSM(mu,lambdaP,nuP)$nu
Lmax <- 2;Lk2 <- floor(runif(K2, 1, Lmax + 1))
z1 <- array(-Inf,dim = c(I,J,K1+K2,40))
z2 <- array(-Inf,dim = c(I,J,K2,40))
dimNL <- array(dim=c(I,J,2))
dimLL <- array(dim=c(I,J,2))
for (i in 1:I) {
for (j in 1:J) {
frocDataRaw <- SimulateFrocDataset(
mu, lambda, nu, zeta1, I = 1, J = 1, K1, K2, lesionNum = Lk2)
dimNL[i,j,] <- dim(drop(frocDataRaw$NL))
dimLL[i,j,] <- dim(drop(frocDataRaw$LL))
z1[i,j,,1:dimNL[i,j,2]] <- drop(frocDataRaw$NL) # drop the excess location indices
z2[i,j,,1:dimLL[i,j,2]] <- drop(frocDataRaw$LL)
}
}
z1 <- z1[,,,1:max(dimNL[,,2])]
z2 <- z2[,,,1:max(dimLL[,,2])]
tmp <- tempfile()
expect_known_output(
Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
tmp, print = TRUE)
expect_known_output(
Df2RJafrocDataset(z1, z2, lesionNum = Lk2),
tmp, print = TRUE)
})
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = c(1,2), rdrs = c(1,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = c(1,2), rdrs = c(1,3)),
tmp, print = TRUE)
})
test_that("DfFroc2Afroc", {
tmp <- tempfile()
expect_known_output(
DfFroc2Afroc(dataset05),
tmp, print = TRUE)
expect_known_output(
DfFroc2Afroc(dataset05),
tmp, print = TRUE)
})
test_that("DfFroc2Roc", {
tmp <- tempfile()
expect_known_output(
DfFroc2Roc(dataset05),
tmp, print = TRUE)
expect_known_output(
DfFroc2Roc(dataset05),
tmp, print = TRUE)
})
test_that("DfLroc2Roc", {
tmp <- tempfile()
dataset <- DfReadLrocDataFile()
expect_known_output(
DfLroc2Roc(dataset),
tmp, print = TRUE)
expect_known_output(
DfLroc2Roc(dataset),
tmp, print = TRUE)
})
test_that("DfReadCrossedModalities", {
tmp <- tempfile()
crossedFileName <- system.file(
"extdata",
"includedCrossedModalitiesData.xlsx",
package = "RJafroc",
mustWork = TRUE)
expect_known_output(
DfReadCrossedModalities(crossedFileName),
tmp, print = TRUE)
expect_known_output(
DfReadCrossedModalities(crossedFileName),
tmp, print = TRUE)
})
test_that("DfReadDataFile MRMC", {
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.csv", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "MRMC"),
tmp, print = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "MRMC"),
tmp, print = TRUE)
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.lrc", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "MRMC"),
tmp, print = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "MRMC"),
tmp, print = TRUE)
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.imrmc", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "iMRMC"),
tmp, print = TRUE)
expect_known_output(
DfReadDataFile(fileName, format = "iMRMC"),
tmp, print = TRUE)
})
test_that("DfReadDataFile JAFROC", {
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE)
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedFrocData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, renumber = TRUE),
tmp, print = TRUE)
})
test_that("DfReadDataFile JAFROC", {
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRocData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE)
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedFrocData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName, renumber = TRUE),
tmp, print = TRUE)
expect_known_output(
DfReadDataFile(fileName, renumber = TRUE),
tmp, print = TRUE)
})
test_that("DfReadDataFile ROI dataset", {
tmp <- tempfile()
fileName <- system.file(
"extdata", "includedRoiData.xlsx", package = "RJafroc", mustWork = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE)
expect_known_output(
DfReadDataFile(fileName),
tmp, print = TRUE)
ds <- DfReadDataFile(fileName)
expect_equal(ds$dataType, "ROI")
})
test_that("DfExtractDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractDataset(dataset05, rdrs = c(1, 3)),
tmp, print = TRUE)
expect_known_output(
DfExtractDataset(dataset05, rdrs = c(1, 3)),
tmp, print = TRUE)
})
test_that("DfSaveDataFile, all formats, including ROI", {
tmp <- tempfile()
expect_known_output(
DfSaveDataFile(dataset = dataset05, fileName = "rocData2.xlsx", format = "JAFROC"),
tmp, print = TRUE)
expect_known_output(
DfSaveDataFile(dataset = dataset05, fileName = "rocData2.xlsx", format = "JAFROC"),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
DfSaveDataFile(dataset = dataset02, fileName = "rocData2.imrmc", format = "iMRMC"),
tmp, print = TRUE)
expect_known_output(
DfSaveDataFile(dataset = dataset02, fileName = "rocData2.imrmc", format = "iMRMC"),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
DfSaveDataFile(datasetROI, fileName = "roiData.xlsx", format = "JAFROC"),
tmp, print = TRUE)
expect_known_output(
DfSaveDataFile(datasetROI, fileName = "roiData.xlsx", format = "JAFROC"),
tmp, print = TRUE)
})
test_that("DfSaveDataFile", {
tmp <- tempfile()
expect_known_output(
DfSaveDataFile(dataset = dataset02, fileName = "rocData2.csv", format = "MRMC"),
tmp, print = TRUE)
expect_known_output(
DfSaveDataFile(dataset = dataset02, fileName = "rocData2.csv", format = "MRMC"),
tmp, print = TRUE)
tmp <- tempfile()
expect_known_output(
DfSaveDataFile(
dataset = dataset02, fileName = "rocData2.lrc", format = "MRMC"),
tmp, print = TRUE)
expect_known_output(
DfSaveDataFile(
dataset = dataset02, fileName = "rocData2.lrc", format = "MRMC"),
tmp, print = TRUE)
})
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-data-file.R')
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = TRUE),
tmp, print = TRUE)
})
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-compare-3fits.R')
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = FALSE),
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1,reAnalyze = FALSE),
tmp, print = TRUE)
})
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
Compare3ProperRocFits(1,1),
tmp, print = TRUE)
})
test_that("Compare3ProperRocFits", {
#   tmp <- tempfile()
#   expect_known_output(
#     Compare3ProperRocFits(1,1),
#     tmp, print = TRUE)
#
# #  tmp <- tempfile()
#   expect_known_output(
#     Compare3ProperRocFits(1,1),
#     tmp, print = TRUE)
})
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
})
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
test_that("DfExtractCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
expect_known_output(
DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(2,3)),
tmp, print = TRUE)
})
library(RJafroc)
library("testthat")
library("RJafroc")
x <- Compare3ProperRocFits(1,1,re)
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
x$allDatasetsResults[[1][1]]
x$allDatasetsResults[[1]][[1]]
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
expect_known_output(
y,
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
y,
tmp, print = TRUE)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
expect_known_output(
y,
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
y,
tmp, print = TRUE)
})
library(RJafroc)
test_that("Compare3ProperRocFits", {
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
expect_known_output(
y,
tmp, print = TRUE)
#  tmp <- tempfile()
expect_known_output(
y,
tmp, print = TRUE)
})
y
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]
y$retRsm$mu
tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_known_output(
y,
tmp, print = TRUE)
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y1 <- y
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
y
y1
# tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y1 <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_equal(y,y1)
test_that("Compare3ProperRocFits", {
# tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
# expect_known_output(
#   y,
#   tmp, print = TRUE)
# x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
# y1 <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_equal(y,1.781369)
#  tmp <- tempfile()
# expect_known_output(
#   y,
#   tmp, print = TRUE)
})
y
test_that("Compare3ProperRocFits", {
# tmp <- tempfile()
x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
y <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
# expect_known_output(
#   y,
#   tmp, print = TRUE)
# x <- Compare3ProperRocFits(1,1, reAnalyze = TRUE)
# y1 <- x$allDatasetsResults[[1]][[1]]$retRsm$mu
expect_equal(y,1.781369284)
#  tmp <- tempfile()
# expect_known_output(
#   y,
#   tmp, print = TRUE)
})
library(RJafroc)
source('~/Documents/GitHub/rjafroc-master/tests/testthat/test-compare-3fits.R')
test_that("DfCreateCorCbmDataset", {
tmp <- tempfile()
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
expect_known_output(
DfCreateCorCbmDataset(),
tmp, print = TRUE)
})
x <- DfCreateCorCbmDataset()
tempfile("abc", "../..")
tempdir()
tempfile("abc", tmpdir = "../..")
tempfile()
file.create(tempfile("abc", "../.."))
/Users/Dev/Documents/GitHub/rjafroc-master/tests
getwd()
paste0(getwd(),"\tests\testthat")
d <- paste0(getwd(),"\tests\testthat")
tempfile("abc", d)
file.create(tempfile(d)
)
file.create(tempfile(d, tmpdir = d)
)
file.create(tempfile(tmpdir = d))
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("pkgdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
pkgdown::build_site()
devtools::check()
pkgdown::build_site()
