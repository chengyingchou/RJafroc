# end of test
}
d <- 2; dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else {
fn <- paste0(test_path(),
"/goodValues/OutputReport/",
dataset_arr_str[d],
FOM_arr[i],
method_arr[j])
if (!file.exists(fn)) {
ret <- UtilOutputReport(
dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE)
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
expect_equal(
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE), ret)
# end of test
}
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
## cycle through all representative datasets, FOMs, methods and options
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(FOM_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else {
fn1 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], ".txt")
fn <- paste0(test_path(), "/goodValues/OutputReport/", dataset_arr_str[d],
FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- UtilOutputReport(
dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
saveRDS(ret, file = fn)
unlink(fn1)
}
ret <- readRDS(fn)
expect_equal(
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE), ret)
unlink(fn1)
# end of test
}
}
}
}
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
## cycle through all representative datasets, FOMs, methods and options
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(FOM_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else {
fn1 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], ".txt")
fn <- paste0(test_path(), "/goodValues/OutputReport/", dataset_arr_str[d],
FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- UtilOutputReport(
dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
saveRDS(ret, file = fn)
unlink(fn1)
}
ret <- readRDS(fn)
expect_equal(
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE), ret)
unlink(fn1)
# end of test
}
}
}
}
dataset_arr <- list(dataset02, dataset05)
library(RJafroc)
dataset_arr <- list(dataset02, dataset05)
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
## cycle through all representative datasets, FOMs, methods and options
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(FOM_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else {
fn1 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], ".txt")
fn <- paste0(test_path(), "/goodValues/OutputReport/", dataset_arr_str[d],
FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- UtilOutputReport(
dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
saveRDS(ret, file = fn)
unlink(fn1)
}
ret <- readRDS(fn)
expect_equal(
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE), ret)
unlink(fn1)
# end of test
}
}
}
}
library(testthat)
library(devtools)
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc", "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
## cycle through all representative datasets, FOMs, methods and options
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(FOM_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else {
fn1 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], ".txt")
fn <- paste0(test_path(), "/goodValues/OutputReport/", dataset_arr_str[d],
FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- UtilOutputReport(
dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
saveRDS(ret, file = fn)
unlink(fn1)
}
ret <- readRDS(fn)
expect_equal(
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE), ret)
unlink(fn1)
# end of test
}
}
}
}
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
## cycle through all representative datasets, FOMs, methods
for (d in 1:length(dataset_arr)) {
dataset <- dataset_arr[[d]]
for (i in 1:length(FOM_arr)) {
for (j in 1:length(method_arr)) {
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], overwrite = TRUE))
} else {
fn1 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], ".txt")
fn <- paste0(test_path(), "/goodValues/OutputReport/", dataset_arr_str[d],
FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- UtilOutputReport(
dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
saveRDS(ret, file = fn)
unlink(fn1)
}
ret <- readRDS(fn)
expect_equal(
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE), ret)
unlink(fn1)
# end of test
}
}
}
}
ret1 <- UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
ret <- UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
method_arr[j]
FOM_arr[i]
fn1
fn
fn1 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], "1.txt")
# fn <- paste0(test_path(), "/goodValues/OutputReport/", dataset_arr_str[d],
#              FOM_arr[i], method_arr[j])
if (!file.exists(fn1)) {
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn1, overwrite = TRUE)
}
fn2 <- paste0(test_path(), "/goodValues/OutputReport/",dataset_arr_str[d],
FOM_arr[i], method_arr[j], "2.txt")
UtilOutputReport(dataset, FOM = FOM_arr[i], method = method_arr[j], ReportFileName = fn2, overwrite = TRUE)
xx <- file(fn1, open = "rt")
xx1 <- readLines(xx)
yy <- file(fn2, open = "rt")
yy1 <- readLines(yy)
xx1[1]
xx1[13]
xx1[15]
xx1[16]
xx1[17]
xx1[18]
xx1[19]
xx1[20]
yy11[20]
yy1[20]
fn <- paste0(test_path(), "/goodValues/OutputReport/", "03", "ExcelFormat.xlsx"); UtilOutputReport(dataset03, ReportFileName = fn, ReportFileFormat = "xlsx", overwrite = TRUE)
fn <- paste0(test_path(), "/goodValues/OutputReport/", "dataset03", ".xlsx")
if (!file.exists(fn)) {
UtilOutputReport(dataset03, ReportFileName = fn, ReportFileFormat = "xlsx", overwrite = TRUE)
}
fn1 <- paste0(test_path(), "/goodValues/OutputReport/", "dataset03", "1.xlsx")
UtilOutputReport(dataset03, ReportFileName = fn1, ReportFileFormat = "xlsx", overwrite = TRUE)
for (i in 1:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook(fn, i) # check each sheet individually
dfCurrent <- readWorkbook(fn1, i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
# end of test
library(openxlsx)
fn <- paste0(test_path(), "/goodValues/OutputReport/", "dataset03", ".xlsx")
if (!file.exists(fn)) {
UtilOutputReport(dataset03, ReportFileName = fn, ReportFileFormat = "xlsx", overwrite = TRUE)
}
fn1 <- paste0(test_path(), "/goodValues/OutputReport/", "dataset03", "1.xlsx")
UtilOutputReport(dataset03, ReportFileName = fn1, ReportFileFormat = "xlsx", overwrite = TRUE)
for (i in 1:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook(fn, i) # check each sheet individually
dfCurrent <- readWorkbook(fn1, i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
# end of test
fn <- paste0(test_path(), "/goodValues/OutputReport/", "dataset03", ".xlsx")
if (!file.exists(fn)) {
UtilOutputReport(dataset03, ReportFileName = fn, ReportFileFormat = "xlsx", overwrite = TRUE)
}
fn1 <- paste0(test_path(), "/goodValues/OutputReport/", "dataset03", "1.xlsx")
UtilOutputReport(dataset03, ReportFileName = fn1, ReportFileFormat = "xlsx", overwrite = TRUE)
for (i in 2:3) { # there are 3 worksheets in Excel file
dfGood <- readWorkbook(fn, i) # check each sheet individually
dfCurrent <- readWorkbook(fn1, i)    # do:
expect_equivalent(dfGood, dfCurrent)# works!
}
unlink(fn1)
dataset_arr <- list(dataset02, dataset05)
dataset_arr_str <- c("dataset02", "dataset05")
FOM_arr <- c("Wilcoxon", "HrAuc") #, "wAFROC1","AFROC1","MaxLLF","MaxNLF","MaxNLFAllCases", "ExpTrnsfmSp", "HrSp", "HrSe")
method_arr <- c("DBMH", "ORH")
d <- 1;i <- 1;j <- 1
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
d <- 1;i <- 2;j <- 1
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
d <- 1;i <- 1;j <- 2
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
d <- 1;i <- 1;j <- 1
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
d <- 1;i <- 1;j <- 2
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
length(ret)
length(ret1)
ret
rm(dfGood)
rm(dfCurrent)
rm(fn1)
rm(fn2)
rm(xx, yy)
rm(xx1, yy1)
d <- 1;i <- 2;j <- 1
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
d <- 2;i <- 2;j <- 1
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
ret$anovaY
ret1$anovaY
ret1 <- ret1[c(-3,-4)]
ret <- ret[c(-2,-3)]
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn);ret <- ret[1:10];ret <- ret[c(-2,-3)]
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j]);ret1 <- ret1[c(-2,-3)]
expect_equal(ret1, ret)
# end of test
}
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn);ret <- ret[1:10]
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
dataset <- dataset_arr[[d]]
if ((dataset$dataType == "ROC") && (FOM_arr[i] != "Wilcoxon")) {
# for ROC data, only Wilcoxon FOM is allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else if ((dataset$dataType == "FROC") && (FOM_arr[i] == "Wilcoxon")) {
# for FROC data, Wilcoxon FOM is NOT allowed
expect_error(StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j]))
} else {
fn <- paste0(test_path(), "/goodValues/SigTest/",
dataset_arr_str[d], FOM_arr[i], method_arr[j])
if (!file.exists(fn)) {
ret <- StSignificanceTesting(dataset, FOM = FOM_arr[i], method = method_arr[j])
saveRDS(ret, file = fn)
}
ret <- readRDS(fn)
ret1 <- StSignificanceTesting(dataset, FOM = FOM_arr[i],method = method_arr[j])
expect_equal(ret1, ret)
# end of test
}
ret <- ret[[-2,-3]]
ret <- ret[c(-2,-3)]
ret1 <- ret1[c(-2,-3)]
expect_equal(ret1, ret)
