## Test with single interior point data
fp <- c(rep(1,7), rep(2, 3))
tp <- c(rep(1,5), rep(2, 5))
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## Test with two interior data points
fp <- c(rep(1,7), rep(2, 5), rep(3, 3))
tp <- c(rep(1,3), rep(2, 5), rep(3, 7))
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## Test with three interior data points
fp <- c(rep(1,12), rep(2, 5), rep(3, 3), rep(4, 5)) #25
tp <- c(rep(1,3), rep(2, 5), rep(3, 7), rep(4, 10)) #25
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## test for TONY data, i = 2 and j = 3; only case permitting chisqure calculation
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
## Test with included ROC data (some bins have zero counts)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
## Test with included degenerate ROC data
lesDistr <- UtilLesionDistribution(datasetDegenerate)
retFit <- FitRsmRoc(datasetDegenerate, lesDistr);print(retFit$fittedPlot)
## Test with single interior point data
fp <- c(rep(1,7), rep(2, 3))
tp <- c(rep(1,5), rep(2, 5))
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## Test with two interior data points
fp <- c(rep(1,7), rep(2, 5), rep(3, 3))
tp <- c(rep(1,3), rep(2, 5), rep(3, 7))
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## Test with three interior data points
fp <- c(rep(1,12), rep(2, 5), rep(3, 3), rep(4, 5)) #25
tp <- c(rep(1,3), rep(2, 5), rep(3, 7), rep(4, 10)) #25
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## test for TONY data, i = 2 and j = 3; only case permitting chisqure calculation
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
## Test with included ROC data (some bins have zero counts)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
## Test with included degenerate ROC data
lesDistr <- UtilLesionDistribution(datasetDegenerate)
retFit <- FitRsmRoc(datasetDegenerate, lesDistr);print(retFit$fittedPlot)
## Test with single interior point data
fp <- c(rep(1,7), rep(2, 3))
tp <- c(rep(1,5), rep(2, 5))
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## Test with two interior data points
fp <- c(rep(1,7), rep(2, 5), rep(3, 3))
tp <- c(rep(1,3), rep(2, 5), rep(3, 7))
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## Test with three interior data points
fp <- c(rep(1,12), rep(2, 5), rep(3, 3), rep(4, 5)) #25
tp <- c(rep(1,3), rep(2, 5), rep(3, 7), rep(4, 10)) #25
binnedRocData <- Df2RJafrocDataset(fp, tp)
lesDistr <- UtilLesionDistribution(binnedRocData)
retFit <- FitRsmRoc(binnedRocData, lesDistr);print(retFit$fittedPlot)
## test for TONY data, i = 2 and j = 3; only case permitting chisqure calculation
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
retFit$ChisqrFitStats
## Test with included ROC data
retFit <- FitCbmRoc(dataset02);print(retFit$fittedPlot)
## Test with included degenerate ROC data (yes! CBM can fit such data)
retFit <- FitCbmRoc(datasetDegenerate);print(retFit$fittedPlot)
## Test with single interior point data
fp <- c(rep(1,7), rep(2, 3))
tp <- c(rep(1,5), rep(2, 5))
dataset <- Df2RJafrocDataset(fp, tp)
retFit <- FitCbmRoc(dataset);print(retFit$fittedPlot)
## Test with two interior data points
fp <- c(rep(1,7), rep(2, 5), rep(3, 3))
tp <- c(rep(1,3), rep(2, 5), rep(3, 7))
dataset <- Df2RJafrocDataset(fp, tp)
retFit <- FitCbmRoc(dataset);print(retFit$fittedPlot)
## Test with included ROC data (some bins have zero counts)
retFit <- FitCbmRoc(dataset02, 2, 1);print(retFit$fittedPlot)
## Test with TONY data for which chisqr can be calculated
ds <- DfFroc2Roc(dataset01)
retFit <- FitCbmRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
## Test with an included ROC dataset
retFit <- FitBinormalRoc(dataset02);print(retFit$fittedPlot)
## Test with an included FROC dataset; it needs to be binned
## as there are more than 5 discrete ratings levels
binned <- DfBinDataset(dataset05, desiredNumBins = 5, opChType = "ROC")
retFit <- FitBinormalRoc(binned);print(retFit$fittedPlot)
## Test with single interior point data
fp <- c(rep(1,7), rep(2, 3))
tp <- c(rep(1,5), rep(2, 5))
dataset <- Df2RJafrocDataset(fp, tp)
retFit <- FitBinormalRoc(dataset);print(retFit$fittedPlot)
## Test with two interior data points
fp <- c(rep(1,7), rep(2, 5), rep(3, 3))
tp <- c(rep(1,3), rep(2, 5), rep(3, 7))
dataset <- Df2RJafrocDataset(fp, tp)
retFit <- FitBinormalRoc(dataset);print(retFit$fittedPlot)
## Test with TONY data for which chisqr can be calculated
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
lesDistr <- UtilLesionDistribution(dataset02)
retFit <- FitRsmRoc(dataset02, lesDistr)
print(retFit$fittedPlot)
library(RJafroc)
retFit <- FitBinormalRoc(datasetDegenerate);print(retFit$fittedPlot)
## Test with TONY data for which chisqr can be calculated
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
ds <- DfFroc2Roc(dataset01)
retFit <- FitCbmRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
ds <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
lesDistr <- UtilLesionDistribution(dataset01)
rocData <- DfFroc2Roc(dataset01)
retFit <- FitRsmRoc(rocData, lesDistr, trt = 2, rdr = 3)
print(retFit$fittedPlot)
retFit$ChisqrFitStats
## Test with TONY data for which chisqr can be calculated
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
fpExpProb
tpExpProb
fpGoodness
tpGoodness
library(RJafroc)
## Test with TONY data for which chisqr can be calculated
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
ds <- DfFroc2Roc(dataset01)
retFit <- FitBinormalRoc(ds, 2, 3);print(retFit$fittedPlot)
retFit$ChisqrFitStats
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
retFileName
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
library(RJafroc)
ret <- ExampleCompare3ProperRocFits()
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
sysSavFileName
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
sysAnalFileName
sysSavFileName
sysAnalFileName
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
debugSource('~/rjafroc-master/R/ExampleCompare3ProperRocFits.R')
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(startIndx = 1, endIndx = 1, reAnalyze = FALSE)
sysSavFileName
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(startIndx = 1, endIndx = 1, reAnalyze = TRUE)
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(startIndx = 1, endIndx = 1)
ret <- ExampleCompare3ProperRocFits(reAnalyze = TRUE)
library(RJafroc)
ret <- ExampleCompare3ProperRocFits(1,1)
library(RJafroc)
devtools::check()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
revdep("rjafroc")
revdep_check()
revdep_check_save_summary()
revdep_check_print_problems()
version()
Version
R.Version
R.version.string
library(RJafroc)
source('~/rjafroc-master/R/Compare3ProperRocFits.R')
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
str(ret)
str(ret$allResults)
str(ret$allResults[[1]])
ret <- Compare3ProperRocFits(1,2)
ret$allResults[[1]]
str(ret$allResults[[1]])
str(ret$allResults[[10]]$retRsm$mu)
str(ret$allResults[[11]]$retRsm$mu)
allResults <- list()
allResults <- list(list())
allResults <- list(list(),list())
allResults[[1]]
allResults[[2]]
allResults[[3]]
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee")
b = c(TRUE, FALSE, TRUE, FALSE, FALSE)
x = list(n, s, b, 3)
x[2]
x[c(2, 4)]
x[[2]]
x <- list(rep(list(),3))
x <- rep(list(),3)
View(x)
x <- list(rep(list(),3))
str(x)
x <- list(rep(NULL,3))
x
x <- list()
x1 <- rep(x,4)
x1
library(RJafroc)
x <- as.list(array(dim = 4))
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
f-startIndx+1
allResults[f-startIndx+1]
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
x$retRsm$mu
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
x <- array(dim=c(14,10))
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
allResults[1] <- c(1,2,3,4)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
allResults[1] <- as.list(c(1,2,3,4))
allResults[1]
allResults[[1]] <- as.list(c(1,2,3,4))
allResults[[2]] <- as.list(c(3,3,2,3,4))
library(RJafroc)
allResults[[3]] <- as.list(c(3,3,3,3,2,3,4))
#count <- 0
allResults <- list()
allResults[[1]] <- as.list(c(1,2,3,4))
allResults[[2]] <- as.list(c(3,3,2,3,4))
allResults[[3]] <- as.list(c(3,3,3,3,2,3,4))
library(RJafroc)
ret <- Compare3ProperRocFits(reAnalyze = TRUE)
x <- ret$AllBinnedDatasets
library(RJafroc)
ret <- Compare3ProperRocFits(1,3,reAnalyze = TRUE)
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE)
x <- ret$allResults
x[[1]]$retRsm$mu
x[[2]]$retRsm$mu
x[[20]]$retRsm$mu
x[[21]]$retRsm$mu
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE)
str(ret$AllBinnedDatasets)
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE)
ret$allResults[[1]]
str(ret$allResults[[1]])
str(ret$allResults)
str(ret$allResults[1])
str(ret$allResults[[1]]$retRsm)
str(ret$allResults[[1]]$allResults)
str(ret$allResults[1]$allResults)
str(ret$allResults[[1]][[1]])
str(ret$allResults[[1]][[10]])
str(ret$allResults[[1]][[11]])
str(ret$allResults[[2]][[10]])
str(ret$allResults[[3]][[10]])
str(ret$allResults[[2]][[10]])
str(ret$allResults[[2]][[1]])
str(ret$allResults[[2]][[9]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,2,reAnalyze = TRUE) # analyze first two datasets
x <- ret$allDatasetsResults
str(x[[1]][[1]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
f-startIndx + 1
ret <- Compare3ProperRocFits(1,1)
allDatasetsResults[f-startIndx + 1] <- list(allResults)
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
library(RJafroc)
ret <- Compare3ProperRocFits(1,1)
x <- ret$allDatasetsResults
str(x[[1]][[1]])
str(x[[1]][[10]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,2)
x <- ret$allDatasetsResults
str(x[[1]][[1]])
str(x[[1]][[10]])
str(x[[1]][[11]])
str(x[[2]][[10]])
str(x[[3]][[10]])
library(RJafroc)
ret <- Compare3ProperRocFits(1,2)
dataset <- DfExtractCorCbmDataset(dataset05, trts = 1, rdrs = c(4,7))
ret <- FitCorCbm(dataset)
print(ret$fitCorCbmRet)
print(ret$stats)
print(ret$fittedPlot)
library(RJafroc)
ret <- Compare3ProperRocFits(1,2) # analyze first two datasets
x <- ret$allDatasetsResults
foo <- list( str='R', vec=c(1,2,3), bool=TRUE )
str(foo)
foo[ 'bool' ]
foo[ 'bool' ]$bool
foo[[ 'bool' ]]
bar <- list( mat=matrix(0,nrow=2,ncol=2), rand=rnorm(1) )
foo[[ 2:3 ]]
foo[ 2:3 ]
bar <- list( mat=matrix(0,nrow=2,ncol=2), rand=rnorm(1) )
bar
foo[ 2:3 ] <- bar
foo
library(RJafroc)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::use_vignette("my-vignette")
library(RJafroc)
browseVignettes(package = "dplyr")
library(RJafroc)
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
# Add two numbers together
add <- function(a, b) a + b
add(10, 20)
install.packages("pander")
pander::pandoc.table(iris[1:3, 1:4])
library(RJafroc)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
str(dataset03)
ret <- StSignificanceTesting(dataset03, method = "DBMH", FOM = "Wilcoxon")
print(ret)
dataset03$NL[1,1,68:100]
dataset03$NL[1,1,68:100,1]
dataset03$NL[1,1,34:100,1]
dataset03$NL[1,1,1:34,1]
dataset03$NL[2,3,1:34,1]
ret$fomArray
ret$anovaY
ret$anovaYi
ret$ciAvgRdrEachTrtRRRC
ret$ciAvgRdrEachTrtRRFC
library(RJafroc)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RJafroc)
fileName <- paste0(fileName, "includedRocData.xlsx")
fileName <- "includedRocData.xlsx"
sysFileName <- system.file(paste0("extdata/",fileName), fileName, package = "RJafroc", mustWork = TRUE)
fileName <- "includedRocData.xlsx"
sysFileName <- system.file(paste0("extdata/",fileName), fileName, package = "RJafroc", mustWork = TRUE)
paste0("extdata/",fileName)
sysFileName <- system.file(paste0("extdata/",fileName), package = "RJafroc", mustWork = TRUE)
fileName <- "includedRocData.xlsx"
sysFileName <- system.file(paste0("extdata/",fileName), package = "RJafroc", mustWork = TRUE)
ds <- DfReadDataFile(sysFileName)
str(ds)
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "Example.xlsx")
print(ret)
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "..\Example.xlsx")
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "..\\Example.xlsx")
print(ret)
ret <- UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx", ReportFileName = "../Example.xlsx")
print(ret)
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE,
ReportFileFormat = "xlsx")
UtilOutputReport(dataset03, stMethod = "DBMH", FOM = "Wilcoxon", overwrite = TRUE, ReportFileFormat = "xlsx")
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
revdep("rjafroc")
library(RJafroc)
devtools::build_vignettes()
devtools::check()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("ggplot2", "mvtnorm", "Rcpp", "roxygen2"))
install.packages(c("devtools", "rmarkdown"))
library(RJafroc)
library(RJafroc)
library(RJafroc)
devtools::build_vignettes()
setwd("~/Dropbox/rjafroc")
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
devtools::build_vignettes()
library(RJafroc)
library(RJafroc)
vignette <- readRDS("~/Dropbox/rjafroc/Meta/vignette.rds")
View(vignette)
library(RJafroc)
